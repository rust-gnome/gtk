// This file was generated by gir (df8a3f3) from gir-files (11e0e6d)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate libc;
#[macro_use] extern crate bitflags;
extern crate glib_sys as glib;
extern crate gobject_sys as gobject;
extern crate gio_sys as gio;
extern crate atk_sys as atk;
extern crate gdk_pixbuf_sys as gdk_pixbuf;
extern crate gdk_sys as gdk;
extern crate pango_sys as pango;
extern crate cairo_sys as cairo;

#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, time_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType, Volatile};

pub const GTK_ENTRY_BUFFER_MAX_SIZE: u16 = ::std::u16::MAX;

pub type GtkAllocation = gdk::GdkRectangle;
pub type GtkStock = gpointer;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkAlign {
    Fill = 0,
    Start = 1,
    End = 2,
    Center = 3,
    Baseline = 4,
}
pub const GTK_ALIGN_FILL: GtkAlign = GtkAlign::Fill;
pub const GTK_ALIGN_START: GtkAlign = GtkAlign::Start;
pub const GTK_ALIGN_END: GtkAlign = GtkAlign::End;
pub const GTK_ALIGN_CENTER: GtkAlign = GtkAlign::Center;
pub const GTK_ALIGN_BASELINE: GtkAlign = GtkAlign::Baseline;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkArrowPlacement {
    Both = 0,
    Start = 1,
    End = 2,
}
pub const GTK_ARROWS_BOTH: GtkArrowPlacement = GtkArrowPlacement::Both;
pub const GTK_ARROWS_START: GtkArrowPlacement = GtkArrowPlacement::Start;
pub const GTK_ARROWS_END: GtkArrowPlacement = GtkArrowPlacement::End;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkArrowType {
    Up = 0,
    Down = 1,
    Left = 2,
    Right = 3,
    None = 4,
}
pub const GTK_ARROW_UP: GtkArrowType = GtkArrowType::Up;
pub const GTK_ARROW_DOWN: GtkArrowType = GtkArrowType::Down;
pub const GTK_ARROW_LEFT: GtkArrowType = GtkArrowType::Left;
pub const GTK_ARROW_RIGHT: GtkArrowType = GtkArrowType::Right;
pub const GTK_ARROW_NONE: GtkArrowType = GtkArrowType::None;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkAssistantPageType {
    Content = 0,
    Intro = 1,
    Confirm = 2,
    Summary = 3,
    Progress = 4,
    Custom = 5,
}
pub const GTK_ASSISTANT_PAGE_CONTENT: GtkAssistantPageType = GtkAssistantPageType::Content;
pub const GTK_ASSISTANT_PAGE_INTRO: GtkAssistantPageType = GtkAssistantPageType::Intro;
pub const GTK_ASSISTANT_PAGE_CONFIRM: GtkAssistantPageType = GtkAssistantPageType::Confirm;
pub const GTK_ASSISTANT_PAGE_SUMMARY: GtkAssistantPageType = GtkAssistantPageType::Summary;
pub const GTK_ASSISTANT_PAGE_PROGRESS: GtkAssistantPageType = GtkAssistantPageType::Progress;
pub const GTK_ASSISTANT_PAGE_CUSTOM: GtkAssistantPageType = GtkAssistantPageType::Custom;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkBaselinePosition {
    Top = 0,
    Center = 1,
    Bottom = 2,
}
pub const GTK_BASELINE_POSITION_TOP: GtkBaselinePosition = GtkBaselinePosition::Top;
pub const GTK_BASELINE_POSITION_CENTER: GtkBaselinePosition = GtkBaselinePosition::Center;
pub const GTK_BASELINE_POSITION_BOTTOM: GtkBaselinePosition = GtkBaselinePosition::Bottom;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkBorderStyle {
    None = 0,
    Solid = 1,
    Inset = 2,
    Outset = 3,
    Hidden = 4,
    Dotted = 5,
    Dashed = 6,
    Double = 7,
    Groove = 8,
    Ridge = 9,
}
pub const GTK_BORDER_STYLE_NONE: GtkBorderStyle = GtkBorderStyle::None;
pub const GTK_BORDER_STYLE_SOLID: GtkBorderStyle = GtkBorderStyle::Solid;
pub const GTK_BORDER_STYLE_INSET: GtkBorderStyle = GtkBorderStyle::Inset;
pub const GTK_BORDER_STYLE_OUTSET: GtkBorderStyle = GtkBorderStyle::Outset;
pub const GTK_BORDER_STYLE_HIDDEN: GtkBorderStyle = GtkBorderStyle::Hidden;
pub const GTK_BORDER_STYLE_DOTTED: GtkBorderStyle = GtkBorderStyle::Dotted;
pub const GTK_BORDER_STYLE_DASHED: GtkBorderStyle = GtkBorderStyle::Dashed;
pub const GTK_BORDER_STYLE_DOUBLE: GtkBorderStyle = GtkBorderStyle::Double;
pub const GTK_BORDER_STYLE_GROOVE: GtkBorderStyle = GtkBorderStyle::Groove;
pub const GTK_BORDER_STYLE_RIDGE: GtkBorderStyle = GtkBorderStyle::Ridge;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkBuilderError {
    InvalidTypeFunction = 0,
    UnhandledTag = 1,
    MissingAttribute = 2,
    InvalidAttribute = 3,
    InvalidTag = 4,
    MissingPropertyValue = 5,
    InvalidValue = 6,
    VersionMismatch = 7,
    DuplicateId = 8,
    ObjectTypeRefused = 9,
    TemplateMismatch = 10,
    InvalidProperty = 11,
    InvalidSignal = 12,
}
pub const GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION: GtkBuilderError = GtkBuilderError::InvalidTypeFunction;
pub const GTK_BUILDER_ERROR_UNHANDLED_TAG: GtkBuilderError = GtkBuilderError::UnhandledTag;
pub const GTK_BUILDER_ERROR_MISSING_ATTRIBUTE: GtkBuilderError = GtkBuilderError::MissingAttribute;
pub const GTK_BUILDER_ERROR_INVALID_ATTRIBUTE: GtkBuilderError = GtkBuilderError::InvalidAttribute;
pub const GTK_BUILDER_ERROR_INVALID_TAG: GtkBuilderError = GtkBuilderError::InvalidTag;
pub const GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE: GtkBuilderError = GtkBuilderError::MissingPropertyValue;
pub const GTK_BUILDER_ERROR_INVALID_VALUE: GtkBuilderError = GtkBuilderError::InvalidValue;
pub const GTK_BUILDER_ERROR_VERSION_MISMATCH: GtkBuilderError = GtkBuilderError::VersionMismatch;
pub const GTK_BUILDER_ERROR_DUPLICATE_ID: GtkBuilderError = GtkBuilderError::DuplicateId;
pub const GTK_BUILDER_ERROR_OBJECT_TYPE_REFUSED: GtkBuilderError = GtkBuilderError::ObjectTypeRefused;
pub const GTK_BUILDER_ERROR_TEMPLATE_MISMATCH: GtkBuilderError = GtkBuilderError::TemplateMismatch;
pub const GTK_BUILDER_ERROR_INVALID_PROPERTY: GtkBuilderError = GtkBuilderError::InvalidProperty;
pub const GTK_BUILDER_ERROR_INVALID_SIGNAL: GtkBuilderError = GtkBuilderError::InvalidSignal;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkButtonBoxStyle {
    Spread = 1,
    Edge = 2,
    Start = 3,
    End = 4,
    Center = 5,
    Expand = 6,
}
pub const GTK_BUTTONBOX_SPREAD: GtkButtonBoxStyle = GtkButtonBoxStyle::Spread;
pub const GTK_BUTTONBOX_EDGE: GtkButtonBoxStyle = GtkButtonBoxStyle::Edge;
pub const GTK_BUTTONBOX_START: GtkButtonBoxStyle = GtkButtonBoxStyle::Start;
pub const GTK_BUTTONBOX_END: GtkButtonBoxStyle = GtkButtonBoxStyle::End;
pub const GTK_BUTTONBOX_CENTER: GtkButtonBoxStyle = GtkButtonBoxStyle::Center;
pub const GTK_BUTTONBOX_EXPAND: GtkButtonBoxStyle = GtkButtonBoxStyle::Expand;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkButtonRole {
    Normal = 0,
    Check = 1,
    Radio = 2,
}
pub const GTK_BUTTON_ROLE_NORMAL: GtkButtonRole = GtkButtonRole::Normal;
pub const GTK_BUTTON_ROLE_CHECK: GtkButtonRole = GtkButtonRole::Check;
pub const GTK_BUTTON_ROLE_RADIO: GtkButtonRole = GtkButtonRole::Radio;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkButtonsType {
    None = 0,
    Ok = 1,
    Close = 2,
    Cancel = 3,
    YesNo = 4,
    OkCancel = 5,
}
pub const GTK_BUTTONS_NONE: GtkButtonsType = GtkButtonsType::None;
pub const GTK_BUTTONS_OK: GtkButtonsType = GtkButtonsType::Ok;
pub const GTK_BUTTONS_CLOSE: GtkButtonsType = GtkButtonsType::Close;
pub const GTK_BUTTONS_CANCEL: GtkButtonsType = GtkButtonsType::Cancel;
pub const GTK_BUTTONS_YES_NO: GtkButtonsType = GtkButtonsType::YesNo;
pub const GTK_BUTTONS_OK_CANCEL: GtkButtonsType = GtkButtonsType::OkCancel;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkCellRendererAccelMode {
    Gtk = 0,
    Other = 1,
    ModifierTap = 2,
}
pub const GTK_CELL_RENDERER_ACCEL_MODE_GTK: GtkCellRendererAccelMode = GtkCellRendererAccelMode::Gtk;
pub const GTK_CELL_RENDERER_ACCEL_MODE_OTHER: GtkCellRendererAccelMode = GtkCellRendererAccelMode::Other;
pub const GTK_CELL_RENDERER_ACCEL_MODE_MODIFIER_TAP: GtkCellRendererAccelMode = GtkCellRendererAccelMode::ModifierTap;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkCellRendererMode {
    Inert = 0,
    Activatable = 1,
    Editable = 2,
}
pub const GTK_CELL_RENDERER_MODE_INERT: GtkCellRendererMode = GtkCellRendererMode::Inert;
pub const GTK_CELL_RENDERER_MODE_ACTIVATABLE: GtkCellRendererMode = GtkCellRendererMode::Activatable;
pub const GTK_CELL_RENDERER_MODE_EDITABLE: GtkCellRendererMode = GtkCellRendererMode::Editable;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkCornerType {
    TopLeft = 0,
    BottomLeft = 1,
    TopRight = 2,
    BottomRight = 3,
}
pub const GTK_CORNER_TOP_LEFT: GtkCornerType = GtkCornerType::TopLeft;
pub const GTK_CORNER_BOTTOM_LEFT: GtkCornerType = GtkCornerType::BottomLeft;
pub const GTK_CORNER_TOP_RIGHT: GtkCornerType = GtkCornerType::TopRight;
pub const GTK_CORNER_BOTTOM_RIGHT: GtkCornerType = GtkCornerType::BottomRight;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkCssProviderError {
    Failed = 0,
    Syntax = 1,
    Import = 2,
    Name = 3,
    Deprecated = 4,
    UnknownValue = 5,
}
pub const GTK_CSS_PROVIDER_ERROR_FAILED: GtkCssProviderError = GtkCssProviderError::Failed;
pub const GTK_CSS_PROVIDER_ERROR_SYNTAX: GtkCssProviderError = GtkCssProviderError::Syntax;
pub const GTK_CSS_PROVIDER_ERROR_IMPORT: GtkCssProviderError = GtkCssProviderError::Import;
pub const GTK_CSS_PROVIDER_ERROR_NAME: GtkCssProviderError = GtkCssProviderError::Name;
pub const GTK_CSS_PROVIDER_ERROR_DEPRECATED: GtkCssProviderError = GtkCssProviderError::Deprecated;
pub const GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE: GtkCssProviderError = GtkCssProviderError::UnknownValue;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkCssSectionType {
    Document = 0,
    Import = 1,
    ColorDefinition = 2,
    BindingSet = 3,
    Ruleset = 4,
    Selector = 5,
    Declaration = 6,
    Value = 7,
    Keyframes = 8,
}
pub const GTK_CSS_SECTION_DOCUMENT: GtkCssSectionType = GtkCssSectionType::Document;
pub const GTK_CSS_SECTION_IMPORT: GtkCssSectionType = GtkCssSectionType::Import;
pub const GTK_CSS_SECTION_COLOR_DEFINITION: GtkCssSectionType = GtkCssSectionType::ColorDefinition;
pub const GTK_CSS_SECTION_BINDING_SET: GtkCssSectionType = GtkCssSectionType::BindingSet;
pub const GTK_CSS_SECTION_RULESET: GtkCssSectionType = GtkCssSectionType::Ruleset;
pub const GTK_CSS_SECTION_SELECTOR: GtkCssSectionType = GtkCssSectionType::Selector;
pub const GTK_CSS_SECTION_DECLARATION: GtkCssSectionType = GtkCssSectionType::Declaration;
pub const GTK_CSS_SECTION_VALUE: GtkCssSectionType = GtkCssSectionType::Value;
pub const GTK_CSS_SECTION_KEYFRAMES: GtkCssSectionType = GtkCssSectionType::Keyframes;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkDeleteType {
    Chars = 0,
    WordEnds = 1,
    Words = 2,
    DisplayLines = 3,
    DisplayLineEnds = 4,
    ParagraphEnds = 5,
    Paragraphs = 6,
    Whitespace = 7,
}
pub const GTK_DELETE_CHARS: GtkDeleteType = GtkDeleteType::Chars;
pub const GTK_DELETE_WORD_ENDS: GtkDeleteType = GtkDeleteType::WordEnds;
pub const GTK_DELETE_WORDS: GtkDeleteType = GtkDeleteType::Words;
pub const GTK_DELETE_DISPLAY_LINES: GtkDeleteType = GtkDeleteType::DisplayLines;
pub const GTK_DELETE_DISPLAY_LINE_ENDS: GtkDeleteType = GtkDeleteType::DisplayLineEnds;
pub const GTK_DELETE_PARAGRAPH_ENDS: GtkDeleteType = GtkDeleteType::ParagraphEnds;
pub const GTK_DELETE_PARAGRAPHS: GtkDeleteType = GtkDeleteType::Paragraphs;
pub const GTK_DELETE_WHITESPACE: GtkDeleteType = GtkDeleteType::Whitespace;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkDirectionType {
    TabForward = 0,
    TabBackward = 1,
    Up = 2,
    Down = 3,
    Left = 4,
    Right = 5,
}
pub const GTK_DIR_TAB_FORWARD: GtkDirectionType = GtkDirectionType::TabForward;
pub const GTK_DIR_TAB_BACKWARD: GtkDirectionType = GtkDirectionType::TabBackward;
pub const GTK_DIR_UP: GtkDirectionType = GtkDirectionType::Up;
pub const GTK_DIR_DOWN: GtkDirectionType = GtkDirectionType::Down;
pub const GTK_DIR_LEFT: GtkDirectionType = GtkDirectionType::Left;
pub const GTK_DIR_RIGHT: GtkDirectionType = GtkDirectionType::Right;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkDragResult {
    Success = 0,
    NoTarget = 1,
    UserCancelled = 2,
    TimeoutExpired = 3,
    GrabBroken = 4,
    Error = 5,
}
pub const GTK_DRAG_RESULT_SUCCESS: GtkDragResult = GtkDragResult::Success;
pub const GTK_DRAG_RESULT_NO_TARGET: GtkDragResult = GtkDragResult::NoTarget;
pub const GTK_DRAG_RESULT_USER_CANCELLED: GtkDragResult = GtkDragResult::UserCancelled;
pub const GTK_DRAG_RESULT_TIMEOUT_EXPIRED: GtkDragResult = GtkDragResult::TimeoutExpired;
pub const GTK_DRAG_RESULT_GRAB_BROKEN: GtkDragResult = GtkDragResult::GrabBroken;
pub const GTK_DRAG_RESULT_ERROR: GtkDragResult = GtkDragResult::Error;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkEntryIconPosition {
    Primary = 0,
    Secondary = 1,
}
pub const GTK_ENTRY_ICON_PRIMARY: GtkEntryIconPosition = GtkEntryIconPosition::Primary;
pub const GTK_ENTRY_ICON_SECONDARY: GtkEntryIconPosition = GtkEntryIconPosition::Secondary;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkEventSequenceState {
    None = 0,
    Claimed = 1,
    Denied = 2,
}
pub const GTK_EVENT_SEQUENCE_NONE: GtkEventSequenceState = GtkEventSequenceState::None;
pub const GTK_EVENT_SEQUENCE_CLAIMED: GtkEventSequenceState = GtkEventSequenceState::Claimed;
pub const GTK_EVENT_SEQUENCE_DENIED: GtkEventSequenceState = GtkEventSequenceState::Denied;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkExpanderStyle {
    Collapsed = 0,
    SemiCollapsed = 1,
    SemiExpanded = 2,
    Expanded = 3,
}
pub const GTK_EXPANDER_COLLAPSED: GtkExpanderStyle = GtkExpanderStyle::Collapsed;
pub const GTK_EXPANDER_SEMI_COLLAPSED: GtkExpanderStyle = GtkExpanderStyle::SemiCollapsed;
pub const GTK_EXPANDER_SEMI_EXPANDED: GtkExpanderStyle = GtkExpanderStyle::SemiExpanded;
pub const GTK_EXPANDER_EXPANDED: GtkExpanderStyle = GtkExpanderStyle::Expanded;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkFileChooserAction {
    Open = 0,
    Save = 1,
    SelectFolder = 2,
    CreateFolder = 3,
}
pub const GTK_FILE_CHOOSER_ACTION_OPEN: GtkFileChooserAction = GtkFileChooserAction::Open;
pub const GTK_FILE_CHOOSER_ACTION_SAVE: GtkFileChooserAction = GtkFileChooserAction::Save;
pub const GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER: GtkFileChooserAction = GtkFileChooserAction::SelectFolder;
pub const GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER: GtkFileChooserAction = GtkFileChooserAction::CreateFolder;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkFileChooserConfirmation {
    Confirm = 0,
    AcceptFilename = 1,
    SelectAgain = 2,
}
pub const GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM: GtkFileChooserConfirmation = GtkFileChooserConfirmation::Confirm;
pub const GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME: GtkFileChooserConfirmation = GtkFileChooserConfirmation::AcceptFilename;
pub const GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN: GtkFileChooserConfirmation = GtkFileChooserConfirmation::SelectAgain;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkFileChooserError {
    Nonexistent = 0,
    BadFilename = 1,
    AlreadyExists = 2,
    IncompleteHostname = 3,
}
pub const GTK_FILE_CHOOSER_ERROR_NONEXISTENT: GtkFileChooserError = GtkFileChooserError::Nonexistent;
pub const GTK_FILE_CHOOSER_ERROR_BAD_FILENAME: GtkFileChooserError = GtkFileChooserError::BadFilename;
pub const GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS: GtkFileChooserError = GtkFileChooserError::AlreadyExists;
pub const GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME: GtkFileChooserError = GtkFileChooserError::IncompleteHostname;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkIMPreeditStyle {
    Nothing = 0,
    Callback = 1,
    None = 2,
}
pub const GTK_IM_PREEDIT_NOTHING: GtkIMPreeditStyle = GtkIMPreeditStyle::Nothing;
pub const GTK_IM_PREEDIT_CALLBACK: GtkIMPreeditStyle = GtkIMPreeditStyle::Callback;
pub const GTK_IM_PREEDIT_NONE: GtkIMPreeditStyle = GtkIMPreeditStyle::None;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkIMStatusStyle {
    Nothing = 0,
    Callback = 1,
    None = 2,
}
pub const GTK_IM_STATUS_NOTHING: GtkIMStatusStyle = GtkIMStatusStyle::Nothing;
pub const GTK_IM_STATUS_CALLBACK: GtkIMStatusStyle = GtkIMStatusStyle::Callback;
pub const GTK_IM_STATUS_NONE: GtkIMStatusStyle = GtkIMStatusStyle::None;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkIconSize {
    Invalid = 0,
    Menu = 1,
    SmallToolbar = 2,
    LargeToolbar = 3,
    Button = 4,
    Dnd = 5,
    Dialog = 6,
}
pub const GTK_ICON_SIZE_INVALID: GtkIconSize = GtkIconSize::Invalid;
pub const GTK_ICON_SIZE_MENU: GtkIconSize = GtkIconSize::Menu;
pub const GTK_ICON_SIZE_SMALL_TOOLBAR: GtkIconSize = GtkIconSize::SmallToolbar;
pub const GTK_ICON_SIZE_LARGE_TOOLBAR: GtkIconSize = GtkIconSize::LargeToolbar;
pub const GTK_ICON_SIZE_BUTTON: GtkIconSize = GtkIconSize::Button;
pub const GTK_ICON_SIZE_DND: GtkIconSize = GtkIconSize::Dnd;
pub const GTK_ICON_SIZE_DIALOG: GtkIconSize = GtkIconSize::Dialog;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkIconThemeError {
    NotFound = 0,
    Failed = 1,
}
pub const GTK_ICON_THEME_NOT_FOUND: GtkIconThemeError = GtkIconThemeError::NotFound;
pub const GTK_ICON_THEME_FAILED: GtkIconThemeError = GtkIconThemeError::Failed;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkIconViewDropPosition {
    NoDrop = 0,
    DropInto = 1,
    DropLeft = 2,
    DropRight = 3,
    DropAbove = 4,
    DropBelow = 5,
}
pub const GTK_ICON_VIEW_NO_DROP: GtkIconViewDropPosition = GtkIconViewDropPosition::NoDrop;
pub const GTK_ICON_VIEW_DROP_INTO: GtkIconViewDropPosition = GtkIconViewDropPosition::DropInto;
pub const GTK_ICON_VIEW_DROP_LEFT: GtkIconViewDropPosition = GtkIconViewDropPosition::DropLeft;
pub const GTK_ICON_VIEW_DROP_RIGHT: GtkIconViewDropPosition = GtkIconViewDropPosition::DropRight;
pub const GTK_ICON_VIEW_DROP_ABOVE: GtkIconViewDropPosition = GtkIconViewDropPosition::DropAbove;
pub const GTK_ICON_VIEW_DROP_BELOW: GtkIconViewDropPosition = GtkIconViewDropPosition::DropBelow;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkImageType {
    Empty = 0,
    Pixbuf = 1,
    Stock = 2,
    IconSet = 3,
    Animation = 4,
    IconName = 5,
    Gicon = 6,
    Surface = 7,
}
pub const GTK_IMAGE_EMPTY: GtkImageType = GtkImageType::Empty;
pub const GTK_IMAGE_PIXBUF: GtkImageType = GtkImageType::Pixbuf;
pub const GTK_IMAGE_STOCK: GtkImageType = GtkImageType::Stock;
pub const GTK_IMAGE_ICON_SET: GtkImageType = GtkImageType::IconSet;
pub const GTK_IMAGE_ANIMATION: GtkImageType = GtkImageType::Animation;
pub const GTK_IMAGE_ICON_NAME: GtkImageType = GtkImageType::IconName;
pub const GTK_IMAGE_GICON: GtkImageType = GtkImageType::Gicon;
pub const GTK_IMAGE_SURFACE: GtkImageType = GtkImageType::Surface;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkInputPurpose {
    FreeForm = 0,
    Alpha = 1,
    Digits = 2,
    Number = 3,
    Phone = 4,
    Url = 5,
    Email = 6,
    Name = 7,
    Password = 8,
    Pin = 9,
}
pub const GTK_INPUT_PURPOSE_FREE_FORM: GtkInputPurpose = GtkInputPurpose::FreeForm;
pub const GTK_INPUT_PURPOSE_ALPHA: GtkInputPurpose = GtkInputPurpose::Alpha;
pub const GTK_INPUT_PURPOSE_DIGITS: GtkInputPurpose = GtkInputPurpose::Digits;
pub const GTK_INPUT_PURPOSE_NUMBER: GtkInputPurpose = GtkInputPurpose::Number;
pub const GTK_INPUT_PURPOSE_PHONE: GtkInputPurpose = GtkInputPurpose::Phone;
pub const GTK_INPUT_PURPOSE_URL: GtkInputPurpose = GtkInputPurpose::Url;
pub const GTK_INPUT_PURPOSE_EMAIL: GtkInputPurpose = GtkInputPurpose::Email;
pub const GTK_INPUT_PURPOSE_NAME: GtkInputPurpose = GtkInputPurpose::Name;
pub const GTK_INPUT_PURPOSE_PASSWORD: GtkInputPurpose = GtkInputPurpose::Password;
pub const GTK_INPUT_PURPOSE_PIN: GtkInputPurpose = GtkInputPurpose::Pin;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkJustification {
    Left = 0,
    Right = 1,
    Center = 2,
    Fill = 3,
}
pub const GTK_JUSTIFY_LEFT: GtkJustification = GtkJustification::Left;
pub const GTK_JUSTIFY_RIGHT: GtkJustification = GtkJustification::Right;
pub const GTK_JUSTIFY_CENTER: GtkJustification = GtkJustification::Center;
pub const GTK_JUSTIFY_FILL: GtkJustification = GtkJustification::Fill;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkLevelBarMode {
    Continuous = 0,
    Discrete = 1,
}
pub const GTK_LEVEL_BAR_MODE_CONTINUOUS: GtkLevelBarMode = GtkLevelBarMode::Continuous;
pub const GTK_LEVEL_BAR_MODE_DISCRETE: GtkLevelBarMode = GtkLevelBarMode::Discrete;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkLicense {
    Unknown = 0,
    Custom = 1,
    Gpl20 = 2,
    Gpl30 = 3,
    Lgpl21 = 4,
    Lgpl30 = 5,
    Bsd = 6,
    MitX11 = 7,
    Artistic = 8,
    Gpl20Only = 9,
    Gpl30Only = 10,
    Lgpl21Only = 11,
    Lgpl30Only = 12,
}
pub const GTK_LICENSE_UNKNOWN: GtkLicense = GtkLicense::Unknown;
pub const GTK_LICENSE_CUSTOM: GtkLicense = GtkLicense::Custom;
pub const GTK_LICENSE_GPL_2_0: GtkLicense = GtkLicense::Gpl20;
pub const GTK_LICENSE_GPL_3_0: GtkLicense = GtkLicense::Gpl30;
pub const GTK_LICENSE_LGPL_2_1: GtkLicense = GtkLicense::Lgpl21;
pub const GTK_LICENSE_LGPL_3_0: GtkLicense = GtkLicense::Lgpl30;
pub const GTK_LICENSE_BSD: GtkLicense = GtkLicense::Bsd;
pub const GTK_LICENSE_MIT_X11: GtkLicense = GtkLicense::MitX11;
pub const GTK_LICENSE_ARTISTIC: GtkLicense = GtkLicense::Artistic;
pub const GTK_LICENSE_GPL_2_0_ONLY: GtkLicense = GtkLicense::Gpl20Only;
pub const GTK_LICENSE_GPL_3_0_ONLY: GtkLicense = GtkLicense::Gpl30Only;
pub const GTK_LICENSE_LGPL_2_1_ONLY: GtkLicense = GtkLicense::Lgpl21Only;
pub const GTK_LICENSE_LGPL_3_0_ONLY: GtkLicense = GtkLicense::Lgpl30Only;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkMenuDirectionType {
    Parent = 0,
    Child = 1,
    Next = 2,
    Prev = 3,
}
pub const GTK_MENU_DIR_PARENT: GtkMenuDirectionType = GtkMenuDirectionType::Parent;
pub const GTK_MENU_DIR_CHILD: GtkMenuDirectionType = GtkMenuDirectionType::Child;
pub const GTK_MENU_DIR_NEXT: GtkMenuDirectionType = GtkMenuDirectionType::Next;
pub const GTK_MENU_DIR_PREV: GtkMenuDirectionType = GtkMenuDirectionType::Prev;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkMessageType {
    Info = 0,
    Warning = 1,
    Question = 2,
    Error = 3,
    Other = 4,
}
pub const GTK_MESSAGE_INFO: GtkMessageType = GtkMessageType::Info;
pub const GTK_MESSAGE_WARNING: GtkMessageType = GtkMessageType::Warning;
pub const GTK_MESSAGE_QUESTION: GtkMessageType = GtkMessageType::Question;
pub const GTK_MESSAGE_ERROR: GtkMessageType = GtkMessageType::Error;
pub const GTK_MESSAGE_OTHER: GtkMessageType = GtkMessageType::Other;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkMovementStep {
    LogicalPositions = 0,
    VisualPositions = 1,
    Words = 2,
    DisplayLines = 3,
    DisplayLineEnds = 4,
    Paragraphs = 5,
    ParagraphEnds = 6,
    Pages = 7,
    BufferEnds = 8,
    HorizontalPages = 9,
}
pub const GTK_MOVEMENT_LOGICAL_POSITIONS: GtkMovementStep = GtkMovementStep::LogicalPositions;
pub const GTK_MOVEMENT_VISUAL_POSITIONS: GtkMovementStep = GtkMovementStep::VisualPositions;
pub const GTK_MOVEMENT_WORDS: GtkMovementStep = GtkMovementStep::Words;
pub const GTK_MOVEMENT_DISPLAY_LINES: GtkMovementStep = GtkMovementStep::DisplayLines;
pub const GTK_MOVEMENT_DISPLAY_LINE_ENDS: GtkMovementStep = GtkMovementStep::DisplayLineEnds;
pub const GTK_MOVEMENT_PARAGRAPHS: GtkMovementStep = GtkMovementStep::Paragraphs;
pub const GTK_MOVEMENT_PARAGRAPH_ENDS: GtkMovementStep = GtkMovementStep::ParagraphEnds;
pub const GTK_MOVEMENT_PAGES: GtkMovementStep = GtkMovementStep::Pages;
pub const GTK_MOVEMENT_BUFFER_ENDS: GtkMovementStep = GtkMovementStep::BufferEnds;
pub const GTK_MOVEMENT_HORIZONTAL_PAGES: GtkMovementStep = GtkMovementStep::HorizontalPages;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkNotebookTab {
    First = 0,
    Last = 1,
}
pub const GTK_NOTEBOOK_TAB_FIRST: GtkNotebookTab = GtkNotebookTab::First;
pub const GTK_NOTEBOOK_TAB_LAST: GtkNotebookTab = GtkNotebookTab::Last;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkNumberUpLayout {
    Lrtb = 0,
    Lrbt = 1,
    Rltb = 2,
    Rlbt = 3,
    Tblr = 4,
    Tbrl = 5,
    Btlr = 6,
    Btrl = 7,
}
pub const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM: GtkNumberUpLayout = GtkNumberUpLayout::Lrtb;
pub const GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP: GtkNumberUpLayout = GtkNumberUpLayout::Lrbt;
pub const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM: GtkNumberUpLayout = GtkNumberUpLayout::Rltb;
pub const GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP: GtkNumberUpLayout = GtkNumberUpLayout::Rlbt;
pub const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT: GtkNumberUpLayout = GtkNumberUpLayout::Tblr;
pub const GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT: GtkNumberUpLayout = GtkNumberUpLayout::Tbrl;
pub const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT: GtkNumberUpLayout = GtkNumberUpLayout::Btlr;
pub const GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT: GtkNumberUpLayout = GtkNumberUpLayout::Btrl;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkOrientation {
    Horizontal = 0,
    Vertical = 1,
}
pub const GTK_ORIENTATION_HORIZONTAL: GtkOrientation = GtkOrientation::Horizontal;
pub const GTK_ORIENTATION_VERTICAL: GtkOrientation = GtkOrientation::Vertical;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPackDirection {
    Ltr = 0,
    Rtl = 1,
    Ttb = 2,
    Btt = 3,
}
pub const GTK_PACK_DIRECTION_LTR: GtkPackDirection = GtkPackDirection::Ltr;
pub const GTK_PACK_DIRECTION_RTL: GtkPackDirection = GtkPackDirection::Rtl;
pub const GTK_PACK_DIRECTION_TTB: GtkPackDirection = GtkPackDirection::Ttb;
pub const GTK_PACK_DIRECTION_BTT: GtkPackDirection = GtkPackDirection::Btt;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPackType {
    Start = 0,
    End = 1,
}
pub const GTK_PACK_START: GtkPackType = GtkPackType::Start;
pub const GTK_PACK_END: GtkPackType = GtkPackType::End;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPageOrientation {
    Portrait = 0,
    Landscape = 1,
    ReversePortrait = 2,
    ReverseLandscape = 3,
}
pub const GTK_PAGE_ORIENTATION_PORTRAIT: GtkPageOrientation = GtkPageOrientation::Portrait;
pub const GTK_PAGE_ORIENTATION_LANDSCAPE: GtkPageOrientation = GtkPageOrientation::Landscape;
pub const GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT: GtkPageOrientation = GtkPageOrientation::ReversePortrait;
pub const GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE: GtkPageOrientation = GtkPageOrientation::ReverseLandscape;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPageSet {
    All = 0,
    Even = 1,
    Odd = 2,
}
pub const GTK_PAGE_SET_ALL: GtkPageSet = GtkPageSet::All;
pub const GTK_PAGE_SET_EVEN: GtkPageSet = GtkPageSet::Even;
pub const GTK_PAGE_SET_ODD: GtkPageSet = GtkPageSet::Odd;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPanDirection {
    Left = 0,
    Right = 1,
    Up = 2,
    Down = 3,
}
pub const GTK_PAN_DIRECTION_LEFT: GtkPanDirection = GtkPanDirection::Left;
pub const GTK_PAN_DIRECTION_RIGHT: GtkPanDirection = GtkPanDirection::Right;
pub const GTK_PAN_DIRECTION_UP: GtkPanDirection = GtkPanDirection::Up;
pub const GTK_PAN_DIRECTION_DOWN: GtkPanDirection = GtkPanDirection::Down;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPathPriorityType {
    Lowest = 0,
    Gtk = 4,
    Application = 8,
    Theme = 10,
    Rc = 12,
    Highest = 15,
}
pub const GTK_PATH_PRIO_LOWEST: GtkPathPriorityType = GtkPathPriorityType::Lowest;
pub const GTK_PATH_PRIO_GTK: GtkPathPriorityType = GtkPathPriorityType::Gtk;
pub const GTK_PATH_PRIO_APPLICATION: GtkPathPriorityType = GtkPathPriorityType::Application;
pub const GTK_PATH_PRIO_THEME: GtkPathPriorityType = GtkPathPriorityType::Theme;
pub const GTK_PATH_PRIO_RC: GtkPathPriorityType = GtkPathPriorityType::Rc;
pub const GTK_PATH_PRIO_HIGHEST: GtkPathPriorityType = GtkPathPriorityType::Highest;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPathType {
    Widget = 0,
    WidgetClass = 1,
    Class = 2,
}
pub const GTK_PATH_WIDGET: GtkPathType = GtkPathType::Widget;
pub const GTK_PATH_WIDGET_CLASS: GtkPathType = GtkPathType::WidgetClass;
pub const GTK_PATH_CLASS: GtkPathType = GtkPathType::Class;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPolicyType {
    Always = 0,
    Automatic = 1,
    Never = 2,
    External = 3,
}
pub const GTK_POLICY_ALWAYS: GtkPolicyType = GtkPolicyType::Always;
pub const GTK_POLICY_AUTOMATIC: GtkPolicyType = GtkPolicyType::Automatic;
pub const GTK_POLICY_NEVER: GtkPolicyType = GtkPolicyType::Never;
pub const GTK_POLICY_EXTERNAL: GtkPolicyType = GtkPolicyType::External;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPositionType {
    Left = 0,
    Right = 1,
    Top = 2,
    Bottom = 3,
}
pub const GTK_POS_LEFT: GtkPositionType = GtkPositionType::Left;
pub const GTK_POS_RIGHT: GtkPositionType = GtkPositionType::Right;
pub const GTK_POS_TOP: GtkPositionType = GtkPositionType::Top;
pub const GTK_POS_BOTTOM: GtkPositionType = GtkPositionType::Bottom;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintDuplex {
    Simplex = 0,
    Horizontal = 1,
    Vertical = 2,
}
pub const GTK_PRINT_DUPLEX_SIMPLEX: GtkPrintDuplex = GtkPrintDuplex::Simplex;
pub const GTK_PRINT_DUPLEX_HORIZONTAL: GtkPrintDuplex = GtkPrintDuplex::Horizontal;
pub const GTK_PRINT_DUPLEX_VERTICAL: GtkPrintDuplex = GtkPrintDuplex::Vertical;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintError {
    General = 0,
    InternalError = 1,
    Nomem = 2,
    InvalidFile = 3,
}
pub const GTK_PRINT_ERROR_GENERAL: GtkPrintError = GtkPrintError::General;
pub const GTK_PRINT_ERROR_INTERNAL_ERROR: GtkPrintError = GtkPrintError::InternalError;
pub const GTK_PRINT_ERROR_NOMEM: GtkPrintError = GtkPrintError::Nomem;
pub const GTK_PRINT_ERROR_INVALID_FILE: GtkPrintError = GtkPrintError::InvalidFile;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintOperationAction {
    PrintDialog = 0,
    Print = 1,
    Preview = 2,
    Export = 3,
}
pub const GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG: GtkPrintOperationAction = GtkPrintOperationAction::PrintDialog;
pub const GTK_PRINT_OPERATION_ACTION_PRINT: GtkPrintOperationAction = GtkPrintOperationAction::Print;
pub const GTK_PRINT_OPERATION_ACTION_PREVIEW: GtkPrintOperationAction = GtkPrintOperationAction::Preview;
pub const GTK_PRINT_OPERATION_ACTION_EXPORT: GtkPrintOperationAction = GtkPrintOperationAction::Export;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintOperationResult {
    Error = 0,
    Apply = 1,
    Cancel = 2,
    InProgress = 3,
}
pub const GTK_PRINT_OPERATION_RESULT_ERROR: GtkPrintOperationResult = GtkPrintOperationResult::Error;
pub const GTK_PRINT_OPERATION_RESULT_APPLY: GtkPrintOperationResult = GtkPrintOperationResult::Apply;
pub const GTK_PRINT_OPERATION_RESULT_CANCEL: GtkPrintOperationResult = GtkPrintOperationResult::Cancel;
pub const GTK_PRINT_OPERATION_RESULT_IN_PROGRESS: GtkPrintOperationResult = GtkPrintOperationResult::InProgress;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintPages {
    All = 0,
    Current = 1,
    Ranges = 2,
    Selection = 3,
}
pub const GTK_PRINT_PAGES_ALL: GtkPrintPages = GtkPrintPages::All;
pub const GTK_PRINT_PAGES_CURRENT: GtkPrintPages = GtkPrintPages::Current;
pub const GTK_PRINT_PAGES_RANGES: GtkPrintPages = GtkPrintPages::Ranges;
pub const GTK_PRINT_PAGES_SELECTION: GtkPrintPages = GtkPrintPages::Selection;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintQuality {
    Low = 0,
    Normal = 1,
    High = 2,
    Draft = 3,
}
pub const GTK_PRINT_QUALITY_LOW: GtkPrintQuality = GtkPrintQuality::Low;
pub const GTK_PRINT_QUALITY_NORMAL: GtkPrintQuality = GtkPrintQuality::Normal;
pub const GTK_PRINT_QUALITY_HIGH: GtkPrintQuality = GtkPrintQuality::High;
pub const GTK_PRINT_QUALITY_DRAFT: GtkPrintQuality = GtkPrintQuality::Draft;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPrintStatus {
    Initial = 0,
    Preparing = 1,
    GeneratingData = 2,
    SendingData = 3,
    Pending = 4,
    PendingIssue = 5,
    Printing = 6,
    Finished = 7,
    FinishedAborted = 8,
}
pub const GTK_PRINT_STATUS_INITIAL: GtkPrintStatus = GtkPrintStatus::Initial;
pub const GTK_PRINT_STATUS_PREPARING: GtkPrintStatus = GtkPrintStatus::Preparing;
pub const GTK_PRINT_STATUS_GENERATING_DATA: GtkPrintStatus = GtkPrintStatus::GeneratingData;
pub const GTK_PRINT_STATUS_SENDING_DATA: GtkPrintStatus = GtkPrintStatus::SendingData;
pub const GTK_PRINT_STATUS_PENDING: GtkPrintStatus = GtkPrintStatus::Pending;
pub const GTK_PRINT_STATUS_PENDING_ISSUE: GtkPrintStatus = GtkPrintStatus::PendingIssue;
pub const GTK_PRINT_STATUS_PRINTING: GtkPrintStatus = GtkPrintStatus::Printing;
pub const GTK_PRINT_STATUS_FINISHED: GtkPrintStatus = GtkPrintStatus::Finished;
pub const GTK_PRINT_STATUS_FINISHED_ABORTED: GtkPrintStatus = GtkPrintStatus::FinishedAborted;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkPropagationPhase {
    None = 0,
    Capture = 1,
    Bubble = 2,
    Target = 3,
}
pub const GTK_PHASE_NONE: GtkPropagationPhase = GtkPropagationPhase::None;
pub const GTK_PHASE_CAPTURE: GtkPropagationPhase = GtkPropagationPhase::Capture;
pub const GTK_PHASE_BUBBLE: GtkPropagationPhase = GtkPropagationPhase::Bubble;
pub const GTK_PHASE_TARGET: GtkPropagationPhase = GtkPropagationPhase::Target;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkRcTokenType {
    Invalid = 270,
    Include = 271,
    Normal = 272,
    Active = 273,
    Prelight = 274,
    Selected = 275,
    Insensitive = 276,
    Fg = 277,
    Bg = 278,
    Text = 279,
    Base = 280,
    Xthickness = 281,
    Ythickness = 282,
    Font = 283,
    Fontset = 284,
    FontName = 285,
    BgPixmap = 286,
    PixmapPath = 287,
    Style = 288,
    Binding = 289,
    Bind = 290,
    Widget = 291,
    WidgetClass = 292,
    Class = 293,
    Lowest = 294,
    Gtk = 295,
    Application = 296,
    Theme = 297,
    Rc = 298,
    Highest = 299,
    Engine = 300,
    ModulePath = 301,
    ImModulePath = 302,
    ImModuleFile = 303,
    Stock = 304,
    Ltr = 305,
    Rtl = 306,
    Color = 307,
    Unbind = 308,
    Last = 309,
}
pub const GTK_RC_TOKEN_INVALID: GtkRcTokenType = GtkRcTokenType::Invalid;
pub const GTK_RC_TOKEN_INCLUDE: GtkRcTokenType = GtkRcTokenType::Include;
pub const GTK_RC_TOKEN_NORMAL: GtkRcTokenType = GtkRcTokenType::Normal;
pub const GTK_RC_TOKEN_ACTIVE: GtkRcTokenType = GtkRcTokenType::Active;
pub const GTK_RC_TOKEN_PRELIGHT: GtkRcTokenType = GtkRcTokenType::Prelight;
pub const GTK_RC_TOKEN_SELECTED: GtkRcTokenType = GtkRcTokenType::Selected;
pub const GTK_RC_TOKEN_INSENSITIVE: GtkRcTokenType = GtkRcTokenType::Insensitive;
pub const GTK_RC_TOKEN_FG: GtkRcTokenType = GtkRcTokenType::Fg;
pub const GTK_RC_TOKEN_BG: GtkRcTokenType = GtkRcTokenType::Bg;
pub const GTK_RC_TOKEN_TEXT: GtkRcTokenType = GtkRcTokenType::Text;
pub const GTK_RC_TOKEN_BASE: GtkRcTokenType = GtkRcTokenType::Base;
pub const GTK_RC_TOKEN_XTHICKNESS: GtkRcTokenType = GtkRcTokenType::Xthickness;
pub const GTK_RC_TOKEN_YTHICKNESS: GtkRcTokenType = GtkRcTokenType::Ythickness;
pub const GTK_RC_TOKEN_FONT: GtkRcTokenType = GtkRcTokenType::Font;
pub const GTK_RC_TOKEN_FONTSET: GtkRcTokenType = GtkRcTokenType::Fontset;
pub const GTK_RC_TOKEN_FONT_NAME: GtkRcTokenType = GtkRcTokenType::FontName;
pub const GTK_RC_TOKEN_BG_PIXMAP: GtkRcTokenType = GtkRcTokenType::BgPixmap;
pub const GTK_RC_TOKEN_PIXMAP_PATH: GtkRcTokenType = GtkRcTokenType::PixmapPath;
pub const GTK_RC_TOKEN_STYLE: GtkRcTokenType = GtkRcTokenType::Style;
pub const GTK_RC_TOKEN_BINDING: GtkRcTokenType = GtkRcTokenType::Binding;
pub const GTK_RC_TOKEN_BIND: GtkRcTokenType = GtkRcTokenType::Bind;
pub const GTK_RC_TOKEN_WIDGET: GtkRcTokenType = GtkRcTokenType::Widget;
pub const GTK_RC_TOKEN_WIDGET_CLASS: GtkRcTokenType = GtkRcTokenType::WidgetClass;
pub const GTK_RC_TOKEN_CLASS: GtkRcTokenType = GtkRcTokenType::Class;
pub const GTK_RC_TOKEN_LOWEST: GtkRcTokenType = GtkRcTokenType::Lowest;
pub const GTK_RC_TOKEN_GTK: GtkRcTokenType = GtkRcTokenType::Gtk;
pub const GTK_RC_TOKEN_APPLICATION: GtkRcTokenType = GtkRcTokenType::Application;
pub const GTK_RC_TOKEN_THEME: GtkRcTokenType = GtkRcTokenType::Theme;
pub const GTK_RC_TOKEN_RC: GtkRcTokenType = GtkRcTokenType::Rc;
pub const GTK_RC_TOKEN_HIGHEST: GtkRcTokenType = GtkRcTokenType::Highest;
pub const GTK_RC_TOKEN_ENGINE: GtkRcTokenType = GtkRcTokenType::Engine;
pub const GTK_RC_TOKEN_MODULE_PATH: GtkRcTokenType = GtkRcTokenType::ModulePath;
pub const GTK_RC_TOKEN_IM_MODULE_PATH: GtkRcTokenType = GtkRcTokenType::ImModulePath;
pub const GTK_RC_TOKEN_IM_MODULE_FILE: GtkRcTokenType = GtkRcTokenType::ImModuleFile;
pub const GTK_RC_TOKEN_STOCK: GtkRcTokenType = GtkRcTokenType::Stock;
pub const GTK_RC_TOKEN_LTR: GtkRcTokenType = GtkRcTokenType::Ltr;
pub const GTK_RC_TOKEN_RTL: GtkRcTokenType = GtkRcTokenType::Rtl;
pub const GTK_RC_TOKEN_COLOR: GtkRcTokenType = GtkRcTokenType::Color;
pub const GTK_RC_TOKEN_UNBIND: GtkRcTokenType = GtkRcTokenType::Unbind;
pub const GTK_RC_TOKEN_LAST: GtkRcTokenType = GtkRcTokenType::Last;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkRecentChooserError {
    NotFound = 0,
    InvalidUri = 1,
}
pub const GTK_RECENT_CHOOSER_ERROR_NOT_FOUND: GtkRecentChooserError = GtkRecentChooserError::NotFound;
pub const GTK_RECENT_CHOOSER_ERROR_INVALID_URI: GtkRecentChooserError = GtkRecentChooserError::InvalidUri;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkRecentManagerError {
    NotFound = 0,
    InvalidUri = 1,
    InvalidEncoding = 2,
    NotRegistered = 3,
    Read = 4,
    Write = 5,
    Unknown = 6,
}
pub const GTK_RECENT_MANAGER_ERROR_NOT_FOUND: GtkRecentManagerError = GtkRecentManagerError::NotFound;
pub const GTK_RECENT_MANAGER_ERROR_INVALID_URI: GtkRecentManagerError = GtkRecentManagerError::InvalidUri;
pub const GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING: GtkRecentManagerError = GtkRecentManagerError::InvalidEncoding;
pub const GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED: GtkRecentManagerError = GtkRecentManagerError::NotRegistered;
pub const GTK_RECENT_MANAGER_ERROR_READ: GtkRecentManagerError = GtkRecentManagerError::Read;
pub const GTK_RECENT_MANAGER_ERROR_WRITE: GtkRecentManagerError = GtkRecentManagerError::Write;
pub const GTK_RECENT_MANAGER_ERROR_UNKNOWN: GtkRecentManagerError = GtkRecentManagerError::Unknown;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkRecentSortType {
    None = 0,
    Mru = 1,
    Lru = 2,
    Custom = 3,
}
pub const GTK_RECENT_SORT_NONE: GtkRecentSortType = GtkRecentSortType::None;
pub const GTK_RECENT_SORT_MRU: GtkRecentSortType = GtkRecentSortType::Mru;
pub const GTK_RECENT_SORT_LRU: GtkRecentSortType = GtkRecentSortType::Lru;
pub const GTK_RECENT_SORT_CUSTOM: GtkRecentSortType = GtkRecentSortType::Custom;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkReliefStyle {
    Normal = 0,
    Half = 1,
    None = 2,
}
pub const GTK_RELIEF_NORMAL: GtkReliefStyle = GtkReliefStyle::Normal;
pub const GTK_RELIEF_HALF: GtkReliefStyle = GtkReliefStyle::Half;
pub const GTK_RELIEF_NONE: GtkReliefStyle = GtkReliefStyle::None;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkResizeMode {
    Parent = 0,
    Queue = 1,
    Immediate = 2,
}
pub const GTK_RESIZE_PARENT: GtkResizeMode = GtkResizeMode::Parent;
pub const GTK_RESIZE_QUEUE: GtkResizeMode = GtkResizeMode::Queue;
pub const GTK_RESIZE_IMMEDIATE: GtkResizeMode = GtkResizeMode::Immediate;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkResponseType {
    None = -1,
    Reject = -2,
    Accept = -3,
    DeleteEvent = -4,
    Ok = -5,
    Cancel = -6,
    Close = -7,
    Yes = -8,
    No = -9,
    Apply = -10,
    Help = -11,
}
pub const GTK_RESPONSE_NONE: GtkResponseType = GtkResponseType::None;
pub const GTK_RESPONSE_REJECT: GtkResponseType = GtkResponseType::Reject;
pub const GTK_RESPONSE_ACCEPT: GtkResponseType = GtkResponseType::Accept;
pub const GTK_RESPONSE_DELETE_EVENT: GtkResponseType = GtkResponseType::DeleteEvent;
pub const GTK_RESPONSE_OK: GtkResponseType = GtkResponseType::Ok;
pub const GTK_RESPONSE_CANCEL: GtkResponseType = GtkResponseType::Cancel;
pub const GTK_RESPONSE_CLOSE: GtkResponseType = GtkResponseType::Close;
pub const GTK_RESPONSE_YES: GtkResponseType = GtkResponseType::Yes;
pub const GTK_RESPONSE_NO: GtkResponseType = GtkResponseType::No;
pub const GTK_RESPONSE_APPLY: GtkResponseType = GtkResponseType::Apply;
pub const GTK_RESPONSE_HELP: GtkResponseType = GtkResponseType::Help;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkRevealerTransitionType {
    None = 0,
    Crossfade = 1,
    SlideRight = 2,
    SlideLeft = 3,
    SlideUp = 4,
    SlideDown = 5,
}
pub const GTK_REVEALER_TRANSITION_TYPE_NONE: GtkRevealerTransitionType = GtkRevealerTransitionType::None;
pub const GTK_REVEALER_TRANSITION_TYPE_CROSSFADE: GtkRevealerTransitionType = GtkRevealerTransitionType::Crossfade;
pub const GTK_REVEALER_TRANSITION_TYPE_SLIDE_RIGHT: GtkRevealerTransitionType = GtkRevealerTransitionType::SlideRight;
pub const GTK_REVEALER_TRANSITION_TYPE_SLIDE_LEFT: GtkRevealerTransitionType = GtkRevealerTransitionType::SlideLeft;
pub const GTK_REVEALER_TRANSITION_TYPE_SLIDE_UP: GtkRevealerTransitionType = GtkRevealerTransitionType::SlideUp;
pub const GTK_REVEALER_TRANSITION_TYPE_SLIDE_DOWN: GtkRevealerTransitionType = GtkRevealerTransitionType::SlideDown;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkScrollStep {
    Steps = 0,
    Pages = 1,
    Ends = 2,
    HorizontalSteps = 3,
    HorizontalPages = 4,
    HorizontalEnds = 5,
}
pub const GTK_SCROLL_STEPS: GtkScrollStep = GtkScrollStep::Steps;
pub const GTK_SCROLL_PAGES: GtkScrollStep = GtkScrollStep::Pages;
pub const GTK_SCROLL_ENDS: GtkScrollStep = GtkScrollStep::Ends;
pub const GTK_SCROLL_HORIZONTAL_STEPS: GtkScrollStep = GtkScrollStep::HorizontalSteps;
pub const GTK_SCROLL_HORIZONTAL_PAGES: GtkScrollStep = GtkScrollStep::HorizontalPages;
pub const GTK_SCROLL_HORIZONTAL_ENDS: GtkScrollStep = GtkScrollStep::HorizontalEnds;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkScrollType {
    None = 0,
    Jump = 1,
    StepBackward = 2,
    StepForward = 3,
    PageBackward = 4,
    PageForward = 5,
    StepUp = 6,
    StepDown = 7,
    PageUp = 8,
    PageDown = 9,
    StepLeft = 10,
    StepRight = 11,
    PageLeft = 12,
    PageRight = 13,
    Start = 14,
    End = 15,
}
pub const GTK_SCROLL_NONE: GtkScrollType = GtkScrollType::None;
pub const GTK_SCROLL_JUMP: GtkScrollType = GtkScrollType::Jump;
pub const GTK_SCROLL_STEP_BACKWARD: GtkScrollType = GtkScrollType::StepBackward;
pub const GTK_SCROLL_STEP_FORWARD: GtkScrollType = GtkScrollType::StepForward;
pub const GTK_SCROLL_PAGE_BACKWARD: GtkScrollType = GtkScrollType::PageBackward;
pub const GTK_SCROLL_PAGE_FORWARD: GtkScrollType = GtkScrollType::PageForward;
pub const GTK_SCROLL_STEP_UP: GtkScrollType = GtkScrollType::StepUp;
pub const GTK_SCROLL_STEP_DOWN: GtkScrollType = GtkScrollType::StepDown;
pub const GTK_SCROLL_PAGE_UP: GtkScrollType = GtkScrollType::PageUp;
pub const GTK_SCROLL_PAGE_DOWN: GtkScrollType = GtkScrollType::PageDown;
pub const GTK_SCROLL_STEP_LEFT: GtkScrollType = GtkScrollType::StepLeft;
pub const GTK_SCROLL_STEP_RIGHT: GtkScrollType = GtkScrollType::StepRight;
pub const GTK_SCROLL_PAGE_LEFT: GtkScrollType = GtkScrollType::PageLeft;
pub const GTK_SCROLL_PAGE_RIGHT: GtkScrollType = GtkScrollType::PageRight;
pub const GTK_SCROLL_START: GtkScrollType = GtkScrollType::Start;
pub const GTK_SCROLL_END: GtkScrollType = GtkScrollType::End;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkScrollablePolicy {
    Minimum = 0,
    Natural = 1,
}
pub const GTK_SCROLL_MINIMUM: GtkScrollablePolicy = GtkScrollablePolicy::Minimum;
pub const GTK_SCROLL_NATURAL: GtkScrollablePolicy = GtkScrollablePolicy::Natural;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSelectionMode {
    None = 0,
    Single = 1,
    Browse = 2,
    Multiple = 3,
}
pub const GTK_SELECTION_NONE: GtkSelectionMode = GtkSelectionMode::None;
pub const GTK_SELECTION_SINGLE: GtkSelectionMode = GtkSelectionMode::Single;
pub const GTK_SELECTION_BROWSE: GtkSelectionMode = GtkSelectionMode::Browse;
pub const GTK_SELECTION_MULTIPLE: GtkSelectionMode = GtkSelectionMode::Multiple;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSensitivityType {
    Auto = 0,
    On = 1,
    Off = 2,
}
pub const GTK_SENSITIVITY_AUTO: GtkSensitivityType = GtkSensitivityType::Auto;
pub const GTK_SENSITIVITY_ON: GtkSensitivityType = GtkSensitivityType::On;
pub const GTK_SENSITIVITY_OFF: GtkSensitivityType = GtkSensitivityType::Off;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkShadowType {
    None = 0,
    In = 1,
    Out = 2,
    EtchedIn = 3,
    EtchedOut = 4,
}
pub const GTK_SHADOW_NONE: GtkShadowType = GtkShadowType::None;
pub const GTK_SHADOW_IN: GtkShadowType = GtkShadowType::In;
pub const GTK_SHADOW_OUT: GtkShadowType = GtkShadowType::Out;
pub const GTK_SHADOW_ETCHED_IN: GtkShadowType = GtkShadowType::EtchedIn;
pub const GTK_SHADOW_ETCHED_OUT: GtkShadowType = GtkShadowType::EtchedOut;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSizeGroupMode {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Both = 3,
}
pub const GTK_SIZE_GROUP_NONE: GtkSizeGroupMode = GtkSizeGroupMode::None;
pub const GTK_SIZE_GROUP_HORIZONTAL: GtkSizeGroupMode = GtkSizeGroupMode::Horizontal;
pub const GTK_SIZE_GROUP_VERTICAL: GtkSizeGroupMode = GtkSizeGroupMode::Vertical;
pub const GTK_SIZE_GROUP_BOTH: GtkSizeGroupMode = GtkSizeGroupMode::Both;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSizeRequestMode {
    HeightForWidth = 0,
    WidthForHeight = 1,
    ConstantSize = 2,
}
pub const GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH: GtkSizeRequestMode = GtkSizeRequestMode::HeightForWidth;
pub const GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT: GtkSizeRequestMode = GtkSizeRequestMode::WidthForHeight;
pub const GTK_SIZE_REQUEST_CONSTANT_SIZE: GtkSizeRequestMode = GtkSizeRequestMode::ConstantSize;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSortType {
    Ascending = 0,
    Descending = 1,
}
pub const GTK_SORT_ASCENDING: GtkSortType = GtkSortType::Ascending;
pub const GTK_SORT_DESCENDING: GtkSortType = GtkSortType::Descending;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSpinButtonUpdatePolicy {
    Always = 0,
    IfValid = 1,
}
pub const GTK_UPDATE_ALWAYS: GtkSpinButtonUpdatePolicy = GtkSpinButtonUpdatePolicy::Always;
pub const GTK_UPDATE_IF_VALID: GtkSpinButtonUpdatePolicy = GtkSpinButtonUpdatePolicy::IfValid;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkSpinType {
    StepForward = 0,
    StepBackward = 1,
    PageForward = 2,
    PageBackward = 3,
    Home = 4,
    End = 5,
    UserDefined = 6,
}
pub const GTK_SPIN_STEP_FORWARD: GtkSpinType = GtkSpinType::StepForward;
pub const GTK_SPIN_STEP_BACKWARD: GtkSpinType = GtkSpinType::StepBackward;
pub const GTK_SPIN_PAGE_FORWARD: GtkSpinType = GtkSpinType::PageForward;
pub const GTK_SPIN_PAGE_BACKWARD: GtkSpinType = GtkSpinType::PageBackward;
pub const GTK_SPIN_HOME: GtkSpinType = GtkSpinType::Home;
pub const GTK_SPIN_END: GtkSpinType = GtkSpinType::End;
pub const GTK_SPIN_USER_DEFINED: GtkSpinType = GtkSpinType::UserDefined;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkStackTransitionType {
    None = 0,
    Crossfade = 1,
    SlideRight = 2,
    SlideLeft = 3,
    SlideUp = 4,
    SlideDown = 5,
    SlideLeftRight = 6,
    SlideUpDown = 7,
    OverUp = 8,
    OverDown = 9,
    OverLeft = 10,
    OverRight = 11,
    UnderUp = 12,
    UnderDown = 13,
    UnderLeft = 14,
    UnderRight = 15,
    OverUpDown = 16,
    OverDownUp = 17,
    OverLeftRight = 18,
    OverRightLeft = 19,
}
pub const GTK_STACK_TRANSITION_TYPE_NONE: GtkStackTransitionType = GtkStackTransitionType::None;
pub const GTK_STACK_TRANSITION_TYPE_CROSSFADE: GtkStackTransitionType = GtkStackTransitionType::Crossfade;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_RIGHT: GtkStackTransitionType = GtkStackTransitionType::SlideRight;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT: GtkStackTransitionType = GtkStackTransitionType::SlideLeft;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_UP: GtkStackTransitionType = GtkStackTransitionType::SlideUp;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_DOWN: GtkStackTransitionType = GtkStackTransitionType::SlideDown;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_LEFT_RIGHT: GtkStackTransitionType = GtkStackTransitionType::SlideLeftRight;
pub const GTK_STACK_TRANSITION_TYPE_SLIDE_UP_DOWN: GtkStackTransitionType = GtkStackTransitionType::SlideUpDown;
pub const GTK_STACK_TRANSITION_TYPE_OVER_UP: GtkStackTransitionType = GtkStackTransitionType::OverUp;
pub const GTK_STACK_TRANSITION_TYPE_OVER_DOWN: GtkStackTransitionType = GtkStackTransitionType::OverDown;
pub const GTK_STACK_TRANSITION_TYPE_OVER_LEFT: GtkStackTransitionType = GtkStackTransitionType::OverLeft;
pub const GTK_STACK_TRANSITION_TYPE_OVER_RIGHT: GtkStackTransitionType = GtkStackTransitionType::OverRight;
pub const GTK_STACK_TRANSITION_TYPE_UNDER_UP: GtkStackTransitionType = GtkStackTransitionType::UnderUp;
pub const GTK_STACK_TRANSITION_TYPE_UNDER_DOWN: GtkStackTransitionType = GtkStackTransitionType::UnderDown;
pub const GTK_STACK_TRANSITION_TYPE_UNDER_LEFT: GtkStackTransitionType = GtkStackTransitionType::UnderLeft;
pub const GTK_STACK_TRANSITION_TYPE_UNDER_RIGHT: GtkStackTransitionType = GtkStackTransitionType::UnderRight;
pub const GTK_STACK_TRANSITION_TYPE_OVER_UP_DOWN: GtkStackTransitionType = GtkStackTransitionType::OverUpDown;
pub const GTK_STACK_TRANSITION_TYPE_OVER_DOWN_UP: GtkStackTransitionType = GtkStackTransitionType::OverDownUp;
pub const GTK_STACK_TRANSITION_TYPE_OVER_LEFT_RIGHT: GtkStackTransitionType = GtkStackTransitionType::OverLeftRight;
pub const GTK_STACK_TRANSITION_TYPE_OVER_RIGHT_LEFT: GtkStackTransitionType = GtkStackTransitionType::OverRightLeft;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkStateType {
    Normal = 0,
    Active = 1,
    Prelight = 2,
    Selected = 3,
    Insensitive = 4,
    Inconsistent = 5,
    Focused = 6,
}
pub const GTK_STATE_NORMAL: GtkStateType = GtkStateType::Normal;
pub const GTK_STATE_ACTIVE: GtkStateType = GtkStateType::Active;
pub const GTK_STATE_PRELIGHT: GtkStateType = GtkStateType::Prelight;
pub const GTK_STATE_SELECTED: GtkStateType = GtkStateType::Selected;
pub const GTK_STATE_INSENSITIVE: GtkStateType = GtkStateType::Insensitive;
pub const GTK_STATE_INCONSISTENT: GtkStateType = GtkStateType::Inconsistent;
pub const GTK_STATE_FOCUSED: GtkStateType = GtkStateType::Focused;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTextBufferTargetInfo {
    BufferContents = -1,
    RichText = -2,
    Text = -3,
}
pub const GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS: GtkTextBufferTargetInfo = GtkTextBufferTargetInfo::BufferContents;
pub const GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT: GtkTextBufferTargetInfo = GtkTextBufferTargetInfo::RichText;
pub const GTK_TEXT_BUFFER_TARGET_INFO_TEXT: GtkTextBufferTargetInfo = GtkTextBufferTargetInfo::Text;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTextDirection {
    None = 0,
    Ltr = 1,
    Rtl = 2,
}
pub const GTK_TEXT_DIR_NONE: GtkTextDirection = GtkTextDirection::None;
pub const GTK_TEXT_DIR_LTR: GtkTextDirection = GtkTextDirection::Ltr;
pub const GTK_TEXT_DIR_RTL: GtkTextDirection = GtkTextDirection::Rtl;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTextExtendSelection {
    Word = 0,
    Line = 1,
}
pub const GTK_TEXT_EXTEND_SELECTION_WORD: GtkTextExtendSelection = GtkTextExtendSelection::Word;
pub const GTK_TEXT_EXTEND_SELECTION_LINE: GtkTextExtendSelection = GtkTextExtendSelection::Line;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTextViewLayer {
    Below = 0,
    Above = 1,
}
pub const GTK_TEXT_VIEW_LAYER_BELOW: GtkTextViewLayer = GtkTextViewLayer::Below;
pub const GTK_TEXT_VIEW_LAYER_ABOVE: GtkTextViewLayer = GtkTextViewLayer::Above;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTextWindowType {
    Private = 0,
    Widget = 1,
    Text = 2,
    Left = 3,
    Right = 4,
    Top = 5,
    Bottom = 6,
}
pub const GTK_TEXT_WINDOW_PRIVATE: GtkTextWindowType = GtkTextWindowType::Private;
pub const GTK_TEXT_WINDOW_WIDGET: GtkTextWindowType = GtkTextWindowType::Widget;
pub const GTK_TEXT_WINDOW_TEXT: GtkTextWindowType = GtkTextWindowType::Text;
pub const GTK_TEXT_WINDOW_LEFT: GtkTextWindowType = GtkTextWindowType::Left;
pub const GTK_TEXT_WINDOW_RIGHT: GtkTextWindowType = GtkTextWindowType::Right;
pub const GTK_TEXT_WINDOW_TOP: GtkTextWindowType = GtkTextWindowType::Top;
pub const GTK_TEXT_WINDOW_BOTTOM: GtkTextWindowType = GtkTextWindowType::Bottom;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkToolbarSpaceStyle {
    Empty = 0,
    Line = 1,
}
pub const GTK_TOOLBAR_SPACE_EMPTY: GtkToolbarSpaceStyle = GtkToolbarSpaceStyle::Empty;
pub const GTK_TOOLBAR_SPACE_LINE: GtkToolbarSpaceStyle = GtkToolbarSpaceStyle::Line;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkToolbarStyle {
    Icons = 0,
    Text = 1,
    Both = 2,
    BothHoriz = 3,
}
pub const GTK_TOOLBAR_ICONS: GtkToolbarStyle = GtkToolbarStyle::Icons;
pub const GTK_TOOLBAR_TEXT: GtkToolbarStyle = GtkToolbarStyle::Text;
pub const GTK_TOOLBAR_BOTH: GtkToolbarStyle = GtkToolbarStyle::Both;
pub const GTK_TOOLBAR_BOTH_HORIZ: GtkToolbarStyle = GtkToolbarStyle::BothHoriz;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTreeViewColumnSizing {
    GrowOnly = 0,
    Autosize = 1,
    Fixed = 2,
}
pub const GTK_TREE_VIEW_COLUMN_GROW_ONLY: GtkTreeViewColumnSizing = GtkTreeViewColumnSizing::GrowOnly;
pub const GTK_TREE_VIEW_COLUMN_AUTOSIZE: GtkTreeViewColumnSizing = GtkTreeViewColumnSizing::Autosize;
pub const GTK_TREE_VIEW_COLUMN_FIXED: GtkTreeViewColumnSizing = GtkTreeViewColumnSizing::Fixed;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTreeViewDropPosition {
    Before = 0,
    After = 1,
    IntoOrBefore = 2,
    IntoOrAfter = 3,
}
pub const GTK_TREE_VIEW_DROP_BEFORE: GtkTreeViewDropPosition = GtkTreeViewDropPosition::Before;
pub const GTK_TREE_VIEW_DROP_AFTER: GtkTreeViewDropPosition = GtkTreeViewDropPosition::After;
pub const GTK_TREE_VIEW_DROP_INTO_OR_BEFORE: GtkTreeViewDropPosition = GtkTreeViewDropPosition::IntoOrBefore;
pub const GTK_TREE_VIEW_DROP_INTO_OR_AFTER: GtkTreeViewDropPosition = GtkTreeViewDropPosition::IntoOrAfter;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkTreeViewGridLines {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Both = 3,
}
pub const GTK_TREE_VIEW_GRID_LINES_NONE: GtkTreeViewGridLines = GtkTreeViewGridLines::None;
pub const GTK_TREE_VIEW_GRID_LINES_HORIZONTAL: GtkTreeViewGridLines = GtkTreeViewGridLines::Horizontal;
pub const GTK_TREE_VIEW_GRID_LINES_VERTICAL: GtkTreeViewGridLines = GtkTreeViewGridLines::Vertical;
pub const GTK_TREE_VIEW_GRID_LINES_BOTH: GtkTreeViewGridLines = GtkTreeViewGridLines::Both;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkUnit {
    None = 0,
    Points = 1,
    Inch = 2,
    Mm = 3,
}
pub const GTK_UNIT_NONE: GtkUnit = GtkUnit::None;
pub const GTK_UNIT_POINTS: GtkUnit = GtkUnit::Points;
pub const GTK_UNIT_INCH: GtkUnit = GtkUnit::Inch;
pub const GTK_UNIT_MM: GtkUnit = GtkUnit::Mm;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkWidgetHelpType {
    Tooltip = 0,
    WhatsThis = 1,
}
pub const GTK_WIDGET_HELP_TOOLTIP: GtkWidgetHelpType = GtkWidgetHelpType::Tooltip;
pub const GTK_WIDGET_HELP_WHATS_THIS: GtkWidgetHelpType = GtkWidgetHelpType::WhatsThis;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkWindowPosition {
    None = 0,
    Center = 1,
    Mouse = 2,
    CenterAlways = 3,
    CenterOnParent = 4,
}
pub const GTK_WIN_POS_NONE: GtkWindowPosition = GtkWindowPosition::None;
pub const GTK_WIN_POS_CENTER: GtkWindowPosition = GtkWindowPosition::Center;
pub const GTK_WIN_POS_MOUSE: GtkWindowPosition = GtkWindowPosition::Mouse;
pub const GTK_WIN_POS_CENTER_ALWAYS: GtkWindowPosition = GtkWindowPosition::CenterAlways;
pub const GTK_WIN_POS_CENTER_ON_PARENT: GtkWindowPosition = GtkWindowPosition::CenterOnParent;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkWindowType {
    Toplevel = 0,
    Popup = 1,
}
pub const GTK_WINDOW_TOPLEVEL: GtkWindowType = GtkWindowType::Toplevel;
pub const GTK_WINDOW_POPUP: GtkWindowType = GtkWindowType::Popup;

#[derive(Clone, Copy, Debug, Eq, PartialEq)]
#[repr(C)]
pub enum GtkWrapMode {
    None = 0,
    Char = 1,
    Word = 2,
    WordChar = 3,
}
pub const GTK_WRAP_NONE: GtkWrapMode = GtkWrapMode::None;
pub const GTK_WRAP_CHAR: GtkWrapMode = GtkWrapMode::Char;
pub const GTK_WRAP_WORD: GtkWrapMode = GtkWrapMode::Word;
pub const GTK_WRAP_WORD_CHAR: GtkWrapMode = GtkWrapMode::WordChar;


pub const GTK_BINARY_AGE: i32 = 1603;
pub const GTK_INPUT_ERROR: i32 = -1;
pub const GTK_INTERFACE_AGE: i32 = 3;
pub const GTK_LEVEL_BAR_OFFSET_HIGH: &'static str = r##"high"##;
pub const GTK_LEVEL_BAR_OFFSET_LOW: &'static str = r##"low"##;
pub const GTK_MAJOR_VERSION: i32 = 3;
pub const GTK_MAX_COMPOSE_LEN: i32 = 7;
pub const GTK_MICRO_VERSION: i32 = 3;
pub const GTK_MINOR_VERSION: i32 = 16;
pub const GTK_PAPER_NAME_A3: &'static str = r##"iso_a3"##;
pub const GTK_PAPER_NAME_A4: &'static str = r##"iso_a4"##;
pub const GTK_PAPER_NAME_A5: &'static str = r##"iso_a5"##;
pub const GTK_PAPER_NAME_B5: &'static str = r##"iso_b5"##;
pub const GTK_PAPER_NAME_EXECUTIVE: &'static str = r##"na_executive"##;
pub const GTK_PAPER_NAME_LEGAL: &'static str = r##"na_legal"##;
pub const GTK_PAPER_NAME_LETTER: &'static str = r##"na_letter"##;
pub const GTK_PATH_PRIO_MASK: i32 = 15;
pub const GTK_PRINT_SETTINGS_COLLATE: &'static str = r##"collate"##;
pub const GTK_PRINT_SETTINGS_DEFAULT_SOURCE: &'static str = r##"default-source"##;
pub const GTK_PRINT_SETTINGS_DITHER: &'static str = r##"dither"##;
pub const GTK_PRINT_SETTINGS_DUPLEX: &'static str = r##"duplex"##;
pub const GTK_PRINT_SETTINGS_FINISHINGS: &'static str = r##"finishings"##;
pub const GTK_PRINT_SETTINGS_MEDIA_TYPE: &'static str = r##"media-type"##;
pub const GTK_PRINT_SETTINGS_NUMBER_UP: &'static str = r##"number-up"##;
pub const GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT: &'static str = r##"number-up-layout"##;
pub const GTK_PRINT_SETTINGS_N_COPIES: &'static str = r##"n-copies"##;
pub const GTK_PRINT_SETTINGS_ORIENTATION: &'static str = r##"orientation"##;
pub const GTK_PRINT_SETTINGS_OUTPUT_BASENAME: &'static str = r##"output-basename"##;
pub const GTK_PRINT_SETTINGS_OUTPUT_BIN: &'static str = r##"output-bin"##;
pub const GTK_PRINT_SETTINGS_OUTPUT_DIR: &'static str = r##"output-dir"##;
pub const GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT: &'static str = r##"output-file-format"##;
pub const GTK_PRINT_SETTINGS_OUTPUT_URI: &'static str = r##"output-uri"##;
pub const GTK_PRINT_SETTINGS_PAGE_RANGES: &'static str = r##"page-ranges"##;
pub const GTK_PRINT_SETTINGS_PAGE_SET: &'static str = r##"page-set"##;
pub const GTK_PRINT_SETTINGS_PAPER_FORMAT: &'static str = r##"paper-format"##;
pub const GTK_PRINT_SETTINGS_PAPER_HEIGHT: &'static str = r##"paper-height"##;
pub const GTK_PRINT_SETTINGS_PAPER_WIDTH: &'static str = r##"paper-width"##;
pub const GTK_PRINT_SETTINGS_PRINTER: &'static str = r##"printer"##;
pub const GTK_PRINT_SETTINGS_PRINTER_LPI: &'static str = r##"printer-lpi"##;
pub const GTK_PRINT_SETTINGS_PRINT_PAGES: &'static str = r##"print-pages"##;
pub const GTK_PRINT_SETTINGS_QUALITY: &'static str = r##"quality"##;
pub const GTK_PRINT_SETTINGS_RESOLUTION: &'static str = r##"resolution"##;
pub const GTK_PRINT_SETTINGS_RESOLUTION_X: &'static str = r##"resolution-x"##;
pub const GTK_PRINT_SETTINGS_RESOLUTION_Y: &'static str = r##"resolution-y"##;
pub const GTK_PRINT_SETTINGS_REVERSE: &'static str = r##"reverse"##;
pub const GTK_PRINT_SETTINGS_SCALE: &'static str = r##"scale"##;
pub const GTK_PRINT_SETTINGS_USE_COLOR: &'static str = r##"use-color"##;
pub const GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA: &'static str = r##"win32-driver-extra"##;
pub const GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION: &'static str = r##"win32-driver-version"##;
pub const GTK_PRIORITY_RESIZE: i32 = 10;
pub const GTK_STOCK_ABOUT: &'static str = r##"gtk-about"##;
pub const GTK_STOCK_ADD: &'static str = r##"gtk-add"##;
pub const GTK_STOCK_APPLY: &'static str = r##"gtk-apply"##;
pub const GTK_STOCK_BOLD: &'static str = r##"gtk-bold"##;
pub const GTK_STOCK_CANCEL: &'static str = r##"gtk-cancel"##;
pub const GTK_STOCK_CAPS_LOCK_WARNING: &'static str = r##"gtk-caps-lock-warning"##;
pub const GTK_STOCK_CDROM: &'static str = r##"gtk-cdrom"##;
pub const GTK_STOCK_CLEAR: &'static str = r##"gtk-clear"##;
pub const GTK_STOCK_CLOSE: &'static str = r##"gtk-close"##;
pub const GTK_STOCK_COLOR_PICKER: &'static str = r##"gtk-color-picker"##;
pub const GTK_STOCK_CONNECT: &'static str = r##"gtk-connect"##;
pub const GTK_STOCK_CONVERT: &'static str = r##"gtk-convert"##;
pub const GTK_STOCK_COPY: &'static str = r##"gtk-copy"##;
pub const GTK_STOCK_CUT: &'static str = r##"gtk-cut"##;
pub const GTK_STOCK_DELETE: &'static str = r##"gtk-delete"##;
pub const GTK_STOCK_DIALOG_AUTHENTICATION: &'static str = r##"gtk-dialog-authentication"##;
pub const GTK_STOCK_DIALOG_ERROR: &'static str = r##"gtk-dialog-error"##;
pub const GTK_STOCK_DIALOG_INFO: &'static str = r##"gtk-dialog-info"##;
pub const GTK_STOCK_DIALOG_QUESTION: &'static str = r##"gtk-dialog-question"##;
pub const GTK_STOCK_DIALOG_WARNING: &'static str = r##"gtk-dialog-warning"##;
pub const GTK_STOCK_DIRECTORY: &'static str = r##"gtk-directory"##;
pub const GTK_STOCK_DISCARD: &'static str = r##"gtk-discard"##;
pub const GTK_STOCK_DISCONNECT: &'static str = r##"gtk-disconnect"##;
pub const GTK_STOCK_DND: &'static str = r##"gtk-dnd"##;
pub const GTK_STOCK_DND_MULTIPLE: &'static str = r##"gtk-dnd-multiple"##;
pub const GTK_STOCK_EDIT: &'static str = r##"gtk-edit"##;
pub const GTK_STOCK_EXECUTE: &'static str = r##"gtk-execute"##;
pub const GTK_STOCK_FILE: &'static str = r##"gtk-file"##;
pub const GTK_STOCK_FIND: &'static str = r##"gtk-find"##;
pub const GTK_STOCK_FIND_AND_REPLACE: &'static str = r##"gtk-find-and-replace"##;
pub const GTK_STOCK_FLOPPY: &'static str = r##"gtk-floppy"##;
pub const GTK_STOCK_FULLSCREEN: &'static str = r##"gtk-fullscreen"##;
pub const GTK_STOCK_GOTO_BOTTOM: &'static str = r##"gtk-goto-bottom"##;
pub const GTK_STOCK_GOTO_FIRST: &'static str = r##"gtk-goto-first"##;
pub const GTK_STOCK_GOTO_LAST: &'static str = r##"gtk-goto-last"##;
pub const GTK_STOCK_GOTO_TOP: &'static str = r##"gtk-goto-top"##;
pub const GTK_STOCK_GO_BACK: &'static str = r##"gtk-go-back"##;
pub const GTK_STOCK_GO_DOWN: &'static str = r##"gtk-go-down"##;
pub const GTK_STOCK_GO_FORWARD: &'static str = r##"gtk-go-forward"##;
pub const GTK_STOCK_GO_UP: &'static str = r##"gtk-go-up"##;
pub const GTK_STOCK_HARDDISK: &'static str = r##"gtk-harddisk"##;
pub const GTK_STOCK_HELP: &'static str = r##"gtk-help"##;
pub const GTK_STOCK_HOME: &'static str = r##"gtk-home"##;
pub const GTK_STOCK_INDENT: &'static str = r##"gtk-indent"##;
pub const GTK_STOCK_INDEX: &'static str = r##"gtk-index"##;
pub const GTK_STOCK_INFO: &'static str = r##"gtk-info"##;
pub const GTK_STOCK_ITALIC: &'static str = r##"gtk-italic"##;
pub const GTK_STOCK_JUMP_TO: &'static str = r##"gtk-jump-to"##;
pub const GTK_STOCK_JUSTIFY_CENTER: &'static str = r##"gtk-justify-center"##;
pub const GTK_STOCK_JUSTIFY_FILL: &'static str = r##"gtk-justify-fill"##;
pub const GTK_STOCK_JUSTIFY_LEFT: &'static str = r##"gtk-justify-left"##;
pub const GTK_STOCK_JUSTIFY_RIGHT: &'static str = r##"gtk-justify-right"##;
pub const GTK_STOCK_LEAVE_FULLSCREEN: &'static str = r##"gtk-leave-fullscreen"##;
pub const GTK_STOCK_MEDIA_FORWARD: &'static str = r##"gtk-media-forward"##;
pub const GTK_STOCK_MEDIA_NEXT: &'static str = r##"gtk-media-next"##;
pub const GTK_STOCK_MEDIA_PAUSE: &'static str = r##"gtk-media-pause"##;
pub const GTK_STOCK_MEDIA_PLAY: &'static str = r##"gtk-media-play"##;
pub const GTK_STOCK_MEDIA_PREVIOUS: &'static str = r##"gtk-media-previous"##;
pub const GTK_STOCK_MEDIA_RECORD: &'static str = r##"gtk-media-record"##;
pub const GTK_STOCK_MEDIA_REWIND: &'static str = r##"gtk-media-rewind"##;
pub const GTK_STOCK_MEDIA_STOP: &'static str = r##"gtk-media-stop"##;
pub const GTK_STOCK_MISSING_IMAGE: &'static str = r##"gtk-missing-image"##;
pub const GTK_STOCK_NETWORK: &'static str = r##"gtk-network"##;
pub const GTK_STOCK_NEW: &'static str = r##"gtk-new"##;
pub const GTK_STOCK_NO: &'static str = r##"gtk-no"##;
pub const GTK_STOCK_OK: &'static str = r##"gtk-ok"##;
pub const GTK_STOCK_OPEN: &'static str = r##"gtk-open"##;
pub const GTK_STOCK_ORIENTATION_LANDSCAPE: &'static str = r##"gtk-orientation-landscape"##;
pub const GTK_STOCK_ORIENTATION_PORTRAIT: &'static str = r##"gtk-orientation-portrait"##;
pub const GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE: &'static str = r##"gtk-orientation-reverse-landscape"##;
pub const GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT: &'static str = r##"gtk-orientation-reverse-portrait"##;
pub const GTK_STOCK_PAGE_SETUP: &'static str = r##"gtk-page-setup"##;
pub const GTK_STOCK_PASTE: &'static str = r##"gtk-paste"##;
pub const GTK_STOCK_PREFERENCES: &'static str = r##"gtk-preferences"##;
pub const GTK_STOCK_PRINT: &'static str = r##"gtk-print"##;
pub const GTK_STOCK_PRINT_ERROR: &'static str = r##"gtk-print-error"##;
pub const GTK_STOCK_PRINT_PAUSED: &'static str = r##"gtk-print-paused"##;
pub const GTK_STOCK_PRINT_PREVIEW: &'static str = r##"gtk-print-preview"##;
pub const GTK_STOCK_PRINT_REPORT: &'static str = r##"gtk-print-report"##;
pub const GTK_STOCK_PRINT_WARNING: &'static str = r##"gtk-print-warning"##;
pub const GTK_STOCK_PROPERTIES: &'static str = r##"gtk-properties"##;
pub const GTK_STOCK_QUIT: &'static str = r##"gtk-quit"##;
pub const GTK_STOCK_REDO: &'static str = r##"gtk-redo"##;
pub const GTK_STOCK_REFRESH: &'static str = r##"gtk-refresh"##;
pub const GTK_STOCK_REMOVE: &'static str = r##"gtk-remove"##;
pub const GTK_STOCK_REVERT_TO_SAVED: &'static str = r##"gtk-revert-to-saved"##;
pub const GTK_STOCK_SAVE: &'static str = r##"gtk-save"##;
pub const GTK_STOCK_SAVE_AS: &'static str = r##"gtk-save-as"##;
pub const GTK_STOCK_SELECT_ALL: &'static str = r##"gtk-select-all"##;
pub const GTK_STOCK_SELECT_COLOR: &'static str = r##"gtk-select-color"##;
pub const GTK_STOCK_SELECT_FONT: &'static str = r##"gtk-select-font"##;
pub const GTK_STOCK_SORT_ASCENDING: &'static str = r##"gtk-sort-ascending"##;
pub const GTK_STOCK_SORT_DESCENDING: &'static str = r##"gtk-sort-descending"##;
pub const GTK_STOCK_SPELL_CHECK: &'static str = r##"gtk-spell-check"##;
pub const GTK_STOCK_STOP: &'static str = r##"gtk-stop"##;
pub const GTK_STOCK_STRIKETHROUGH: &'static str = r##"gtk-strikethrough"##;
pub const GTK_STOCK_UNDELETE: &'static str = r##"gtk-undelete"##;
pub const GTK_STOCK_UNDERLINE: &'static str = r##"gtk-underline"##;
pub const GTK_STOCK_UNDO: &'static str = r##"gtk-undo"##;
pub const GTK_STOCK_UNINDENT: &'static str = r##"gtk-unindent"##;
pub const GTK_STOCK_YES: &'static str = r##"gtk-yes"##;
pub const GTK_STOCK_ZOOM_100: &'static str = r##"gtk-zoom-100"##;
pub const GTK_STOCK_ZOOM_FIT: &'static str = r##"gtk-zoom-fit"##;
pub const GTK_STOCK_ZOOM_IN: &'static str = r##"gtk-zoom-in"##;
pub const GTK_STOCK_ZOOM_OUT: &'static str = r##"gtk-zoom-out"##;
pub const GTK_STYLE_CLASS_ACCELERATOR: &'static str = r##"accelerator"##;
pub const GTK_STYLE_CLASS_ARROW: &'static str = r##"arrow"##;
pub const GTK_STYLE_CLASS_BACKGROUND: &'static str = r##"background"##;
pub const GTK_STYLE_CLASS_BOTTOM: &'static str = r##"bottom"##;
pub const GTK_STYLE_CLASS_BUTTON: &'static str = r##"button"##;
pub const GTK_STYLE_CLASS_CALENDAR: &'static str = r##"calendar"##;
pub const GTK_STYLE_CLASS_CELL: &'static str = r##"cell"##;
pub const GTK_STYLE_CLASS_CHECK: &'static str = r##"check"##;
pub const GTK_STYLE_CLASS_COMBOBOX_ENTRY: &'static str = r##"combobox-entry"##;
pub const GTK_STYLE_CLASS_CONTEXT_MENU: &'static str = r##"context-menu"##;
pub const GTK_STYLE_CLASS_CSD: &'static str = r##"csd"##;
pub const GTK_STYLE_CLASS_CURSOR_HANDLE: &'static str = r##"cursor-handle"##;
pub const GTK_STYLE_CLASS_DEFAULT: &'static str = r##"default"##;
pub const GTK_STYLE_CLASS_DESTRUCTIVE_ACTION: &'static str = r##"destructive-action"##;
pub const GTK_STYLE_CLASS_DIM_LABEL: &'static str = r##"dim-label"##;
pub const GTK_STYLE_CLASS_DND: &'static str = r##"dnd"##;
pub const GTK_STYLE_CLASS_DOCK: &'static str = r##"dock"##;
pub const GTK_STYLE_CLASS_ENTRY: &'static str = r##"entry"##;
pub const GTK_STYLE_CLASS_ERROR: &'static str = r##"error"##;
pub const GTK_STYLE_CLASS_EXPANDER: &'static str = r##"expander"##;
pub const GTK_STYLE_CLASS_FLAT: &'static str = r##"flat"##;
pub const GTK_STYLE_CLASS_FRAME: &'static str = r##"frame"##;
pub const GTK_STYLE_CLASS_GRIP: &'static str = r##"grip"##;
pub const GTK_STYLE_CLASS_HEADER: &'static str = r##"header"##;
pub const GTK_STYLE_CLASS_HIGHLIGHT: &'static str = r##"highlight"##;
pub const GTK_STYLE_CLASS_HORIZONTAL: &'static str = r##"horizontal"##;
pub const GTK_STYLE_CLASS_IMAGE: &'static str = r##"image"##;
pub const GTK_STYLE_CLASS_INFO: &'static str = r##"info"##;
pub const GTK_STYLE_CLASS_INLINE_TOOLBAR: &'static str = r##"inline-toolbar"##;
pub const GTK_STYLE_CLASS_INSERTION_CURSOR: &'static str = r##"insertion-cursor"##;
pub const GTK_STYLE_CLASS_LABEL: &'static str = r##"label"##;
pub const GTK_STYLE_CLASS_LEFT: &'static str = r##"left"##;
pub const GTK_STYLE_CLASS_LEVEL_BAR: &'static str = r##"level-bar"##;
pub const GTK_STYLE_CLASS_LINKED: &'static str = r##"linked"##;
pub const GTK_STYLE_CLASS_LIST: &'static str = r##"list"##;
pub const GTK_STYLE_CLASS_LIST_ROW: &'static str = r##"list-row"##;
pub const GTK_STYLE_CLASS_MARK: &'static str = r##"mark"##;
pub const GTK_STYLE_CLASS_MENU: &'static str = r##"menu"##;
pub const GTK_STYLE_CLASS_MENUBAR: &'static str = r##"menubar"##;
pub const GTK_STYLE_CLASS_MENUITEM: &'static str = r##"menuitem"##;
pub const GTK_STYLE_CLASS_MESSAGE_DIALOG: &'static str = r##"message-dialog"##;
pub const GTK_STYLE_CLASS_MONOSPACE: &'static str = r##"monospace"##;
pub const GTK_STYLE_CLASS_NEEDS_ATTENTION: &'static str = r##"needs-attention"##;
pub const GTK_STYLE_CLASS_NOTEBOOK: &'static str = r##"notebook"##;
pub const GTK_STYLE_CLASS_OSD: &'static str = r##"osd"##;
pub const GTK_STYLE_CLASS_OVERSHOOT: &'static str = r##"overshoot"##;
pub const GTK_STYLE_CLASS_PANE_SEPARATOR: &'static str = r##"pane-separator"##;
pub const GTK_STYLE_CLASS_PAPER: &'static str = r##"paper"##;
pub const GTK_STYLE_CLASS_POPOVER: &'static str = r##"popover"##;
pub const GTK_STYLE_CLASS_POPUP: &'static str = r##"popup"##;
pub const GTK_STYLE_CLASS_PRIMARY_TOOLBAR: &'static str = r##"primary-toolbar"##;
pub const GTK_STYLE_CLASS_PROGRESSBAR: &'static str = r##"progressbar"##;
pub const GTK_STYLE_CLASS_PULSE: &'static str = r##"pulse"##;
pub const GTK_STYLE_CLASS_QUESTION: &'static str = r##"question"##;
pub const GTK_STYLE_CLASS_RADIO: &'static str = r##"radio"##;
pub const GTK_STYLE_CLASS_RAISED: &'static str = r##"raised"##;
pub const GTK_STYLE_CLASS_READ_ONLY: &'static str = r##"read-only"##;
pub const GTK_STYLE_CLASS_RIGHT: &'static str = r##"right"##;
pub const GTK_STYLE_CLASS_RUBBERBAND: &'static str = r##"rubberband"##;
pub const GTK_STYLE_CLASS_SCALE: &'static str = r##"scale"##;
pub const GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE: &'static str = r##"scale-has-marks-above"##;
pub const GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW: &'static str = r##"scale-has-marks-below"##;
pub const GTK_STYLE_CLASS_SCROLLBAR: &'static str = r##"scrollbar"##;
pub const GTK_STYLE_CLASS_SCROLLBARS_JUNCTION: &'static str = r##"scrollbars-junction"##;
pub const GTK_STYLE_CLASS_SEPARATOR: &'static str = r##"separator"##;
pub const GTK_STYLE_CLASS_SIDEBAR: &'static str = r##"sidebar"##;
pub const GTK_STYLE_CLASS_SLIDER: &'static str = r##"slider"##;
pub const GTK_STYLE_CLASS_SPINBUTTON: &'static str = r##"spinbutton"##;
pub const GTK_STYLE_CLASS_SPINNER: &'static str = r##"spinner"##;
pub const GTK_STYLE_CLASS_STATUSBAR: &'static str = r##"statusbar"##;
pub const GTK_STYLE_CLASS_SUBTITLE: &'static str = r##"subtitle"##;
pub const GTK_STYLE_CLASS_SUGGESTED_ACTION: &'static str = r##"suggested-action"##;
pub const GTK_STYLE_CLASS_TITLE: &'static str = r##"title"##;
pub const GTK_STYLE_CLASS_TITLEBAR: &'static str = r##"titlebar"##;
pub const GTK_STYLE_CLASS_TOOLBAR: &'static str = r##"toolbar"##;
pub const GTK_STYLE_CLASS_TOOLTIP: &'static str = r##"tooltip"##;
pub const GTK_STYLE_CLASS_TOP: &'static str = r##"top"##;
pub const GTK_STYLE_CLASS_TOUCH_SELECTION: &'static str = r##"touch-selection"##;
pub const GTK_STYLE_CLASS_TROUGH: &'static str = r##"trough"##;
pub const GTK_STYLE_CLASS_UNDERSHOOT: &'static str = r##"undershoot"##;
pub const GTK_STYLE_CLASS_VERTICAL: &'static str = r##"vertical"##;
pub const GTK_STYLE_CLASS_VIEW: &'static str = r##"view"##;
pub const GTK_STYLE_CLASS_WARNING: &'static str = r##"warning"##;
pub const GTK_STYLE_CLASS_WIDE: &'static str = r##"wide"##;
pub const GTK_STYLE_PROPERTY_BACKGROUND_COLOR: &'static str = r##"background-color"##;
pub const GTK_STYLE_PROPERTY_BACKGROUND_IMAGE: &'static str = r##"background-image"##;
pub const GTK_STYLE_PROPERTY_BORDER_COLOR: &'static str = r##"border-color"##;
pub const GTK_STYLE_PROPERTY_BORDER_RADIUS: &'static str = r##"border-radius"##;
pub const GTK_STYLE_PROPERTY_BORDER_STYLE: &'static str = r##"border-style"##;
pub const GTK_STYLE_PROPERTY_BORDER_WIDTH: &'static str = r##"border-width"##;
pub const GTK_STYLE_PROPERTY_COLOR: &'static str = r##"color"##;
pub const GTK_STYLE_PROPERTY_FONT: &'static str = r##"font"##;
pub const GTK_STYLE_PROPERTY_MARGIN: &'static str = r##"margin"##;
pub const GTK_STYLE_PROPERTY_PADDING: &'static str = r##"padding"##;
pub const GTK_STYLE_PROVIDER_PRIORITY_APPLICATION: i32 = 600;
pub const GTK_STYLE_PROVIDER_PRIORITY_FALLBACK: i32 = 1;
pub const GTK_STYLE_PROVIDER_PRIORITY_SETTINGS: i32 = 400;
pub const GTK_STYLE_PROVIDER_PRIORITY_THEME: i32 = 200;
pub const GTK_STYLE_PROVIDER_PRIORITY_USER: i32 = 800;
pub const GTK_STYLE_REGION_COLUMN: &'static str = r##"column"##;
pub const GTK_STYLE_REGION_COLUMN_HEADER: &'static str = r##"column-header"##;
pub const GTK_STYLE_REGION_ROW: &'static str = r##"row"##;
pub const GTK_STYLE_REGION_TAB: &'static str = r##"tab"##;
pub const GTK_TEXT_VIEW_PRIORITY_VALIDATE: i32 = 5;
pub const GTK_TREE_SORTABLE_DEFAULT_SORT_COLUMN_ID: i32 = -1;
pub const GTK_TREE_SORTABLE_UNSORTED_SORT_COLUMN_ID: i32 = -2;

bitflags! {
    #[repr(C)]
    flags GtkAccelFlags: c_uint {
        const GTK_ACCEL_VISIBLE = 1,
        const GTK_ACCEL_LOCKED = 2,
        const GTK_ACCEL_MASK = 7,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkApplicationInhibitFlags: c_uint {
        const GTK_APPLICATION_INHIBIT_LOGOUT = 1,
        const GTK_APPLICATION_INHIBIT_SWITCH = 2,
        const GTK_APPLICATION_INHIBIT_SUSPEND = 4,
        const GTK_APPLICATION_INHIBIT_IDLE = 8,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkAttachOptions: c_uint {
        const GTK_EXPAND = 1,
        const GTK_SHRINK = 2,
        const GTK_FILL = 4,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkCalendarDisplayOptions: c_uint {
        const GTK_CALENDAR_SHOW_HEADING = 1,
        const GTK_CALENDAR_SHOW_DAY_NAMES = 2,
        const GTK_CALENDAR_NO_MONTH_CHANGE = 4,
        const GTK_CALENDAR_SHOW_WEEK_NUMBERS = 8,
        const GTK_CALENDAR_SHOW_DETAILS = 32,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkCellRendererState: c_uint {
        const GTK_CELL_RENDERER_SELECTED = 1,
        const GTK_CELL_RENDERER_PRELIT = 2,
        const GTK_CELL_RENDERER_INSENSITIVE = 4,
        const GTK_CELL_RENDERER_SORTED = 8,
        const GTK_CELL_RENDERER_FOCUSED = 16,
        const GTK_CELL_RENDERER_EXPANDABLE = 32,
        const GTK_CELL_RENDERER_EXPANDED = 64,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkDebugFlag: c_uint {
        const GTK_DEBUG_MISC = 1,
        const GTK_DEBUG_PLUGSOCKET = 2,
        const GTK_DEBUG_TEXT = 4,
        const GTK_DEBUG_TREE = 8,
        const GTK_DEBUG_UPDATES = 16,
        const GTK_DEBUG_KEYBINDINGS = 32,
        const GTK_DEBUG_MULTIHEAD = 64,
        const GTK_DEBUG_MODULES = 128,
        const GTK_DEBUG_GEOMETRY = 256,
        const GTK_DEBUG_ICONTHEME = 512,
        const GTK_DEBUG_PRINTING = 1024,
        const GTK_DEBUG_BUILDER = 2048,
        const GTK_DEBUG_SIZE_REQUEST = 4096,
        const GTK_DEBUG_NO_CSS_CACHE = 8192,
        const GTK_DEBUG_BASELINES = 16384,
        const GTK_DEBUG_PIXEL_CACHE = 32768,
        const GTK_DEBUG_NO_PIXEL_CACHE = 65536,
        const GTK_DEBUG_INTERACTIVE = 131072,
        const GTK_DEBUG_TOUCHSCREEN = 262144,
        const GTK_DEBUG_ACTIONS = 524288,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkDestDefaults: c_uint {
        const GTK_DEST_DEFAULT_MOTION = 1,
        const GTK_DEST_DEFAULT_HIGHLIGHT = 2,
        const GTK_DEST_DEFAULT_DROP = 4,
        const GTK_DEST_DEFAULT_ALL = 7,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkDialogFlags: c_uint {
        const GTK_DIALOG_MODAL = 1,
        const GTK_DIALOG_DESTROY_WITH_PARENT = 2,
        const GTK_DIALOG_USE_HEADER_BAR = 4,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkFileFilterFlags: c_uint {
        const GTK_FILE_FILTER_FILENAME = 1,
        const GTK_FILE_FILTER_URI = 2,
        const GTK_FILE_FILTER_DISPLAY_NAME = 4,
        const GTK_FILE_FILTER_MIME_TYPE = 8,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkIconLookupFlags: c_uint {
        const GTK_ICON_LOOKUP_NO_SVG = 1,
        const GTK_ICON_LOOKUP_FORCE_SVG = 2,
        const GTK_ICON_LOOKUP_USE_BUILTIN = 4,
        const GTK_ICON_LOOKUP_GENERIC_FALLBACK = 8,
        const GTK_ICON_LOOKUP_FORCE_SIZE = 16,
        const GTK_ICON_LOOKUP_FORCE_REGULAR = 32,
        const GTK_ICON_LOOKUP_FORCE_SYMBOLIC = 64,
        const GTK_ICON_LOOKUP_DIR_LTR = 128,
        const GTK_ICON_LOOKUP_DIR_RTL = 256,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkInputHints: c_uint {
        const GTK_INPUT_HINT_NONE = 0,
        const GTK_INPUT_HINT_SPELLCHECK = 1,
        const GTK_INPUT_HINT_NO_SPELLCHECK = 2,
        const GTK_INPUT_HINT_WORD_COMPLETION = 4,
        const GTK_INPUT_HINT_LOWERCASE = 8,
        const GTK_INPUT_HINT_UPPERCASE_CHARS = 16,
        const GTK_INPUT_HINT_UPPERCASE_WORDS = 32,
        const GTK_INPUT_HINT_UPPERCASE_SENTENCES = 64,
        const GTK_INPUT_HINT_INHIBIT_OSK = 128,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkJunctionSides: c_uint {
        const GTK_JUNCTION_NONE = 0,
        const GTK_JUNCTION_CORNER_TOPLEFT = 1,
        const GTK_JUNCTION_CORNER_TOPRIGHT = 2,
        const GTK_JUNCTION_CORNER_BOTTOMLEFT = 4,
        const GTK_JUNCTION_CORNER_BOTTOMRIGHT = 8,
        const GTK_JUNCTION_TOP = 3,
        const GTK_JUNCTION_BOTTOM = 12,
        const GTK_JUNCTION_LEFT = 5,
        const GTK_JUNCTION_RIGHT = 10,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkPlacesOpenFlags: c_uint {
        const GTK_PLACES_OPEN_NORMAL = 1,
        const GTK_PLACES_OPEN_NEW_TAB = 2,
        const GTK_PLACES_OPEN_NEW_WINDOW = 4,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkRcFlags: c_uint {
        const GTK_RC_FG = 1,
        const GTK_RC_BG = 2,
        const GTK_RC_TEXT = 4,
        const GTK_RC_BASE = 8,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkRecentFilterFlags: c_uint {
        const GTK_RECENT_FILTER_URI = 1,
        const GTK_RECENT_FILTER_DISPLAY_NAME = 2,
        const GTK_RECENT_FILTER_MIME_TYPE = 4,
        const GTK_RECENT_FILTER_APPLICATION = 8,
        const GTK_RECENT_FILTER_GROUP = 16,
        const GTK_RECENT_FILTER_AGE = 32,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkRegionFlags: c_uint {
        const GTK_REGION_EVEN = 1,
        const GTK_REGION_ODD = 2,
        const GTK_REGION_FIRST = 4,
        const GTK_REGION_LAST = 8,
        const GTK_REGION_ONLY = 16,
        const GTK_REGION_SORTED = 32,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkStateFlags: c_uint {
        const GTK_STATE_FLAG_NORMAL = 0,
        const GTK_STATE_FLAG_ACTIVE = 1,
        const GTK_STATE_FLAG_PRELIGHT = 2,
        const GTK_STATE_FLAG_SELECTED = 4,
        const GTK_STATE_FLAG_INSENSITIVE = 8,
        const GTK_STATE_FLAG_INCONSISTENT = 16,
        const GTK_STATE_FLAG_FOCUSED = 32,
        const GTK_STATE_FLAG_BACKDROP = 64,
        const GTK_STATE_FLAG_DIR_LTR = 128,
        const GTK_STATE_FLAG_DIR_RTL = 256,
        const GTK_STATE_FLAG_LINK = 512,
        const GTK_STATE_FLAG_VISITED = 1024,
        const GTK_STATE_FLAG_CHECKED = 2048,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkTargetFlags: c_uint {
        const GTK_TARGET_SAME_APP = 1,
        const GTK_TARGET_SAME_WIDGET = 2,
        const GTK_TARGET_OTHER_APP = 4,
        const GTK_TARGET_OTHER_WIDGET = 8,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkTextSearchFlags: c_uint {
        const GTK_TEXT_SEARCH_VISIBLE_ONLY = 1,
        const GTK_TEXT_SEARCH_TEXT_ONLY = 2,
        const GTK_TEXT_SEARCH_CASE_INSENSITIVE = 4,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkToolPaletteDragTargets: c_uint {
        const GTK_TOOL_PALETTE_DRAG_ITEMS = 1,
        const GTK_TOOL_PALETTE_DRAG_GROUPS = 2,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkTreeModelFlags: c_uint {
        const GTK_TREE_MODEL_ITERS_PERSIST = 1,
        const GTK_TREE_MODEL_LIST_ONLY = 2,
    }
}

bitflags! {
    #[repr(C)]
    flags GtkUIManagerItemType: c_uint {
        const GTK_UI_MANAGER_AUTO = 0,
        const GTK_UI_MANAGER_MENUBAR = 1,
        const GTK_UI_MANAGER_MENU = 2,
        const GTK_UI_MANAGER_TOOLBAR = 4,
        const GTK_UI_MANAGER_PLACEHOLDER = 8,
        const GTK_UI_MANAGER_POPUP = 16,
        const GTK_UI_MANAGER_MENUITEM = 32,
        const GTK_UI_MANAGER_TOOLITEM = 64,
        const GTK_UI_MANAGER_SEPARATOR = 128,
        const GTK_UI_MANAGER_ACCELERATOR = 256,
        const GTK_UI_MANAGER_POPUP_WITH_ACCELS = 512,
    }
}



pub type GtkAccelGroupActivate = Option<unsafe extern "C" fn(*mut GtkAccelGroup, *mut gobject::GObject, c_uint, gdk::GdkModifierType) -> gboolean>;
pub type GtkAccelGroupFindFunc = Option<unsafe extern "C" fn(*mut GtkAccelKey, *mut gobject::GClosure, gpointer) -> gboolean>;
pub type GtkAccelMapForeach = Option<unsafe extern "C" fn(gpointer, *const c_char, c_uint, gdk::GdkModifierType, gboolean)>;
pub type GtkAssistantPageFunc = Option<unsafe extern "C" fn(c_int, gpointer) -> c_int>;
pub type GtkBuilderConnectFunc = Option<unsafe extern "C" fn(*mut GtkBuilder, *mut gobject::GObject, *const c_char, *const c_char, *mut gobject::GObject, gobject::GConnectFlags, gpointer)>;
pub type GtkCalendarDetailFunc = Option<unsafe extern "C" fn(*mut GtkCalendar, c_uint, c_uint, c_uint, gpointer) -> *mut c_char>;
pub type GtkCallback = Option<unsafe extern "C" fn(*mut GtkWidget, gpointer)>;
pub type GtkCellAllocCallback = Option<unsafe extern "C" fn(*mut GtkCellRenderer, *const gdk::GdkRectangle, *const gdk::GdkRectangle, gpointer) -> gboolean>;
pub type GtkCellCallback = Option<unsafe extern "C" fn(*mut GtkCellRenderer, gpointer) -> gboolean>;
pub type GtkCellLayoutDataFunc = Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, *mut GtkTreeModel, *mut GtkTreeIter, gpointer)>;
pub type GtkClipboardClearFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, gpointer)>;
pub type GtkClipboardGetFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *mut GtkSelectionData, c_uint, gpointer)>;
pub type GtkClipboardImageReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *mut gdk_pixbuf::GdkPixbuf, gpointer)>;
pub type GtkClipboardReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *mut GtkSelectionData, gpointer)>;
pub type GtkClipboardRichTextReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, gdk::GdkAtom, *mut c_char, size_t, gpointer)>;
pub type GtkClipboardTargetsReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *mut gdk::GdkAtom, c_int, gpointer)>;
pub type GtkClipboardTextReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *const c_char, gpointer)>;
pub type GtkClipboardURIReceivedFunc = Option<unsafe extern "C" fn(*mut GtkClipboard, *mut *mut c_char, gpointer)>;
pub type GtkColorSelectionChangePaletteFunc = Option<unsafe extern "C" fn(*mut gdk::GdkColor, c_int)>;
pub type GtkColorSelectionChangePaletteWithScreenFunc = Option<unsafe extern "C" fn(*mut gdk::GdkScreen, *mut gdk::GdkColor, c_int)>;
pub type GtkEntryCompletionMatchFunc = Option<unsafe extern "C" fn(*mut GtkEntryCompletion, *const c_char, *mut GtkTreeIter, gpointer) -> gboolean>;
pub type GtkFileFilterFunc = Option<unsafe extern "C" fn(*const GtkFileFilterInfo, gpointer) -> gboolean>;
pub type GtkFlowBoxFilterFunc = Option<unsafe extern "C" fn(*mut GtkFlowBoxChild, gpointer) -> gboolean>;
pub type GtkFlowBoxForeachFunc = Option<unsafe extern "C" fn(*mut GtkFlowBox, *mut GtkFlowBoxChild, gpointer)>;
pub type GtkFlowBoxSortFunc = Option<unsafe extern "C" fn(*mut GtkFlowBoxChild, *mut GtkFlowBoxChild, gpointer) -> c_int>;
pub type GtkFontFilterFunc = Option<unsafe extern "C" fn(*const pango::PangoFontFamily, *const pango::PangoFontFace, gpointer) -> gboolean>;
pub type GtkIconViewForeachFunc = Option<unsafe extern "C" fn(*mut GtkIconView, *mut GtkTreePath, gpointer)>;
pub type GtkKeySnoopFunc = Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventKey, gpointer) -> c_int>;
pub type GtkListBoxCreateWidgetFunc = Option<unsafe extern "C" fn(*mut gobject::GObject, gpointer) -> *mut GtkWidget>;
pub type GtkListBoxFilterFunc = Option<unsafe extern "C" fn(*mut GtkListBoxRow, gpointer) -> gboolean>;
pub type GtkListBoxForeachFunc = Option<unsafe extern "C" fn(*mut GtkListBox, *mut GtkListBoxRow, gpointer)>;
pub type GtkListBoxSortFunc = Option<unsafe extern "C" fn(*mut GtkListBoxRow, *mut GtkListBoxRow, gpointer) -> c_int>;
pub type GtkListBoxUpdateHeaderFunc = Option<unsafe extern "C" fn(*mut GtkListBoxRow, *mut GtkListBoxRow, gpointer)>;
pub type GtkMenuDetachFunc = Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkMenu)>;
pub type GtkMenuPositionFunc = Option<unsafe extern "C" fn(*mut GtkMenu, *mut c_int, *mut c_int, *mut gboolean, gpointer)>;
pub type GtkModuleDisplayInitFunc = Option<unsafe extern "C" fn(*mut gdk::GdkDisplay)>;
pub type GtkModuleInitFunc = Option<unsafe extern "C" fn(*mut c_int, *mut *mut *mut c_char)>;
pub type GtkPageSetupDoneFunc = Option<unsafe extern "C" fn(*mut GtkPageSetup, gpointer)>;
pub type GtkPrintSettingsFunc = Option<unsafe extern "C" fn(*const c_char, *const c_char, gpointer)>;
pub type GtkRcPropertyParser = Option<unsafe extern "C" fn(*const gobject::GParamSpec, *const glib::GString, *mut gobject::GValue) -> gboolean>;
pub type GtkRecentFilterFunc = Option<unsafe extern "C" fn(*const GtkRecentFilterInfo, gpointer) -> gboolean>;
pub type GtkRecentSortFunc = Option<unsafe extern "C" fn(*mut GtkRecentInfo, *mut GtkRecentInfo, gpointer) -> c_int>;
pub type GtkStylePropertyParser = Option<unsafe extern "C" fn(*const c_char, *mut gobject::GValue, *mut *mut glib::GError) -> gboolean>;
pub type GtkTextBufferDeserializeFunc = Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextBuffer, *mut GtkTextIter, *mut u8, size_t, gboolean, gpointer, *mut *mut glib::GError) -> gboolean>;
pub type GtkTextBufferSerializeFunc = Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextBuffer, *const GtkTextIter, *const GtkTextIter, *mut size_t, gpointer) -> *mut u8>;
pub type GtkTextCharPredicate = Option<unsafe extern "C" fn(u32, gpointer) -> gboolean>;
pub type GtkTextTagTableForeach = Option<unsafe extern "C" fn(*mut GtkTextTag, gpointer)>;
pub type GtkTickCallback = Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkFrameClock, gpointer) -> gboolean>;
pub type GtkTranslateFunc = Option<unsafe extern "C" fn(*const c_char, gpointer) -> *mut c_char>;
pub type GtkTreeCellDataFunc = Option<unsafe extern "C" fn(*mut GtkTreeViewColumn, *mut GtkCellRenderer, *mut GtkTreeModel, *mut GtkTreeIter, gpointer)>;
pub type GtkTreeDestroyCountFunc = Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreePath, c_int, gpointer)>;
pub type GtkTreeIterCompareFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut GtkTreeIter, gpointer) -> c_int>;
pub type GtkTreeModelFilterModifyFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut gobject::GValue, c_int, gpointer)>;
pub type GtkTreeModelFilterVisibleFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, gpointer) -> gboolean>;
pub type GtkTreeModelForeachFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter, gpointer) -> gboolean>;
pub type GtkTreeSelectionForeachFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter, gpointer)>;
pub type GtkTreeSelectionFunc = Option<unsafe extern "C" fn(*mut GtkTreeSelection, *mut GtkTreeModel, *mut GtkTreePath, gboolean, gpointer) -> gboolean>;
pub type GtkTreeViewColumnDropFunc = Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreeViewColumn, *mut GtkTreeViewColumn, *mut GtkTreeViewColumn, gpointer) -> gboolean>;
pub type GtkTreeViewMappingFunc = Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreePath, gpointer)>;
pub type GtkTreeViewRowSeparatorFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, gpointer) -> gboolean>;
pub type GtkTreeViewSearchEqualFunc = Option<unsafe extern "C" fn(*mut GtkTreeModel, c_int, *const c_char, *mut GtkTreeIter, gpointer) -> gboolean>;
pub type GtkTreeViewSearchPositionFunc = Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkWidget, gpointer)>;

#[repr(C)]
pub struct GtkAboutDialogClass {
    pub parent_class: GtkDialogClass,
    pub activate_link: Option<unsafe extern "C" fn(*mut GtkAboutDialog, *const c_char) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAboutDialogPrivate(c_void);

#[repr(C)]
pub struct GtkAccelGroupClass {
    pub parent_class: gobject::GObjectClass,
    pub accel_changed: Option<unsafe extern "C" fn(*mut GtkAccelGroup, c_uint, gdk::GdkModifierType, *mut gobject::GClosure)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAccelGroupEntry {
    pub key: GtkAccelKey,
    pub closure: *mut gobject::GClosure,
    pub accel_path_quark: glib::GQuark,
}

#[repr(C)]
pub struct GtkAccelGroupPrivate(c_void);

#[repr(C)]
pub struct GtkAccelKey {
    pub accel_key: c_uint,
    pub accel_mods: gdk::GdkModifierType,
    _truncated_record_marker: c_void,
    //accel_flags: guint: 16,
}

#[repr(C)]
pub struct GtkAccelLabelClass {
    pub parent_class: GtkLabelClass,
    pub signal_quote1: *mut c_char,
    pub signal_quote2: *mut c_char,
    pub mod_name_shift: *mut c_char,
    pub mod_name_control: *mut c_char,
    pub mod_name_alt: *mut c_char,
    pub mod_separator: *mut c_char,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAccelLabelPrivate(c_void);

#[repr(C)]
pub struct GtkAccelMapClass(c_void);

#[repr(C)]
pub struct GtkAccessibleClass {
    pub parent_class: atk::AtkObjectClass,
    pub connect_widget_destroyed: Option<unsafe extern "C" fn(*mut GtkAccessible)>,
    pub widget_set: Option<unsafe extern "C" fn(*mut GtkAccessible)>,
    pub widget_unset: Option<unsafe extern "C" fn(*mut GtkAccessible)>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkActionBarClass {
    parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkActionBarPrivate(c_void);

#[repr(C)]
pub struct GtkActionClass {
    pub parent_class: gobject::GObjectClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkAction)>,
    menu_item_type: GType,
    toolbar_item_type: GType,
    pub create_menu_item: Option<unsafe extern "C" fn(*mut GtkAction) -> *mut GtkWidget>,
    pub create_tool_item: Option<unsafe extern "C" fn(*mut GtkAction) -> *mut GtkWidget>,
    pub connect_proxy: Option<unsafe extern "C" fn(*mut GtkAction, *mut GtkWidget)>,
    pub disconnect_proxy: Option<unsafe extern "C" fn(*mut GtkAction, *mut GtkWidget)>,
    pub create_menu: Option<unsafe extern "C" fn(*mut GtkAction) -> *mut GtkWidget>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkActionEntry {
    pub name: *const c_char,
    pub stock_id: *const c_char,
    pub label: *const c_char,
    pub accelerator: *const c_char,
    pub tooltip: *const c_char,
    pub callback: gobject::GCallback,
}

#[repr(C)]
pub struct GtkActionGroupClass {
    pub parent_class: gobject::GObjectClass,
    pub get_action: Option<unsafe extern "C" fn(*mut GtkActionGroup, *const c_char) -> *mut GtkAction>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkActionGroupPrivate(c_void);

#[repr(C)]
pub struct GtkActionPrivate(c_void);

#[repr(C)]
pub struct GtkActionableInterface {
    g_iface: gobject::GTypeInterface,
    pub get_action_name: Option<unsafe extern "C" fn(*mut GtkActionable) -> *const c_char>,
    pub set_action_name: Option<unsafe extern "C" fn(*mut GtkActionable, *const c_char)>,
    pub get_action_target_value: Option<unsafe extern "C" fn(*mut GtkActionable) -> *mut glib::GVariant>,
    pub set_action_target_value: Option<unsafe extern "C" fn(*mut GtkActionable, *mut glib::GVariant)>,
}

#[repr(C)]
pub struct GtkActivatableIface {
    g_iface: gobject::GTypeInterface,
    pub update: Option<unsafe extern "C" fn(*mut GtkActivatable, *mut GtkAction, *const c_char)>,
    pub sync_action_properties: Option<unsafe extern "C" fn(*mut GtkActivatable, *mut GtkAction)>,
}

#[repr(C)]
pub struct GtkAdjustmentClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkAdjustment)>,
    pub value_changed: Option<unsafe extern "C" fn(*mut GtkAdjustment)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAdjustmentPrivate(c_void);

#[repr(C)]
pub struct GtkAlignmentClass {
    pub parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAlignmentPrivate(c_void);

#[repr(C)]
pub struct GtkAppChooserButtonClass {
    pub parent_class: GtkComboBoxClass,
    pub custom_item_activated: Option<unsafe extern "C" fn(*mut GtkAppChooserButton, *const c_char)>,
    padding: [gpointer; 16],
}

#[repr(C)]
pub struct GtkAppChooserButtonPrivate(c_void);

#[repr(C)]
pub struct GtkAppChooserDialogClass {
    pub parent_class: GtkDialogClass,
    padding: [gpointer; 16],
}

#[repr(C)]
pub struct GtkAppChooserDialogPrivate(c_void);

#[repr(C)]
pub struct GtkAppChooserWidgetClass {
    pub parent_class: GtkBoxClass,
    pub application_selected: Option<unsafe extern "C" fn(*mut GtkAppChooserWidget, *mut gio::GAppInfo)>,
    pub application_activated: Option<unsafe extern "C" fn(*mut GtkAppChooserWidget, *mut gio::GAppInfo)>,
    pub populate_popup: Option<unsafe extern "C" fn(*mut GtkAppChooserWidget, *mut GtkMenu, *mut gio::GAppInfo)>,
    padding: [gpointer; 16],
}

#[repr(C)]
pub struct GtkAppChooserWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkApplicationClass {
    pub parent_class: gio::GApplicationClass,
    pub window_added: Option<unsafe extern "C" fn(*mut GtkApplication, *mut GtkWindow)>,
    pub window_removed: Option<unsafe extern "C" fn(*mut GtkApplication, *mut GtkWindow)>,
    padding: [gpointer; 12],
}

#[repr(C)]
pub struct GtkApplicationPrivate(c_void);

#[repr(C)]
pub struct GtkApplicationWindowClass {
    pub parent_class: GtkWindowClass,
    padding: [gpointer; 14],
}

#[repr(C)]
pub struct GtkApplicationWindowPrivate(c_void);

#[repr(C)]
pub struct GtkArrowAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkArrowAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkArrowClass {
    pub parent_class: GtkMiscClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkArrowPrivate(c_void);

#[repr(C)]
pub struct GtkAspectFrameClass {
    pub parent_class: GtkFrameClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAspectFramePrivate(c_void);

#[repr(C)]
pub struct GtkAssistantClass {
    pub parent_class: GtkWindowClass,
    pub prepare: Option<unsafe extern "C" fn(*mut GtkAssistant, *mut GtkWidget)>,
    pub apply: Option<unsafe extern "C" fn(*mut GtkAssistant)>,
    pub close: Option<unsafe extern "C" fn(*mut GtkAssistant)>,
    pub cancel: Option<unsafe extern "C" fn(*mut GtkAssistant)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkAssistantPrivate(c_void);

#[repr(C)]
pub struct GtkBinClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkBinPrivate(c_void);

#[repr(C)]
pub struct GtkBindingArg {
    pub arg_type: GType,
    _truncated_record_marker: c_void,
    //union,
}

#[repr(C)]
pub struct GtkBindingEntry {
    pub keyval: c_uint,
    pub modifiers: gdk::GdkModifierType,
    pub binding_set: *mut GtkBindingSet,
    _truncated_record_marker: c_void,
    //destroyed: guint: 1,
    //in_emission: guint: 1,
    //marks_unbound: guint: 1,
    //set_next: GtkBindingEntry*,
    //hash_next: GtkBindingEntry*,
    //signals: GtkBindingSignal*,
}

#[repr(C)]
pub struct GtkBindingSet {
    pub set_name: *mut c_char,
    pub priority: c_int,
    pub widget_path_pspecs: *mut glib::GSList,
    pub widget_class_pspecs: *mut glib::GSList,
    pub class_branch_pspecs: *mut glib::GSList,
    pub entries: *mut GtkBindingEntry,
    pub current: *mut GtkBindingEntry,
    _truncated_record_marker: c_void,
    //parsed: guint: 1,
}

#[repr(C)]
pub struct GtkBindingSignal {
    pub next: *mut GtkBindingSignal,
    pub signal_name: *mut c_char,
    pub n_args: c_uint,
    pub args: *mut GtkBindingArg,
}

#[repr(C)]
pub struct GtkBooleanCellAccessibleClass {
    pub parent_class: GtkRendererCellAccessibleClass,
}

#[repr(C)]
pub struct GtkBooleanCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkBorder {
    pub left: i16,
    pub right: i16,
    pub top: i16,
    pub bottom: i16,
}

#[repr(C)]
pub struct GtkBoxClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkBoxPrivate(c_void);

#[repr(C)]
pub struct GtkBuildableIface {
    pub g_iface: gobject::GTypeInterface,
    pub set_name: Option<unsafe extern "C" fn(*mut GtkBuildable, *const c_char)>,
    pub get_name: Option<unsafe extern "C" fn(*mut GtkBuildable) -> *const c_char>,
    pub add_child: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *mut gobject::GObject, *const c_char)>,
    pub set_buildable_property: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *const c_char, *const gobject::GValue)>,
    pub construct_child: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *const c_char) -> *mut gobject::GObject>,
    pub custom_tag_start: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *mut gobject::GObject, *const c_char, *mut glib::GMarkupParser, *mut gpointer) -> gboolean>,
    pub custom_tag_end: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *mut gobject::GObject, *const c_char, gpointer)>,
    pub custom_finished: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *mut gobject::GObject, *const c_char, gpointer)>,
    pub parser_finished: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder)>,
    pub get_internal_child: Option<unsafe extern "C" fn(*mut GtkBuildable, *mut GtkBuilder, *const c_char) -> *mut gobject::GObject>,
}

#[repr(C)]
pub struct GtkBuilderClass {
    pub parent_class: gobject::GObjectClass,
    pub get_type_from_name: Option<unsafe extern "C" fn(*mut GtkBuilder, *const c_char) -> GType>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkBuilderPrivate(c_void);

#[repr(C)]
pub struct GtkButtonAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkButtonBoxClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkButtonBoxPrivate(c_void);

#[repr(C)]
pub struct GtkButtonClass {
    pub parent_class: GtkBinClass,
    pub pressed: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub released: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub clicked: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub enter: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub leave: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkButtonPrivate(c_void);

#[repr(C)]
pub struct GtkCalendarClass {
    pub parent_class: GtkWidgetClass,
    pub month_changed: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub day_selected: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub day_selected_double_click: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub prev_month: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub next_month: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub prev_year: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub next_year: Option<unsafe extern "C" fn(*mut GtkCalendar)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCalendarPrivate(c_void);

#[repr(C)]
pub struct GtkCellAccessibleClass {
    pub parent_class: GtkAccessibleClass,
    pub update_cache: Option<unsafe extern "C" fn(*mut GtkCellAccessible, gboolean)>,
}

#[repr(C)]
pub struct GtkCellAccessibleParentIface {
    pub parent: gobject::GTypeInterface,
    pub get_cell_extents: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible, *mut c_int, *mut c_int, *mut c_int, *mut c_int, atk::AtkCoordType)>,
    pub get_cell_area: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible, *mut gdk::GdkRectangle)>,
    pub grab_focus: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible) -> gboolean>,
    pub get_child_index: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible) -> c_int>,
    pub get_renderer_state: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible) -> GtkCellRendererState>,
    pub expand_collapse: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible)>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible)>,
    pub edit: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible)>,
    pub update_relationset: Option<unsafe extern "C" fn(*mut GtkCellAccessibleParent, *mut GtkCellAccessible, *mut atk::AtkRelationSet)>,
}

#[repr(C)]
pub struct GtkCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkCellAreaBoxClass {
    parent_class: GtkCellAreaClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellAreaBoxPrivate(c_void);

#[repr(C)]
pub struct GtkCellAreaClass {
    parent_class: gobject::GInitiallyUnownedClass,
    pub add: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellRenderer)>,
    pub remove: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellRenderer)>,
    pub foreach: Option<unsafe extern "C" fn(*mut GtkCellArea, GtkCellCallback, gpointer)>,
    pub foreach_alloc: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *const gdk::GdkRectangle, *const gdk::GdkRectangle, GtkCellAllocCallback, gpointer)>,
    pub event: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *mut gdk::GdkEvent, *const gdk::GdkRectangle, GtkCellRendererState) -> c_int>,
    pub render: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *mut cairo::cairo_t, *const gdk::GdkRectangle, *const gdk::GdkRectangle, GtkCellRendererState, gboolean)>,
    pub apply_attributes: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkTreeModel, *mut GtkTreeIter, gboolean, gboolean)>,
    pub create_context: Option<unsafe extern "C" fn(*mut GtkCellArea) -> *mut GtkCellAreaContext>,
    pub copy_context: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext) -> *mut GtkCellAreaContext>,
    pub get_request_mode: Option<unsafe extern "C" fn(*mut GtkCellArea) -> GtkSizeRequestMode>,
    pub get_preferred_width: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_height_for_width: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub get_preferred_height: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_width_for_height: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub set_cell_property: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellRenderer, c_uint, *mut gobject::GValue, *mut gobject::GParamSpec)>,
    pub get_cell_property: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellRenderer, c_uint, *mut gobject::GValue, *mut gobject::GParamSpec)>,
    pub focus: Option<unsafe extern "C" fn(*mut GtkCellArea, GtkDirectionType) -> gboolean>,
    pub is_activatable: Option<unsafe extern "C" fn(*mut GtkCellArea) -> gboolean>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkCellArea, *mut GtkCellAreaContext, *mut GtkWidget, *const gdk::GdkRectangle, GtkCellRendererState, gboolean) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellAreaContextClass {
    parent_class: gobject::GObjectClass,
    pub allocate: Option<unsafe extern "C" fn(*mut GtkCellAreaContext, c_int, c_int)>,
    pub reset: Option<unsafe extern "C" fn(*mut GtkCellAreaContext)>,
    pub get_preferred_height_for_width: Option<unsafe extern "C" fn(*mut GtkCellAreaContext, c_int, *mut c_int, *mut c_int)>,
    pub get_preferred_width_for_height: Option<unsafe extern "C" fn(*mut GtkCellAreaContext, c_int, *mut c_int, *mut c_int)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellAreaContextPrivate(c_void);

#[repr(C)]
pub struct GtkCellAreaPrivate(c_void);

#[repr(C)]
pub struct GtkCellEditableIface {
    g_iface: gobject::GTypeInterface,
    pub editing_done: Option<unsafe extern "C" fn(*mut GtkCellEditable)>,
    pub remove_widget: Option<unsafe extern "C" fn(*mut GtkCellEditable)>,
    pub start_editing: Option<unsafe extern "C" fn(*mut GtkCellEditable, *mut gdk::GdkEvent)>,
}

#[repr(C)]
pub struct GtkCellLayoutIface {
    g_iface: gobject::GTypeInterface,
    pub pack_start: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, gboolean)>,
    pub pack_end: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, gboolean)>,
    pub clear: Option<unsafe extern "C" fn(*mut GtkCellLayout)>,
    pub add_attribute: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, *const c_char, c_int)>,
    pub set_cell_data_func: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, GtkCellLayoutDataFunc, gpointer, glib::GDestroyNotify)>,
    pub clear_attributes: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer)>,
    pub reorder: Option<unsafe extern "C" fn(*mut GtkCellLayout, *mut GtkCellRenderer, c_int)>,
    pub get_cells: Option<unsafe extern "C" fn(*mut GtkCellLayout) -> *mut glib::GList>,
    pub get_area: Option<unsafe extern "C" fn(*mut GtkCellLayout) -> *mut GtkCellArea>,
}

#[repr(C)]
pub struct GtkCellRendererAccelClass {
    pub parent_class: GtkCellRendererTextClass,
    pub accel_edited: Option<unsafe extern "C" fn(*mut GtkCellRendererAccel, *const c_char, c_uint, gdk::GdkModifierType, c_uint)>,
    pub accel_cleared: Option<unsafe extern "C" fn(*mut GtkCellRendererAccel, *const c_char)>,
    pub _gtk_reserved0: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererAccelPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererClass {
    parent_class: gobject::GInitiallyUnownedClass,
    pub get_request_mode: Option<unsafe extern "C" fn(*mut GtkCellRenderer) -> GtkSizeRequestMode>,
    pub get_preferred_width: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_height_for_width: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub get_preferred_height: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_width_for_height: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub get_aligned_area: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, GtkCellRendererState, *const gdk::GdkRectangle, *mut gdk::GdkRectangle)>,
    pub get_size: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkWidget, *const gdk::GdkRectangle, *mut c_int, *mut c_int, *mut c_int, *mut c_int)>,
    pub render: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut cairo::cairo_t, *mut GtkWidget, *const gdk::GdkRectangle, *const gdk::GdkRectangle, GtkCellRendererState)>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut gdk::GdkEvent, *mut GtkWidget, *const c_char, *const gdk::GdkRectangle, *const gdk::GdkRectangle, GtkCellRendererState) -> gboolean>,
    pub start_editing: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut gdk::GdkEvent, *mut GtkWidget, *const c_char, *const gdk::GdkRectangle, *const gdk::GdkRectangle, GtkCellRendererState) -> *mut GtkCellEditable>,
    pub editing_canceled: Option<unsafe extern "C" fn(*mut GtkCellRenderer)>,
    pub editing_started: Option<unsafe extern "C" fn(*mut GtkCellRenderer, *mut GtkCellEditable, *const c_char)>,
    priv_: *mut GtkCellRendererClassPrivate,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererClassPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererComboClass {
    pub parent: GtkCellRendererTextClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererComboPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererPixbufClass {
    pub parent_class: GtkCellRendererClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererPixbufPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererProgressClass {
    pub parent_class: GtkCellRendererClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererProgressPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererSpinClass {
    pub parent: GtkCellRendererTextClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererSpinPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererSpinnerClass {
    pub parent_class: GtkCellRendererClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererSpinnerPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererTextClass {
    pub parent_class: GtkCellRendererClass,
    pub edited: Option<unsafe extern "C" fn(*mut GtkCellRendererText, *const c_char, *const c_char)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererTextPrivate(c_void);

#[repr(C)]
pub struct GtkCellRendererToggleClass {
    pub parent_class: GtkCellRendererClass,
    pub toggled: Option<unsafe extern "C" fn(*mut GtkCellRendererToggle, *const c_char)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellRendererTogglePrivate(c_void);

#[repr(C)]
pub struct GtkCellViewClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCellViewPrivate(c_void);

#[repr(C)]
pub struct GtkCheckButtonClass {
    pub parent_class: GtkToggleButtonClass,
    pub draw_indicator: Option<unsafe extern "C" fn(*mut GtkCheckButton, *mut cairo::cairo_t)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCheckMenuItemAccessibleClass {
    pub parent_class: GtkMenuItemAccessibleClass,
}

#[repr(C)]
pub struct GtkCheckMenuItemAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkCheckMenuItemClass {
    pub parent_class: GtkMenuItemClass,
    pub toggled: Option<unsafe extern "C" fn(*mut GtkCheckMenuItem)>,
    pub draw_indicator: Option<unsafe extern "C" fn(*mut GtkCheckMenuItem, *mut cairo::cairo_t)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCheckMenuItemPrivate(c_void);

#[repr(C)]
pub struct GtkColorButtonClass {
    pub parent_class: GtkButtonClass,
    pub color_set: Option<unsafe extern "C" fn(*mut GtkColorButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkColorButtonPrivate(c_void);

#[repr(C)]
pub struct GtkColorChooserDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkColorChooserDialogPrivate(c_void);

#[repr(C)]
pub struct GtkColorChooserInterface {
    pub base_interface: gobject::GTypeInterface,
    pub get_rgba: Option<unsafe extern "C" fn(*mut GtkColorChooser, *const gdk::GdkRGBA)>,
    pub set_rgba: Option<unsafe extern "C" fn(*mut GtkColorChooser, *const gdk::GdkRGBA)>,
    pub add_palette: Option<unsafe extern "C" fn(*mut GtkColorChooser, GtkOrientation, c_int, c_int, *mut gdk::GdkRGBA)>,
    pub color_activated: Option<unsafe extern "C" fn(*mut GtkColorChooser, *const gdk::GdkRGBA)>,
    pub padding: [gpointer; 12],
}

#[repr(C)]
pub struct GtkColorChooserWidgetClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkColorChooserWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkColorSelectionClass {
    pub parent_class: GtkBoxClass,
    pub color_changed: Option<unsafe extern "C" fn(*mut GtkColorSelection)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkColorSelectionDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkColorSelectionDialogPrivate(c_void);

#[repr(C)]
pub struct GtkColorSelectionPrivate(c_void);

#[repr(C)]
pub struct GtkComboBoxAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkComboBoxAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkComboBoxClass {
    pub parent_class: GtkBinClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkComboBox)>,
    pub format_entry_text: Option<unsafe extern "C" fn(*mut GtkComboBox, *const c_char) -> *mut c_char>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkComboBoxPrivate(c_void);

#[repr(C)]
pub struct GtkComboBoxTextClass {
    pub parent_class: GtkComboBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkComboBoxTextPrivate(c_void);

#[repr(C)]
pub struct GtkContainerAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
    pub add_gtk: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget, gpointer) -> c_int>,
    pub remove_gtk: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget, gpointer) -> c_int>,
}

#[repr(C)]
pub struct GtkContainerAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkContainerCellAccessibleClass {
    pub parent_class: GtkCellAccessibleClass,
}

#[repr(C)]
pub struct GtkContainerCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkContainerClass {
    pub parent_class: GtkWidgetClass,
    pub add: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget)>,
    pub remove: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget)>,
    pub check_resize: Option<unsafe extern "C" fn(*mut GtkContainer)>,
    pub forall: Option<unsafe extern "C" fn(*mut GtkContainer, gboolean, GtkCallback, gpointer)>,
    pub set_focus_child: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget)>,
    pub child_type: Option<unsafe extern "C" fn(*mut GtkContainer) -> GType>,
    pub composite_name: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget) -> *mut c_char>,
    pub set_child_property: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget, c_uint, *mut gobject::GValue, *mut gobject::GParamSpec)>,
    pub get_child_property: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget, c_uint, *mut gobject::GValue, *mut gobject::GParamSpec)>,
    pub get_path_for_child: Option<unsafe extern "C" fn(*mut GtkContainer, *mut GtkWidget) -> *mut GtkWidgetPath>,
    _truncated_record_marker: c_void,
    //_handle_border_width: unsigned: 1,
    //_gtk_reserved1: fn,
    //_gtk_reserved2: fn,
    //_gtk_reserved3: fn,
    //_gtk_reserved4: fn,
    //_gtk_reserved5: fn,
    //_gtk_reserved6: fn,
    //_gtk_reserved7: fn,
    //_gtk_reserved8: fn,
}

#[repr(C)]
pub struct GtkContainerPrivate(c_void);

#[repr(C)]
pub struct GtkCssProviderClass {
    pub parent_class: gobject::GObjectClass,
    pub parsing_error: Option<unsafe extern "C" fn(*mut GtkCssProvider, *mut GtkCssSection, *const glib::GError)>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkCssProviderPrivate(c_void);

#[repr(C)]
pub struct GtkCssSection(c_void);

#[repr(C)]
pub struct GtkDialogClass {
    pub parent_class: GtkWindowClass,
    pub response: Option<unsafe extern "C" fn(*mut GtkDialog, c_int)>,
    pub close: Option<unsafe extern "C" fn(*mut GtkDialog)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkDialogPrivate(c_void);

#[repr(C)]
pub struct GtkDrawingAreaClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkEditableInterface {
    pub base_iface: gobject::GTypeInterface,
    pub insert_text: Option<unsafe extern "C" fn(*mut GtkEditable, *const c_char, c_int, *mut c_int)>,
    pub delete_text: Option<unsafe extern "C" fn(*mut GtkEditable, c_int, c_int)>,
    pub changed: Option<unsafe extern "C" fn(*mut GtkEditable)>,
    pub do_insert_text: Option<unsafe extern "C" fn(*mut GtkEditable, *const c_char, c_int, *mut c_int)>,
    pub do_delete_text: Option<unsafe extern "C" fn(*mut GtkEditable, c_int, c_int)>,
    pub get_chars: Option<unsafe extern "C" fn(*mut GtkEditable, c_int, c_int) -> *mut c_char>,
    pub set_selection_bounds: Option<unsafe extern "C" fn(*mut GtkEditable, c_int, c_int)>,
    pub get_selection_bounds: Option<unsafe extern "C" fn(*mut GtkEditable, *mut c_int, *mut c_int) -> gboolean>,
    pub set_position: Option<unsafe extern "C" fn(*mut GtkEditable, c_int)>,
    pub get_position: Option<unsafe extern "C" fn(*mut GtkEditable) -> c_int>,
}

#[repr(C)]
pub struct GtkEntryAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkEntryAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkEntryBufferClass {
    pub parent_class: gobject::GObjectClass,
    pub inserted_text: Option<unsafe extern "C" fn(*mut GtkEntryBuffer, c_uint, *const c_char, c_uint)>,
    pub deleted_text: Option<unsafe extern "C" fn(*mut GtkEntryBuffer, c_uint, c_uint)>,
    pub get_text: Option<unsafe extern "C" fn(*mut GtkEntryBuffer, *mut size_t) -> *const c_char>,
    pub get_length: Option<unsafe extern "C" fn(*mut GtkEntryBuffer) -> c_uint>,
    pub insert_text: Option<unsafe extern "C" fn(*mut GtkEntryBuffer, c_uint, *const c_char, c_uint) -> c_uint>,
    pub delete_text: Option<unsafe extern "C" fn(*mut GtkEntryBuffer, c_uint, c_uint) -> c_uint>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkEntryBufferPrivate(c_void);

#[repr(C)]
pub struct GtkEntryClass {
    pub parent_class: GtkWidgetClass,
    pub populate_popup: Option<unsafe extern "C" fn(*mut GtkEntry, *mut GtkWidget)>,
    pub activate: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkEntry, GtkMovementStep, c_int, gboolean)>,
    pub insert_at_cursor: Option<unsafe extern "C" fn(*mut GtkEntry, *const c_char)>,
    pub delete_from_cursor: Option<unsafe extern "C" fn(*mut GtkEntry, GtkDeleteType, c_int)>,
    pub backspace: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub cut_clipboard: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub copy_clipboard: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub paste_clipboard: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub toggle_overwrite: Option<unsafe extern "C" fn(*mut GtkEntry)>,
    pub get_text_area_size: Option<unsafe extern "C" fn(*mut GtkEntry, *mut c_int, *mut c_int, *mut c_int, *mut c_int)>,
    pub get_frame_size: Option<unsafe extern "C" fn(*mut GtkEntry, *mut c_int, *mut c_int, *mut c_int, *mut c_int)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkEntryCompletionClass {
    pub parent_class: gobject::GObjectClass,
    pub match_selected: Option<unsafe extern "C" fn(*mut GtkEntryCompletion, *mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub action_activated: Option<unsafe extern "C" fn(*mut GtkEntryCompletion, c_int)>,
    pub insert_prefix: Option<unsafe extern "C" fn(*mut GtkEntryCompletion, *const c_char) -> gboolean>,
    pub cursor_on_match: Option<unsafe extern "C" fn(*mut GtkEntryCompletion, *mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub no_matches: Option<unsafe extern "C" fn(*mut GtkEntryCompletion)>,
    pub _gtk_reserved0: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkEntryCompletionPrivate(c_void);

#[repr(C)]
pub struct GtkEntryPrivate(c_void);

#[repr(C)]
pub struct GtkEventBoxClass {
    pub parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkEventBoxPrivate(c_void);

#[repr(C)]
pub struct GtkEventControllerClass(c_void);

#[repr(C)]
pub struct GtkExpanderAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkExpanderAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkExpanderClass {
    pub parent_class: GtkBinClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkExpander)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkExpanderPrivate(c_void);

#[repr(C)]
pub struct GtkFileChooserButtonClass {
    pub parent_class: GtkBoxClass,
    pub file_set: Option<unsafe extern "C" fn(*mut GtkFileChooserButton)>,
    __gtk_reserved1: *mut c_void,
    __gtk_reserved2: *mut c_void,
    __gtk_reserved3: *mut c_void,
    __gtk_reserved4: *mut c_void,
}

#[repr(C)]
pub struct GtkFileChooserButtonPrivate(c_void);

#[repr(C)]
pub struct GtkFileChooserDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFileChooserDialogPrivate(c_void);

#[repr(C)]
pub struct GtkFileChooserWidgetClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFileChooserWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkFileFilterInfo {
    pub contains: GtkFileFilterFlags,
    pub filename: *const c_char,
    pub uri: *const c_char,
    pub display_name: *const c_char,
    pub mime_type: *const c_char,
}

#[repr(C)]
pub struct GtkFixedChild {
    pub widget: *mut GtkWidget,
    pub x: c_int,
    pub y: c_int,
}

#[repr(C)]
pub struct GtkFixedClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFixedPrivate(c_void);

#[repr(C)]
pub struct GtkFlowBoxAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkFlowBoxAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkFlowBoxChildAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkFlowBoxChildClass {
    pub parent_class: GtkBinClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkFlowBoxChild)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFlowBoxClass {
    pub parent_class: GtkContainerClass,
    pub child_activated: Option<unsafe extern "C" fn(*mut GtkFlowBox, *mut GtkFlowBoxChild)>,
    pub selected_children_changed: Option<unsafe extern "C" fn(*mut GtkFlowBox)>,
    pub activate_cursor_child: Option<unsafe extern "C" fn(*mut GtkFlowBox)>,
    pub toggle_cursor_child: Option<unsafe extern "C" fn(*mut GtkFlowBox)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkFlowBox, GtkMovementStep, c_int)>,
    pub select_all: Option<unsafe extern "C" fn(*mut GtkFlowBox)>,
    pub unselect_all: Option<unsafe extern "C" fn(*mut GtkFlowBox)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontButtonClass {
    pub parent_class: GtkButtonClass,
    pub font_set: Option<unsafe extern "C" fn(*mut GtkFontButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontButtonPrivate(c_void);

#[repr(C)]
pub struct GtkFontChooserDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontChooserDialogPrivate(c_void);

#[repr(C)]
pub struct GtkFontChooserIface {
    pub base_iface: gobject::GTypeInterface,
    pub get_font_family: Option<unsafe extern "C" fn(*mut GtkFontChooser) -> *mut pango::PangoFontFamily>,
    pub get_font_face: Option<unsafe extern "C" fn(*mut GtkFontChooser) -> *mut pango::PangoFontFace>,
    pub get_font_size: Option<unsafe extern "C" fn(*mut GtkFontChooser) -> c_int>,
    pub set_filter_func: Option<unsafe extern "C" fn(*mut GtkFontChooser, GtkFontFilterFunc, gpointer, glib::GDestroyNotify)>,
    pub font_activated: Option<unsafe extern "C" fn(*mut GtkFontChooser, *const c_char)>,
    pub padding: [gpointer; 12],
}

#[repr(C)]
pub struct GtkFontChooserWidgetClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontChooserWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkFontSelectionClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontSelectionDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFontSelectionDialogPrivate(c_void);

#[repr(C)]
pub struct GtkFontSelectionPrivate(c_void);

#[repr(C)]
pub struct GtkFrameAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkFrameAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkFrameClass {
    pub parent_class: GtkBinClass,
    pub compute_child_allocation: Option<unsafe extern "C" fn(*mut GtkFrame, *mut GtkAllocation)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkFramePrivate(c_void);

#[repr(C)]
pub struct GtkGLAreaClass {
    parent_class: GtkWidgetClass,
    pub render: Option<unsafe extern "C" fn(*mut GtkGLArea, *mut gdk::GdkGLContext) -> gboolean>,
    pub resize: Option<unsafe extern "C" fn(*mut GtkGLArea, c_int, c_int)>,
    pub create_context: Option<unsafe extern "C" fn(*mut GtkGLArea) -> *mut gdk::GdkGLContext>,
    _padding: [gpointer; 6],
}

#[repr(C)]
pub struct GtkGestureClass(c_void);

#[repr(C)]
pub struct GtkGestureDragClass(c_void);

#[repr(C)]
pub struct GtkGestureLongPressClass(c_void);

#[repr(C)]
pub struct GtkGestureMultiPressClass(c_void);

#[repr(C)]
pub struct GtkGesturePanClass(c_void);

#[repr(C)]
pub struct GtkGestureRotateClass(c_void);

#[repr(C)]
pub struct GtkGestureSingleClass(c_void);

#[repr(C)]
pub struct GtkGestureSwipeClass(c_void);

#[repr(C)]
pub struct GtkGestureZoomClass(c_void);

#[repr(C)]
pub struct GtkGradient(c_void);

#[repr(C)]
pub struct GtkGridClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkGridPrivate(c_void);

#[repr(C)]
pub struct GtkHBoxClass {
    pub parent_class: GtkBoxClass,
}

#[repr(C)]
pub struct GtkHButtonBoxClass {
    pub parent_class: GtkButtonBoxClass,
}

#[repr(C)]
pub struct GtkHPanedClass {
    pub parent_class: GtkPanedClass,
}

#[repr(C)]
pub struct GtkHSVClass {
    pub parent_class: GtkWidgetClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkHSV)>,
    pub move_: Option<unsafe extern "C" fn(*mut GtkHSV, GtkDirectionType)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkHSVPrivate(c_void);

#[repr(C)]
pub struct GtkHScaleClass {
    pub parent_class: GtkScaleClass,
}

#[repr(C)]
pub struct GtkHScrollbarClass {
    pub parent_class: GtkScrollbarClass,
}

#[repr(C)]
pub struct GtkHSeparatorClass {
    pub parent_class: GtkSeparatorClass,
}

#[repr(C)]
pub struct GtkHandleBoxClass {
    pub parent_class: GtkBinClass,
    pub child_attached: Option<unsafe extern "C" fn(*mut GtkHandleBox, *mut GtkWidget)>,
    pub child_detached: Option<unsafe extern "C" fn(*mut GtkHandleBox, *mut GtkWidget)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkHandleBoxPrivate(c_void);

#[repr(C)]
pub struct GtkHeaderBarClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkHeaderBarPrivate(c_void);

#[repr(C)]
pub struct GtkIMContextClass {
    parent_class: gobject::GObjectClass,
    pub preedit_start: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub preedit_end: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub preedit_changed: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub commit: Option<unsafe extern "C" fn(*mut GtkIMContext, *const c_char)>,
    pub retrieve_surrounding: Option<unsafe extern "C" fn(*mut GtkIMContext) -> gboolean>,
    pub delete_surrounding: Option<unsafe extern "C" fn(*mut GtkIMContext, c_int, c_int) -> gboolean>,
    pub set_client_window: Option<unsafe extern "C" fn(*mut GtkIMContext, *mut gdk::GdkWindow)>,
    pub get_preedit_string: Option<unsafe extern "C" fn(*mut GtkIMContext, *mut *mut c_char, *mut *mut pango::PangoAttrList, *mut c_int)>,
    pub filter_keypress: Option<unsafe extern "C" fn(*mut GtkIMContext, *mut gdk::GdkEventKey) -> gboolean>,
    pub focus_in: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub focus_out: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub reset: Option<unsafe extern "C" fn(*mut GtkIMContext)>,
    pub set_cursor_location: Option<unsafe extern "C" fn(*mut GtkIMContext, *mut gdk::GdkRectangle)>,
    pub set_use_preedit: Option<unsafe extern "C" fn(*mut GtkIMContext, gboolean)>,
    pub set_surrounding: Option<unsafe extern "C" fn(*mut GtkIMContext, *const c_char, c_int, c_int)>,
    pub get_surrounding: Option<unsafe extern "C" fn(*mut GtkIMContext, *mut *mut c_char, *mut c_int) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkIMContextInfo {
    pub context_id: *const c_char,
    pub context_name: *const c_char,
    pub domain: *const c_char,
    pub domain_dirname: *const c_char,
    pub default_locales: *const c_char,
}

#[repr(C)]
pub struct GtkIMContextSimpleClass {
    pub parent_class: GtkIMContextClass,
}

#[repr(C)]
pub struct GtkIMContextSimplePrivate(c_void);

#[repr(C)]
pub struct GtkIMMulticontextClass {
    pub parent_class: GtkIMContextClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkIMMulticontextPrivate(c_void);

#[repr(C)]
pub struct GtkIconFactoryClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkIconFactoryPrivate(c_void);

#[repr(C)]
pub struct GtkIconInfoClass(c_void);

#[repr(C)]
pub struct GtkIconSet(c_void);

#[repr(C)]
pub struct GtkIconSource(c_void);

#[repr(C)]
pub struct GtkIconThemeClass {
    pub parent_class: gobject::GObjectClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkIconTheme)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkIconThemePrivate(c_void);

#[repr(C)]
pub struct GtkIconViewAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkIconViewAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkIconViewClass {
    pub parent_class: GtkContainerClass,
    pub item_activated: Option<unsafe extern "C" fn(*mut GtkIconView, *mut GtkTreePath)>,
    pub selection_changed: Option<unsafe extern "C" fn(*mut GtkIconView)>,
    pub select_all: Option<unsafe extern "C" fn(*mut GtkIconView)>,
    pub unselect_all: Option<unsafe extern "C" fn(*mut GtkIconView)>,
    pub select_cursor_item: Option<unsafe extern "C" fn(*mut GtkIconView)>,
    pub toggle_cursor_item: Option<unsafe extern "C" fn(*mut GtkIconView)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkIconView, GtkMovementStep, c_int) -> gboolean>,
    pub activate_cursor_item: Option<unsafe extern "C" fn(*mut GtkIconView) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkIconViewPrivate(c_void);

#[repr(C)]
pub struct GtkImageAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkImageAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkImageCellAccessibleClass {
    pub parent_class: GtkRendererCellAccessibleClass,
}

#[repr(C)]
pub struct GtkImageCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkImageClass {
    pub parent_class: GtkMiscClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkImageMenuItemClass {
    pub parent_class: GtkMenuItemClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkImageMenuItemPrivate(c_void);

#[repr(C)]
pub struct GtkImagePrivate(c_void);

#[repr(C)]
pub struct GtkInfoBarClass {
    pub parent_class: GtkBoxClass,
    pub response: Option<unsafe extern "C" fn(*mut GtkInfoBar, c_int)>,
    pub close: Option<unsafe extern "C" fn(*mut GtkInfoBar)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkInfoBarPrivate(c_void);

#[repr(C)]
pub struct GtkInvisibleClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkInvisiblePrivate(c_void);

#[repr(C)]
pub struct GtkLabelAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkLabelAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkLabelClass {
    pub parent_class: GtkMiscClass,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkLabel, GtkMovementStep, c_int, gboolean)>,
    pub copy_clipboard: Option<unsafe extern "C" fn(*mut GtkLabel)>,
    pub populate_popup: Option<unsafe extern "C" fn(*mut GtkLabel, *mut GtkMenu)>,
    pub activate_link: Option<unsafe extern "C" fn(*mut GtkLabel, *const c_char) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkLabelPrivate(c_void);

#[repr(C)]
pub struct GtkLabelSelectionInfo(c_void);

#[repr(C)]
pub struct GtkLayoutClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkLayoutPrivate(c_void);

#[repr(C)]
pub struct GtkLevelBarAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkLevelBarAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkLevelBarClass {
    parent_class: GtkWidgetClass,
    pub offset_changed: Option<unsafe extern "C" fn(*mut GtkLevelBar, *const c_char)>,
    padding: [gpointer; 16],
}

#[repr(C)]
pub struct GtkLevelBarPrivate(c_void);

#[repr(C)]
pub struct GtkLinkButtonAccessibleClass {
    pub parent_class: GtkButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkLinkButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkLinkButtonClass {
    parent_class: GtkButtonClass,
    pub activate_link: Option<unsafe extern "C" fn(*mut GtkLinkButton) -> gboolean>,
    pub _gtk_padding1: Option<unsafe extern "C" fn()>,
    pub _gtk_padding2: Option<unsafe extern "C" fn()>,
    pub _gtk_padding3: Option<unsafe extern "C" fn()>,
    pub _gtk_padding4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkLinkButtonPrivate(c_void);

#[repr(C)]
pub struct GtkListBoxAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkListBoxAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkListBoxClass {
    pub parent_class: GtkContainerClass,
    pub row_selected: Option<unsafe extern "C" fn(*mut GtkListBox, *mut GtkListBoxRow)>,
    pub row_activated: Option<unsafe extern "C" fn(*mut GtkListBox, *mut GtkListBoxRow)>,
    pub activate_cursor_row: Option<unsafe extern "C" fn(*mut GtkListBox)>,
    pub toggle_cursor_row: Option<unsafe extern "C" fn(*mut GtkListBox)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkListBox, GtkMovementStep, c_int)>,
    pub selected_rows_changed: Option<unsafe extern "C" fn(*mut GtkListBox)>,
    pub select_all: Option<unsafe extern "C" fn(*mut GtkListBox)>,
    pub unselect_all: Option<unsafe extern "C" fn(*mut GtkListBox)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkListBoxRowAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkListBoxRowClass {
    pub parent_class: GtkBinClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkListBoxRow)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkListStoreClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkListStorePrivate(c_void);

#[repr(C)]
pub struct GtkLockButtonAccessibleClass {
    pub parent_class: GtkButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkLockButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkLockButtonClass {
    pub parent_class: GtkButtonClass,
    pub reserved0: Option<unsafe extern "C" fn()>,
    pub reserved1: Option<unsafe extern "C" fn()>,
    pub reserved2: Option<unsafe extern "C" fn()>,
    pub reserved3: Option<unsafe extern "C" fn()>,
    pub reserved4: Option<unsafe extern "C" fn()>,
    pub reserved5: Option<unsafe extern "C" fn()>,
    pub reserved6: Option<unsafe extern "C" fn()>,
    pub reserved7: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkLockButtonPrivate(c_void);

#[repr(C)]
pub struct GtkMenuAccessibleClass {
    pub parent_class: GtkMenuShellAccessibleClass,
}

#[repr(C)]
pub struct GtkMenuAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkMenuBarClass {
    pub parent_class: GtkMenuShellClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMenuBarPrivate(c_void);

#[repr(C)]
pub struct GtkMenuButtonAccessibleClass {
    pub parent_class: GtkToggleButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkMenuButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkMenuButtonClass {
    pub parent_class: GtkToggleButtonClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMenuButtonPrivate(c_void);

#[repr(C)]
pub struct GtkMenuClass {
    pub parent_class: GtkMenuShellClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMenuItemAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkMenuItemAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkMenuItemClass {
    pub parent_class: GtkBinClass,
    _truncated_record_marker: c_void,
    //hide_on_activate: guint: 1,
    //activate: fn,
    //activate_item: fn,
    //toggle_size_request: fn,
    //toggle_size_allocate: fn,
    //set_label: fn,
    //get_label: fn,
    //select: fn,
    //deselect: fn,
    //_gtk_reserved1: fn,
    //_gtk_reserved2: fn,
    //_gtk_reserved3: fn,
    //_gtk_reserved4: fn,
}

#[repr(C)]
pub struct GtkMenuItemPrivate(c_void);

#[repr(C)]
pub struct GtkMenuPrivate(c_void);

#[repr(C)]
pub struct GtkMenuShellAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkMenuShellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkMenuShellClass {
    pub parent_class: GtkContainerClass,
    _truncated_record_marker: c_void,
    //submenu_placement: guint: 1,
    //deactivate: fn,
    //selection_done: fn,
    //move_current: fn,
    //activate_current: fn,
    //cancel: fn,
    //select_item: fn,
    //insert: fn,
    //get_popup_delay: fn,
    //move_selected: fn,
    //_gtk_reserved1: fn,
    //_gtk_reserved2: fn,
    //_gtk_reserved3: fn,
    //_gtk_reserved4: fn,
}

#[repr(C)]
pub struct GtkMenuShellPrivate(c_void);

#[repr(C)]
pub struct GtkMenuToolButtonClass {
    pub parent_class: GtkToolButtonClass,
    pub show_menu: Option<unsafe extern "C" fn(*mut GtkMenuToolButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMenuToolButtonPrivate(c_void);

#[repr(C)]
pub struct GtkMessageDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMessageDialogPrivate(c_void);

#[repr(C)]
pub struct GtkMiscClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMiscPrivate(c_void);

#[repr(C)]
pub struct GtkMountOperationClass {
    pub parent_class: gio::GMountOperationClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkMountOperationPrivate(c_void);

#[repr(C)]
pub struct GtkNotebookAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkNotebookAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkNotebookClass {
    pub parent_class: GtkContainerClass,
    pub switch_page: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, c_uint)>,
    pub select_page: Option<unsafe extern "C" fn(*mut GtkNotebook, gboolean) -> gboolean>,
    pub focus_tab: Option<unsafe extern "C" fn(*mut GtkNotebook, GtkNotebookTab) -> gboolean>,
    pub change_current_page: Option<unsafe extern "C" fn(*mut GtkNotebook, c_int) -> gboolean>,
    pub move_focus_out: Option<unsafe extern "C" fn(*mut GtkNotebook, GtkDirectionType)>,
    pub reorder_tab: Option<unsafe extern "C" fn(*mut GtkNotebook, GtkDirectionType, gboolean) -> gboolean>,
    pub insert_page: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, *mut GtkWidget, *mut GtkWidget, c_int) -> c_int>,
    pub create_window: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, c_int, c_int) -> *mut GtkNotebook>,
    pub page_reordered: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, c_uint)>,
    pub page_removed: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, c_uint)>,
    pub page_added: Option<unsafe extern "C" fn(*mut GtkNotebook, *mut GtkWidget, c_uint)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkNotebookPageAccessibleClass {
    pub parent_class: atk::AtkObjectClass,
}

#[repr(C)]
pub struct GtkNotebookPageAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkNotebookPrivate(c_void);

#[repr(C)]
pub struct GtkNumerableIconClass {
    pub parent_class: gio::GEmblemedIconClass,
    pub padding: [gpointer; 16],
}

#[repr(C)]
pub struct GtkNumerableIconPrivate(c_void);

#[repr(C)]
pub struct GtkOffscreenWindowClass {
    pub parent_class: GtkWindowClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkOrientableIface {
    pub base_iface: gobject::GTypeInterface,
}

#[repr(C)]
pub struct GtkOverlayClass {
    pub parent_class: GtkBinClass,
    pub get_child_position: Option<unsafe extern "C" fn(*mut GtkOverlay, *mut GtkWidget, *mut GtkAllocation) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkOverlayPrivate(c_void);

#[repr(C)]
pub struct GtkPageRange {
    pub start: c_int,
    pub end: c_int,
}

#[repr(C)]
pub struct GtkPanedAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkPanedAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkPanedClass {
    pub parent_class: GtkContainerClass,
    pub cycle_child_focus: Option<unsafe extern "C" fn(*mut GtkPaned, gboolean) -> gboolean>,
    pub toggle_handle_focus: Option<unsafe extern "C" fn(*mut GtkPaned) -> gboolean>,
    pub move_handle: Option<unsafe extern "C" fn(*mut GtkPaned, GtkScrollType) -> gboolean>,
    pub cycle_handle_focus: Option<unsafe extern "C" fn(*mut GtkPaned, gboolean) -> gboolean>,
    pub accept_position: Option<unsafe extern "C" fn(*mut GtkPaned) -> gboolean>,
    pub cancel_position: Option<unsafe extern "C" fn(*mut GtkPaned) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkPanedPrivate(c_void);

#[repr(C)]
pub struct GtkPaperSize(c_void);

#[repr(C)]
pub struct GtkPlacesSidebarClass(c_void);

#[repr(C)]
pub struct GtkPlugClass {
    pub parent_class: GtkWindowClass,
    pub embedded: Option<unsafe extern "C" fn(*mut GtkPlug)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkPlugPrivate(c_void);

#[repr(C)]
pub struct GtkPopoverAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkPopoverClass {
    pub parent_class: GtkBinClass,
    pub closed: Option<unsafe extern "C" fn(*mut GtkPopover)>,
    reserved: [gpointer; 10],
}

#[repr(C)]
pub struct GtkPopoverMenuClass {
    pub parent_class: GtkPopoverClass,
    reserved: [gpointer; 10],
}

#[repr(C)]
pub struct GtkPopoverPrivate(c_void);

#[repr(C)]
pub struct GtkPrintOperationClass {
    pub parent_class: gobject::GObjectClass,
    pub done: Option<unsafe extern "C" fn(*mut GtkPrintOperation, GtkPrintOperationResult)>,
    pub begin_print: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintContext)>,
    pub paginate: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintContext) -> gboolean>,
    pub request_page_setup: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintContext, c_int, *mut GtkPageSetup)>,
    pub draw_page: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintContext, c_int)>,
    pub end_print: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintContext)>,
    pub status_changed: Option<unsafe extern "C" fn(*mut GtkPrintOperation)>,
    pub create_custom_widget: Option<unsafe extern "C" fn(*mut GtkPrintOperation) -> *mut GtkWidget>,
    pub custom_widget_apply: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkWidget)>,
    pub preview: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkPrintOperationPreview, *mut GtkPrintContext, *mut GtkWindow) -> gboolean>,
    pub update_custom_widget: Option<unsafe extern "C" fn(*mut GtkPrintOperation, *mut GtkWidget, *mut GtkPageSetup, *mut GtkPrintSettings)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkPrintOperationPreviewIface {
    pub g_iface: gobject::GTypeInterface,
    pub ready: Option<unsafe extern "C" fn(*mut GtkPrintOperationPreview, *mut GtkPrintContext)>,
    pub got_page_size: Option<unsafe extern "C" fn(*mut GtkPrintOperationPreview, *mut GtkPrintContext, *mut GtkPageSetup)>,
    pub render_page: Option<unsafe extern "C" fn(*mut GtkPrintOperationPreview, c_int)>,
    pub is_selected: Option<unsafe extern "C" fn(*mut GtkPrintOperationPreview, c_int) -> gboolean>,
    pub end_preview: Option<unsafe extern "C" fn(*mut GtkPrintOperationPreview)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkPrintOperationPrivate(c_void);

#[repr(C)]
pub struct GtkProgressBarAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkProgressBarAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkProgressBarClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkProgressBarPrivate(c_void);

#[repr(C)]
pub struct GtkRadioActionClass {
    pub parent_class: GtkToggleActionClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkRadioAction, *mut GtkRadioAction)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRadioActionEntry {
    pub name: *const c_char,
    pub stock_id: *const c_char,
    pub label: *const c_char,
    pub accelerator: *const c_char,
    pub tooltip: *const c_char,
    pub value: c_int,
}

#[repr(C)]
pub struct GtkRadioActionPrivate(c_void);

#[repr(C)]
pub struct GtkRadioButtonAccessibleClass {
    pub parent_class: GtkToggleButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkRadioButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkRadioButtonClass {
    pub parent_class: GtkCheckButtonClass,
    pub group_changed: Option<unsafe extern "C" fn(*mut GtkRadioButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRadioButtonPrivate(c_void);

#[repr(C)]
pub struct GtkRadioMenuItemAccessibleClass {
    pub parent_class: GtkCheckMenuItemAccessibleClass,
}

#[repr(C)]
pub struct GtkRadioMenuItemAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkRadioMenuItemClass {
    pub parent_class: GtkCheckMenuItemClass,
    pub group_changed: Option<unsafe extern "C" fn(*mut GtkRadioMenuItem)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRadioMenuItemPrivate(c_void);

#[repr(C)]
pub struct GtkRadioToolButtonClass {
    pub parent_class: GtkToggleToolButtonClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRangeAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkRangeAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkRangeClass {
    pub parent_class: GtkWidgetClass,
    pub slider_detail: *mut c_char,
    pub stepper_detail: *mut c_char,
    pub value_changed: Option<unsafe extern "C" fn(*mut GtkRange)>,
    pub adjust_bounds: Option<unsafe extern "C" fn(*mut GtkRange, c_double)>,
    pub move_slider: Option<unsafe extern "C" fn(*mut GtkRange, GtkScrollType)>,
    pub get_range_border: Option<unsafe extern "C" fn(*mut GtkRange, *mut GtkBorder)>,
    pub change_value: Option<unsafe extern "C" fn(*mut GtkRange, GtkScrollType, c_double) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRangePrivate(c_void);

#[repr(C)]
pub struct GtkRcContext(c_void);

#[repr(C)]
pub struct GtkRcProperty {
    pub type_name: glib::GQuark,
    pub property_name: glib::GQuark,
    pub origin: *mut c_char,
    pub value: gobject::GValue,
}

#[repr(C)]
pub struct GtkRcStyleClass {
    pub parent_class: gobject::GObjectClass,
    pub create_rc_style: Option<unsafe extern "C" fn(*mut GtkRcStyle) -> *mut GtkRcStyle>,
    pub parse: Option<unsafe extern "C" fn(*mut GtkRcStyle, *mut GtkSettings, *mut glib::GScanner) -> c_uint>,
    pub merge: Option<unsafe extern "C" fn(*mut GtkRcStyle, *mut GtkRcStyle)>,
    pub create_style: Option<unsafe extern "C" fn(*mut GtkRcStyle) -> *mut GtkStyle>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentActionClass {
    pub parent_class: GtkActionClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentActionPrivate(c_void);

#[repr(C)]
pub struct GtkRecentChooserDialogClass {
    pub parent_class: GtkDialogClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentChooserDialogPrivate(c_void);

#[repr(C)]
pub struct GtkRecentChooserIface {
    base_iface: gobject::GTypeInterface,
    pub set_current_uri: Option<unsafe extern "C" fn(*mut GtkRecentChooser, *const c_char, *mut *mut glib::GError) -> gboolean>,
    pub get_current_uri: Option<unsafe extern "C" fn(*mut GtkRecentChooser) -> *mut c_char>,
    pub select_uri: Option<unsafe extern "C" fn(*mut GtkRecentChooser, *const c_char, *mut *mut glib::GError) -> gboolean>,
    pub unselect_uri: Option<unsafe extern "C" fn(*mut GtkRecentChooser, *const c_char)>,
    pub select_all: Option<unsafe extern "C" fn(*mut GtkRecentChooser)>,
    pub unselect_all: Option<unsafe extern "C" fn(*mut GtkRecentChooser)>,
    pub get_items: Option<unsafe extern "C" fn(*mut GtkRecentChooser) -> *mut glib::GList>,
    pub get_recent_manager: Option<unsafe extern "C" fn(*mut GtkRecentChooser) -> *mut GtkRecentManager>,
    pub add_filter: Option<unsafe extern "C" fn(*mut GtkRecentChooser, *mut GtkRecentFilter)>,
    pub remove_filter: Option<unsafe extern "C" fn(*mut GtkRecentChooser, *mut GtkRecentFilter)>,
    pub list_filters: Option<unsafe extern "C" fn(*mut GtkRecentChooser) -> *mut glib::GSList>,
    pub set_sort_func: Option<unsafe extern "C" fn(*mut GtkRecentChooser, GtkRecentSortFunc, gpointer, glib::GDestroyNotify)>,
    pub item_activated: Option<unsafe extern "C" fn(*mut GtkRecentChooser)>,
    pub selection_changed: Option<unsafe extern "C" fn(*mut GtkRecentChooser)>,
}

#[repr(C)]
pub struct GtkRecentChooserMenuClass {
    pub parent_class: GtkMenuClass,
    pub gtk_recent1: Option<unsafe extern "C" fn()>,
    pub gtk_recent2: Option<unsafe extern "C" fn()>,
    pub gtk_recent3: Option<unsafe extern "C" fn()>,
    pub gtk_recent4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentChooserMenuPrivate(c_void);

#[repr(C)]
pub struct GtkRecentChooserWidgetClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentChooserWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkRecentData {
    pub display_name: *mut c_char,
    pub description: *mut c_char,
    pub mime_type: *mut c_char,
    pub app_name: *mut c_char,
    pub app_exec: *mut c_char,
    pub groups: *mut *mut c_char,
    pub is_private: gboolean,
}

#[repr(C)]
pub struct GtkRecentFilterInfo {
    pub contains: GtkRecentFilterFlags,
    pub uri: *const c_char,
    pub display_name: *const c_char,
    pub mime_type: *const c_char,
    pub applications: *mut *mut c_char,
    pub groups: *mut *mut c_char,
    pub age: c_int,
}

#[repr(C)]
pub struct GtkRecentInfo(c_void);

#[repr(C)]
pub struct GtkRecentManagerClass {
    parent_class: gobject::GObjectClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkRecentManager)>,
    pub _gtk_recent1: Option<unsafe extern "C" fn()>,
    pub _gtk_recent2: Option<unsafe extern "C" fn()>,
    pub _gtk_recent3: Option<unsafe extern "C" fn()>,
    pub _gtk_recent4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkRecentManagerPrivate(c_void);

#[repr(C)]
pub struct GtkRendererCellAccessibleClass {
    pub parent_class: GtkCellAccessibleClass,
}

#[repr(C)]
pub struct GtkRendererCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkRequestedSize {
    pub data: gpointer,
    pub minimum_size: c_int,
    pub natural_size: c_int,
}

#[repr(C)]
pub struct GtkRequisition {
    pub width: c_int,
    pub height: c_int,
}

#[repr(C)]
pub struct GtkRevealerClass {
    pub parent_class: GtkBinClass,
}

#[repr(C)]
pub struct GtkScaleAccessibleClass {
    pub parent_class: GtkRangeAccessibleClass,
}

#[repr(C)]
pub struct GtkScaleAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkScaleButtonAccessibleClass {
    pub parent_class: GtkButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkScaleButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkScaleButtonClass {
    pub parent_class: GtkButtonClass,
    pub value_changed: Option<unsafe extern "C" fn(*mut GtkScaleButton, c_double)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkScaleButtonPrivate(c_void);

#[repr(C)]
pub struct GtkScaleClass {
    pub parent_class: GtkRangeClass,
    pub format_value: Option<unsafe extern "C" fn(*mut GtkScale, c_double) -> *mut c_char>,
    pub draw_value: Option<unsafe extern "C" fn(*mut GtkScale)>,
    pub get_layout_offsets: Option<unsafe extern "C" fn(*mut GtkScale, *mut c_int, *mut c_int)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkScalePrivate(c_void);

#[repr(C)]
pub struct GtkScrollableInterface {
    pub base_iface: gobject::GTypeInterface,
    pub get_border: Option<unsafe extern "C" fn(*mut GtkScrollable, *mut GtkBorder) -> gboolean>,
}

#[repr(C)]
pub struct GtkScrollbarClass {
    pub parent_class: GtkRangeClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkScrolledWindowAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkScrolledWindowAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkScrolledWindowClass {
    pub parent_class: GtkBinClass,
    pub scrollbar_spacing: c_int,
    pub scroll_child: Option<unsafe extern "C" fn(*mut GtkScrolledWindow, GtkScrollType, gboolean) -> gboolean>,
    pub move_focus_out: Option<unsafe extern "C" fn(*mut GtkScrolledWindow, GtkDirectionType)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkScrolledWindowPrivate(c_void);

#[repr(C)]
pub struct GtkSearchBarClass {
    pub parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSearchEntryClass {
    pub parent_class: GtkEntryClass,
    pub search_changed: Option<unsafe extern "C" fn(*mut GtkSearchEntry)>,
    pub next_match: Option<unsafe extern "C" fn(*mut GtkSearchEntry)>,
    pub previous_match: Option<unsafe extern "C" fn(*mut GtkSearchEntry)>,
    pub stop_search: Option<unsafe extern "C" fn(*mut GtkSearchEntry)>,
}

#[repr(C)]
pub struct GtkSelectionData(c_void);

#[repr(C)]
pub struct GtkSeparatorClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSeparatorMenuItemClass {
    pub parent_class: GtkMenuItemClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSeparatorPrivate(c_void);

#[repr(C)]
pub struct GtkSeparatorToolItemClass {
    pub parent_class: GtkToolItemClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSeparatorToolItemPrivate(c_void);

#[repr(C)]
pub struct GtkSettingsClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSettingsPrivate(c_void);

#[repr(C)]
pub struct GtkSettingsValue {
    pub origin: *mut c_char,
    pub value: gobject::GValue,
}

#[repr(C)]
pub struct GtkSizeGroupClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSizeGroupPrivate(c_void);

#[repr(C)]
pub struct GtkSocketClass {
    pub parent_class: GtkContainerClass,
    pub plug_added: Option<unsafe extern "C" fn(*mut GtkSocket)>,
    pub plug_removed: Option<unsafe extern "C" fn(*mut GtkSocket) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSocketPrivate(c_void);

#[repr(C)]
pub struct GtkSpinButtonAccessibleClass {
    pub parent_class: GtkEntryAccessibleClass,
}

#[repr(C)]
pub struct GtkSpinButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkSpinButtonClass {
    pub parent_class: GtkEntryClass,
    pub input: Option<unsafe extern "C" fn(*mut GtkSpinButton, *mut c_double) -> c_int>,
    pub output: Option<unsafe extern "C" fn(*mut GtkSpinButton) -> c_int>,
    pub value_changed: Option<unsafe extern "C" fn(*mut GtkSpinButton)>,
    pub change_value: Option<unsafe extern "C" fn(*mut GtkSpinButton, GtkScrollType)>,
    pub wrapped: Option<unsafe extern "C" fn(*mut GtkSpinButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSpinButtonPrivate(c_void);

#[repr(C)]
pub struct GtkSpinnerAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkSpinnerAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkSpinnerClass {
    pub parent_class: GtkWidgetClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSpinnerPrivate(c_void);

#[repr(C)]
pub struct GtkStackClass {
    pub parent_class: GtkContainerClass,
}

#[repr(C)]
pub struct GtkStackSidebarClass {
    pub parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStackSidebarPrivate(c_void);

#[repr(C)]
pub struct GtkStackSwitcherClass {
    pub parent_class: GtkBoxClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStatusIconClass {
    pub parent_class: gobject::GObjectClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkStatusIcon)>,
    pub popup_menu: Option<unsafe extern "C" fn(*mut GtkStatusIcon, c_uint, u32)>,
    pub size_changed: Option<unsafe extern "C" fn(*mut GtkStatusIcon, c_int) -> gboolean>,
    pub button_press_event: Option<unsafe extern "C" fn(*mut GtkStatusIcon, *mut gdk::GdkEventButton) -> gboolean>,
    pub button_release_event: Option<unsafe extern "C" fn(*mut GtkStatusIcon, *mut gdk::GdkEventButton) -> gboolean>,
    pub scroll_event: Option<unsafe extern "C" fn(*mut GtkStatusIcon, *mut gdk::GdkEventScroll) -> gboolean>,
    pub query_tooltip: Option<unsafe extern "C" fn(*mut GtkStatusIcon, c_int, c_int, gboolean, *mut GtkTooltip) -> gboolean>,
    pub __gtk_reserved1: *mut c_void,
    pub __gtk_reserved2: *mut c_void,
    pub __gtk_reserved3: *mut c_void,
    pub __gtk_reserved4: *mut c_void,
}

#[repr(C)]
pub struct GtkStatusIconPrivate(c_void);

#[repr(C)]
pub struct GtkStatusbarAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkStatusbarAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkStatusbarClass {
    pub parent_class: GtkBoxClass,
    pub reserved: gpointer,
    pub text_pushed: Option<unsafe extern "C" fn(*mut GtkStatusbar, c_uint, *const c_char)>,
    pub text_popped: Option<unsafe extern "C" fn(*mut GtkStatusbar, c_uint, *const c_char)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStatusbarPrivate(c_void);

#[repr(C)]
pub struct GtkStockItem {
    pub stock_id: *mut c_char,
    pub label: *mut c_char,
    pub modifier: gdk::GdkModifierType,
    pub keyval: c_uint,
    pub translation_domain: *mut c_char,
}

#[repr(C)]
pub struct GtkStyleClass {
    pub parent_class: gobject::GObjectClass,
    pub realize: Option<unsafe extern "C" fn(*mut GtkStyle)>,
    pub unrealize: Option<unsafe extern "C" fn(*mut GtkStyle)>,
    pub copy: Option<unsafe extern "C" fn(*mut GtkStyle, *mut GtkStyle)>,
    pub clone: Option<unsafe extern "C" fn(*mut GtkStyle) -> *mut GtkStyle>,
    pub init_from_rc: Option<unsafe extern "C" fn(*mut GtkStyle, *mut GtkRcStyle)>,
    pub set_background: Option<unsafe extern "C" fn(*mut GtkStyle, *mut gdk::GdkWindow, GtkStateType)>,
    pub render_icon: Option<unsafe extern "C" fn(*mut GtkStyle, *const GtkIconSource, GtkTextDirection, GtkStateType, c_int, *mut GtkWidget, *const c_char) -> *mut gdk_pixbuf::GdkPixbuf>,
    pub draw_hline: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, c_int, c_int, c_int)>,
    pub draw_vline: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, c_int, c_int, c_int)>,
    pub draw_shadow: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_arrow: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, GtkArrowType, gboolean, c_int, c_int, c_int, c_int)>,
    pub draw_diamond: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_box: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_flat_box: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_check: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_option: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_tab: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_shadow_gap: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int, GtkPositionType, c_int, c_int)>,
    pub draw_box_gap: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int, GtkPositionType, c_int, c_int)>,
    pub draw_extension: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int, GtkPositionType)>,
    pub draw_focus: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int)>,
    pub draw_slider: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int, GtkOrientation)>,
    pub draw_handle: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, GtkShadowType, *mut GtkWidget, *const c_char, c_int, c_int, c_int, c_int, GtkOrientation)>,
    pub draw_expander: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, c_int, c_int, GtkExpanderStyle)>,
    pub draw_layout: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, gboolean, *mut GtkWidget, *const c_char, c_int, c_int, *mut pango::PangoLayout)>,
    pub draw_resize_grip: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, gdk::GdkWindowEdge, c_int, c_int, c_int, c_int)>,
    pub draw_spinner: Option<unsafe extern "C" fn(*mut GtkStyle, *mut cairo::cairo_t, GtkStateType, *mut GtkWidget, *const c_char, c_uint, c_int, c_int, c_int, c_int)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved9: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved10: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved11: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStyleContextClass {
    pub parent_class: gobject::GObjectClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkStyleContext)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStyleContextPrivate(c_void);

#[repr(C)]
pub struct GtkStylePropertiesClass {
    parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkStylePropertiesPrivate(c_void);

#[repr(C)]
pub struct GtkStyleProviderIface {
    g_iface: gobject::GTypeInterface,
    pub get_style: Option<unsafe extern "C" fn(*mut GtkStyleProvider, *mut GtkWidgetPath) -> *mut GtkStyleProperties>,
    pub get_style_property: Option<unsafe extern "C" fn(*mut GtkStyleProvider, *mut GtkWidgetPath, GtkStateFlags, *mut gobject::GParamSpec, *mut gobject::GValue) -> gboolean>,
    pub get_icon_factory: Option<unsafe extern "C" fn(*mut GtkStyleProvider, *mut GtkWidgetPath) -> *mut GtkIconFactory>,
}

#[repr(C)]
pub struct GtkSwitchAccessibleClass {
    pub parent_class: GtkWidgetAccessibleClass,
}

#[repr(C)]
pub struct GtkSwitchAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkSwitchClass {
    pub parent_class: GtkWidgetClass,
    pub activate: Option<unsafe extern "C" fn(*mut GtkSwitch)>,
    pub state_set: Option<unsafe extern "C" fn(*mut GtkSwitch, gboolean) -> gboolean>,
    pub _switch_padding_1: Option<unsafe extern "C" fn()>,
    pub _switch_padding_2: Option<unsafe extern "C" fn()>,
    pub _switch_padding_3: Option<unsafe extern "C" fn()>,
    pub _switch_padding_4: Option<unsafe extern "C" fn()>,
    pub _switch_padding_5: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkSwitchPrivate(c_void);

#[repr(C)]
pub struct GtkSymbolicColor(c_void);

#[repr(C)]
pub struct GtkTableChild {
    pub widget: *mut GtkWidget,
    pub left_attach: u16,
    pub right_attach: u16,
    pub top_attach: u16,
    pub bottom_attach: u16,
    pub xpadding: u16,
    pub ypadding: u16,
    _truncated_record_marker: c_void,
    //xexpand: guint: 1,
    //yexpand: guint: 1,
    //xshrink: guint: 1,
    //yshrink: guint: 1,
    //xfill: guint: 1,
    //yfill: guint: 1,
}

#[repr(C)]
pub struct GtkTableClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTablePrivate(c_void);

#[repr(C)]
pub struct GtkTableRowCol {
    pub requisition: u16,
    pub allocation: u16,
    pub spacing: u16,
    _truncated_record_marker: c_void,
    //need_expand: guint: 1,
    //need_shrink: guint: 1,
    //expand: guint: 1,
    //shrink: guint: 1,
    //empty: guint: 1,
}

#[repr(C)]
pub struct GtkTargetEntry {
    pub target: *mut c_char,
    pub flags: c_uint,
    pub info: c_uint,
}

#[repr(C)]
pub struct GtkTargetList(c_void);

#[repr(C)]
pub struct GtkTargetPair {
    pub target: gdk::GdkAtom,
    pub flags: c_uint,
    pub info: c_uint,
}

#[repr(C)]
pub struct GtkTearoffMenuItemClass {
    pub parent_class: GtkMenuItemClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTearoffMenuItemPrivate(c_void);

#[repr(C)]
pub struct GtkTextAppearance {
    pub bg_color: gdk::GdkColor,
    pub fg_color: gdk::GdkColor,
    pub rise: c_int,
    _truncated_record_marker: c_void,
    //underline: guint: 4,
    //strikethrough: guint: 1,
    //draw_bg: guint: 1,
    //inside_selection: guint: 1,
    //is_text: guint: 1,
    //union,
}

#[repr(C)]
pub struct GtkTextAttributes {
    refcount: c_uint,
    pub appearance: GtkTextAppearance,
    pub justification: GtkJustification,
    pub direction: GtkTextDirection,
    pub font: *mut pango::PangoFontDescription,
    pub font_scale: c_double,
    pub left_margin: c_int,
    pub right_margin: c_int,
    pub indent: c_int,
    pub pixels_above_lines: c_int,
    pub pixels_below_lines: c_int,
    pub pixels_inside_wrap: c_int,
    pub tabs: *mut pango::PangoTabArray,
    pub wrap_mode: GtkWrapMode,
    pub language: *mut pango::PangoLanguage,
    pg_bg_color: *mut gdk::GdkColor,
    _truncated_record_marker: c_void,
    //invisible: guint: 1,
    //bg_full_height: guint: 1,
    //editable: guint: 1,
    //no_fallback: guint: 1,
    //pg_bg_rgba: GdkRGBA*,
    //letter_spacing: gint,
    //padding: guint,
}

#[repr(C)]
pub struct GtkTextBTree(c_void);

#[repr(C)]
pub struct GtkTextBufferClass {
    pub parent_class: gobject::GObjectClass,
    pub insert_text: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextIter, *const c_char, c_int)>,
    pub insert_pixbuf: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextIter, *mut gdk_pixbuf::GdkPixbuf)>,
    pub insert_child_anchor: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextIter, *mut GtkTextChildAnchor)>,
    pub delete_range: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextIter, *mut GtkTextIter)>,
    pub changed: Option<unsafe extern "C" fn(*mut GtkTextBuffer)>,
    pub modified_changed: Option<unsafe extern "C" fn(*mut GtkTextBuffer)>,
    pub mark_set: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *const GtkTextIter, *mut GtkTextMark)>,
    pub mark_deleted: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextMark)>,
    pub apply_tag: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextTag, *const GtkTextIter, *const GtkTextIter)>,
    pub remove_tag: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkTextTag, *const GtkTextIter, *const GtkTextIter)>,
    pub begin_user_action: Option<unsafe extern "C" fn(*mut GtkTextBuffer)>,
    pub end_user_action: Option<unsafe extern "C" fn(*mut GtkTextBuffer)>,
    pub paste_done: Option<unsafe extern "C" fn(*mut GtkTextBuffer, *mut GtkClipboard)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextBufferPrivate(c_void);

#[repr(C)]
pub struct GtkTextCellAccessibleClass {
    pub parent_class: GtkRendererCellAccessibleClass,
}

#[repr(C)]
pub struct GtkTextCellAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkTextChildAnchorClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextIter {
    dummy1: gpointer,
    dummy2: gpointer,
    dummy3: c_int,
    dummy4: c_int,
    dummy5: c_int,
    dummy6: c_int,
    dummy7: c_int,
    dummy8: c_int,
    dummy9: gpointer,
    dummy10: gpointer,
    dummy11: c_int,
    dummy12: c_int,
    dummy13: c_int,
    dummy14: gpointer,
}

#[repr(C)]
pub struct GtkTextMarkClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextTagClass {
    pub parent_class: gobject::GObjectClass,
    pub event: Option<unsafe extern "C" fn(*mut GtkTextTag, *mut gobject::GObject, *mut gdk::GdkEvent, *const GtkTextIter) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextTagPrivate(c_void);

#[repr(C)]
pub struct GtkTextTagTableClass {
    pub parent_class: gobject::GObjectClass,
    pub tag_changed: Option<unsafe extern "C" fn(*mut GtkTextTagTable, *mut GtkTextTag, gboolean)>,
    pub tag_added: Option<unsafe extern "C" fn(*mut GtkTextTagTable, *mut GtkTextTag)>,
    pub tag_removed: Option<unsafe extern "C" fn(*mut GtkTextTagTable, *mut GtkTextTag)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextTagTablePrivate(c_void);

#[repr(C)]
pub struct GtkTextViewAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkTextViewAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkTextViewClass {
    pub parent_class: GtkContainerClass,
    pub populate_popup: Option<unsafe extern "C" fn(*mut GtkTextView, *mut GtkWidget)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkTextView, GtkMovementStep, c_int, gboolean)>,
    pub set_anchor: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub insert_at_cursor: Option<unsafe extern "C" fn(*mut GtkTextView, *const c_char)>,
    pub delete_from_cursor: Option<unsafe extern "C" fn(*mut GtkTextView, GtkDeleteType, c_int)>,
    pub backspace: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub cut_clipboard: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub copy_clipboard: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub paste_clipboard: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub toggle_overwrite: Option<unsafe extern "C" fn(*mut GtkTextView)>,
    pub create_buffer: Option<unsafe extern "C" fn(*mut GtkTextView) -> *mut GtkTextBuffer>,
    pub draw_layer: Option<unsafe extern "C" fn(*mut GtkTextView, GtkTextViewLayer, *mut cairo::cairo_t)>,
    pub extend_selection: Option<unsafe extern "C" fn(*mut GtkTextView, GtkTextExtendSelection, *const GtkTextIter, *mut GtkTextIter, *mut GtkTextIter) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTextViewPrivate(c_void);

#[repr(C)]
pub struct GtkThemeEngine(c_void);

#[repr(C)]
pub struct GtkThemingEngineClass {
    pub parent_class: gobject::GObjectClass,
    pub render_line: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_background: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_frame: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_frame_gap: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double, GtkPositionType, c_double, c_double)>,
    pub render_extension: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double, GtkPositionType)>,
    pub render_check: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_option: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_arrow: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_expander: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_focus: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_layout: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, *mut pango::PangoLayout)>,
    pub render_slider: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double, GtkOrientation)>,
    pub render_handle: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_activity: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, c_double, c_double, c_double, c_double)>,
    pub render_icon_pixbuf: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *const GtkIconSource, GtkIconSize) -> *mut gdk_pixbuf::GdkPixbuf>,
    pub render_icon: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, *mut gdk_pixbuf::GdkPixbuf, c_double, c_double)>,
    pub render_icon_surface: Option<unsafe extern "C" fn(*mut GtkThemingEngine, *mut cairo::cairo_t, *mut cairo::cairo_surface_t, c_double, c_double)>,
    padding: [gpointer; 14],
}

#[repr(C)]
pub struct GtkThemingEnginePrivate(c_void);

#[repr(C)]
pub struct GtkToggleActionClass {
    pub parent_class: GtkActionClass,
    pub toggled: Option<unsafe extern "C" fn(*mut GtkToggleAction)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToggleActionEntry {
    pub name: *const c_char,
    pub stock_id: *const c_char,
    pub label: *const c_char,
    pub accelerator: *const c_char,
    pub tooltip: *const c_char,
    pub callback: gobject::GCallback,
    pub is_active: gboolean,
}

#[repr(C)]
pub struct GtkToggleActionPrivate(c_void);

#[repr(C)]
pub struct GtkToggleButtonAccessibleClass {
    pub parent_class: GtkButtonAccessibleClass,
}

#[repr(C)]
pub struct GtkToggleButtonAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkToggleButtonClass {
    pub parent_class: GtkButtonClass,
    pub toggled: Option<unsafe extern "C" fn(*mut GtkToggleButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToggleButtonPrivate(c_void);

#[repr(C)]
pub struct GtkToggleToolButtonClass {
    pub parent_class: GtkToolButtonClass,
    pub toggled: Option<unsafe extern "C" fn(*mut GtkToggleToolButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToggleToolButtonPrivate(c_void);

#[repr(C)]
pub struct GtkToolButtonClass {
    pub parent_class: GtkToolItemClass,
    pub button_type: GType,
    pub clicked: Option<unsafe extern "C" fn(*mut GtkToolButton)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToolButtonPrivate(c_void);

#[repr(C)]
pub struct GtkToolItemClass {
    pub parent_class: GtkBinClass,
    pub create_menu_proxy: Option<unsafe extern "C" fn(*mut GtkToolItem) -> gboolean>,
    pub toolbar_reconfigured: Option<unsafe extern "C" fn(*mut GtkToolItem)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToolItemGroupClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToolItemGroupPrivate(c_void);

#[repr(C)]
pub struct GtkToolItemPrivate(c_void);

#[repr(C)]
pub struct GtkToolPaletteClass {
    pub parent_class: GtkContainerClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToolPalettePrivate(c_void);

#[repr(C)]
pub struct GtkToolShellIface {
    g_iface: gobject::GTypeInterface,
    pub get_icon_size: Option<unsafe extern "C" fn(*mut GtkToolShell) -> GtkIconSize>,
    pub get_orientation: Option<unsafe extern "C" fn(*mut GtkToolShell) -> GtkOrientation>,
    pub get_style: Option<unsafe extern "C" fn(*mut GtkToolShell) -> GtkToolbarStyle>,
    pub get_relief_style: Option<unsafe extern "C" fn(*mut GtkToolShell) -> GtkReliefStyle>,
    pub rebuild_menu: Option<unsafe extern "C" fn(*mut GtkToolShell)>,
    pub get_text_orientation: Option<unsafe extern "C" fn(*mut GtkToolShell) -> GtkOrientation>,
    pub get_text_alignment: Option<unsafe extern "C" fn(*mut GtkToolShell) -> c_float>,
    pub get_ellipsize_mode: Option<unsafe extern "C" fn(*mut GtkToolShell) -> pango::PangoEllipsizeMode>,
    pub get_text_size_group: Option<unsafe extern "C" fn(*mut GtkToolShell) -> *mut GtkSizeGroup>,
}

#[repr(C)]
pub struct GtkToolbarClass {
    pub parent_class: GtkContainerClass,
    pub orientation_changed: Option<unsafe extern "C" fn(*mut GtkToolbar, GtkOrientation)>,
    pub style_changed: Option<unsafe extern "C" fn(*mut GtkToolbar, GtkToolbarStyle)>,
    pub popup_context_menu: Option<unsafe extern "C" fn(*mut GtkToolbar, c_int, c_int, c_int) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkToolbarPrivate(c_void);

#[repr(C)]
pub struct GtkToplevelAccessibleClass {
    pub parent_class: atk::AtkObjectClass,
}

#[repr(C)]
pub struct GtkToplevelAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkTreeDragDestIface {
    g_iface: gobject::GTypeInterface,
    pub drag_data_received: Option<unsafe extern "C" fn(*mut GtkTreeDragDest, *mut GtkTreePath, *mut GtkSelectionData) -> gboolean>,
    pub row_drop_possible: Option<unsafe extern "C" fn(*mut GtkTreeDragDest, *mut GtkTreePath, *mut GtkSelectionData) -> gboolean>,
}

#[repr(C)]
pub struct GtkTreeDragSourceIface {
    g_iface: gobject::GTypeInterface,
    pub row_draggable: Option<unsafe extern "C" fn(*mut GtkTreeDragSource, *mut GtkTreePath) -> gboolean>,
    pub drag_data_get: Option<unsafe extern "C" fn(*mut GtkTreeDragSource, *mut GtkTreePath, *mut GtkSelectionData) -> gboolean>,
    pub drag_data_delete: Option<unsafe extern "C" fn(*mut GtkTreeDragSource, *mut GtkTreePath) -> gboolean>,
}

#[repr(C)]
pub struct GtkTreeIter {
    pub stamp: c_int,
    pub user_data: gpointer,
    pub user_data2: gpointer,
    pub user_data3: gpointer,
}

#[repr(C)]
pub struct GtkTreeModelFilterClass {
    pub parent_class: gobject::GObjectClass,
    pub visible: Option<unsafe extern "C" fn(*mut GtkTreeModelFilter, *mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub modify: Option<unsafe extern "C" fn(*mut GtkTreeModelFilter, *mut GtkTreeModel, *mut GtkTreeIter, *mut gobject::GValue, c_int)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeModelFilterPrivate(c_void);

#[repr(C)]
pub struct GtkTreeModelIface {
    g_iface: gobject::GTypeInterface,
    pub row_changed: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter)>,
    pub row_inserted: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter)>,
    pub row_has_child_toggled: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter)>,
    pub row_deleted: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath)>,
    pub rows_reordered: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreePath, *mut GtkTreeIter, *mut c_int)>,
    pub get_flags: Option<unsafe extern "C" fn(*mut GtkTreeModel) -> GtkTreeModelFlags>,
    pub get_n_columns: Option<unsafe extern "C" fn(*mut GtkTreeModel) -> c_int>,
    pub get_column_type: Option<unsafe extern "C" fn(*mut GtkTreeModel, c_int) -> GType>,
    pub get_iter: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut GtkTreePath) -> gboolean>,
    pub get_path: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter) -> *mut GtkTreePath>,
    pub get_value: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, c_int, *mut gobject::GValue)>,
    pub iter_next: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub iter_previous: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub iter_children: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut GtkTreeIter) -> gboolean>,
    pub iter_has_child: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter) -> gboolean>,
    pub iter_n_children: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter) -> c_int>,
    pub iter_nth_child: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut GtkTreeIter, c_int) -> gboolean>,
    pub iter_parent: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter, *mut GtkTreeIter) -> gboolean>,
    pub ref_node: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter)>,
    pub unref_node: Option<unsafe extern "C" fn(*mut GtkTreeModel, *mut GtkTreeIter)>,
}

#[repr(C)]
pub struct GtkTreeModelSortClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeModelSortPrivate(c_void);

#[repr(C)]
pub struct GtkTreePath(c_void);

#[repr(C)]
pub struct GtkTreeRowReference(c_void);

#[repr(C)]
pub struct GtkTreeSelectionClass {
    pub parent_class: gobject::GObjectClass,
    pub changed: Option<unsafe extern "C" fn(*mut GtkTreeSelection)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeSelectionPrivate(c_void);

#[repr(C)]
pub struct GtkTreeSortableIface {
    g_iface: gobject::GTypeInterface,
    pub sort_column_changed: Option<unsafe extern "C" fn(*mut GtkTreeSortable)>,
    pub get_sort_column_id: Option<unsafe extern "C" fn(*mut GtkTreeSortable, *mut c_int, *mut GtkSortType) -> gboolean>,
    pub set_sort_column_id: Option<unsafe extern "C" fn(*mut GtkTreeSortable, c_int, GtkSortType)>,
    pub set_sort_func: Option<unsafe extern "C" fn(*mut GtkTreeSortable, c_int, GtkTreeIterCompareFunc, gpointer, glib::GDestroyNotify)>,
    pub set_default_sort_func: Option<unsafe extern "C" fn(*mut GtkTreeSortable, GtkTreeIterCompareFunc, gpointer, glib::GDestroyNotify)>,
    pub has_default_sort_func: Option<unsafe extern "C" fn(*mut GtkTreeSortable) -> gboolean>,
}

#[repr(C)]
pub struct GtkTreeStoreClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeStorePrivate(c_void);

#[repr(C)]
pub struct GtkTreeViewAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkTreeViewAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkTreeViewClass {
    pub parent_class: GtkContainerClass,
    pub row_activated: Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreePath, *mut GtkTreeViewColumn)>,
    pub test_expand_row: Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreeIter, *mut GtkTreePath) -> gboolean>,
    pub test_collapse_row: Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreeIter, *mut GtkTreePath) -> gboolean>,
    pub row_expanded: Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreeIter, *mut GtkTreePath)>,
    pub row_collapsed: Option<unsafe extern "C" fn(*mut GtkTreeView, *mut GtkTreeIter, *mut GtkTreePath)>,
    pub columns_changed: Option<unsafe extern "C" fn(*mut GtkTreeView)>,
    pub cursor_changed: Option<unsafe extern "C" fn(*mut GtkTreeView)>,
    pub move_cursor: Option<unsafe extern "C" fn(*mut GtkTreeView, GtkMovementStep, c_int) -> gboolean>,
    pub select_all: Option<unsafe extern "C" fn(*mut GtkTreeView) -> gboolean>,
    pub unselect_all: Option<unsafe extern "C" fn(*mut GtkTreeView) -> gboolean>,
    pub select_cursor_row: Option<unsafe extern "C" fn(*mut GtkTreeView, gboolean) -> gboolean>,
    pub toggle_cursor_row: Option<unsafe extern "C" fn(*mut GtkTreeView) -> gboolean>,
    pub expand_collapse_cursor_row: Option<unsafe extern "C" fn(*mut GtkTreeView, gboolean, gboolean, gboolean) -> gboolean>,
    pub select_cursor_parent: Option<unsafe extern "C" fn(*mut GtkTreeView) -> gboolean>,
    pub start_interactive_search: Option<unsafe extern "C" fn(*mut GtkTreeView) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved5: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved8: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeViewColumnClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
    pub clicked: Option<unsafe extern "C" fn(*mut GtkTreeViewColumn)>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkTreeViewColumnPrivate(c_void);

#[repr(C)]
pub struct GtkTreeViewPrivate(c_void);

#[repr(C)]
pub struct GtkUIManagerClass {
    pub parent_class: gobject::GObjectClass,
    pub add_widget: Option<unsafe extern "C" fn(*mut GtkUIManager, *mut GtkWidget)>,
    pub actions_changed: Option<unsafe extern "C" fn(*mut GtkUIManager)>,
    pub connect_proxy: Option<unsafe extern "C" fn(*mut GtkUIManager, *mut GtkAction, *mut GtkWidget)>,
    pub disconnect_proxy: Option<unsafe extern "C" fn(*mut GtkUIManager, *mut GtkAction, *mut GtkWidget)>,
    pub pre_activate: Option<unsafe extern "C" fn(*mut GtkUIManager, *mut GtkAction)>,
    pub post_activate: Option<unsafe extern "C" fn(*mut GtkUIManager, *mut GtkAction)>,
    pub get_widget: Option<unsafe extern "C" fn(*mut GtkUIManager, *const c_char) -> *mut GtkWidget>,
    pub get_action: Option<unsafe extern "C" fn(*mut GtkUIManager, *const c_char) -> *mut GtkAction>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkUIManagerPrivate(c_void);

#[repr(C)]
pub struct GtkVBoxClass {
    pub parent_class: GtkBoxClass,
}

#[repr(C)]
pub struct GtkVButtonBoxClass {
    pub parent_class: GtkButtonBoxClass,
}

#[repr(C)]
pub struct GtkVPanedClass {
    pub parent_class: GtkPanedClass,
}

#[repr(C)]
pub struct GtkVScaleClass {
    pub parent_class: GtkScaleClass,
}

#[repr(C)]
pub struct GtkVScrollbarClass {
    pub parent_class: GtkScrollbarClass,
}

#[repr(C)]
pub struct GtkVSeparatorClass {
    pub parent_class: GtkSeparatorClass,
}

#[repr(C)]
pub struct GtkViewportClass {
    pub parent_class: GtkBinClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkViewportPrivate(c_void);

#[repr(C)]
pub struct GtkVolumeButtonClass {
    pub parent_class: GtkScaleButtonClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkWidgetAccessibleClass {
    pub parent_class: GtkAccessibleClass,
    pub notify_gtk: Option<unsafe extern "C" fn(*mut gobject::GObject, *mut gobject::GParamSpec)>,
}

#[repr(C)]
pub struct GtkWidgetAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkWidgetAuxInfo {
    pub width: c_int,
    pub height: c_int,
    _truncated_record_marker: c_void,
    //halign: guint: 4,
    //valign: guint: 4,
    //margin: GtkBorder,
}

#[repr(C)]
pub struct GtkWidgetClass {
    pub parent_class: gobject::GInitiallyUnownedClass,
    pub activate_signal: c_uint,
    pub dispatch_child_properties_changed: Option<unsafe extern "C" fn(*mut GtkWidget, c_uint, *mut *mut gobject::GParamSpec)>,
    pub destroy: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub show: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub show_all: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub hide: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub map: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub unmap: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub realize: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub unrealize: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub size_allocate: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkAllocation)>,
    pub state_changed: Option<unsafe extern "C" fn(*mut GtkWidget, GtkStateType)>,
    pub state_flags_changed: Option<unsafe extern "C" fn(*mut GtkWidget, GtkStateFlags)>,
    pub parent_set: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkWidget)>,
    pub hierarchy_changed: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkWidget)>,
    pub style_set: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkStyle)>,
    pub direction_changed: Option<unsafe extern "C" fn(*mut GtkWidget, GtkTextDirection)>,
    pub grab_notify: Option<unsafe extern "C" fn(*mut GtkWidget, gboolean)>,
    pub child_notify: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gobject::GParamSpec)>,
    pub draw: Option<unsafe extern "C" fn(*mut GtkWidget, *mut cairo::cairo_t) -> gboolean>,
    pub get_request_mode: Option<unsafe extern "C" fn(*mut GtkWidget) -> GtkSizeRequestMode>,
    pub get_preferred_height: Option<unsafe extern "C" fn(*mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_width_for_height: Option<unsafe extern "C" fn(*mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub get_preferred_width: Option<unsafe extern "C" fn(*mut GtkWidget, *mut c_int, *mut c_int)>,
    pub get_preferred_height_for_width: Option<unsafe extern "C" fn(*mut GtkWidget, c_int, *mut c_int, *mut c_int)>,
    pub mnemonic_activate: Option<unsafe extern "C" fn(*mut GtkWidget, gboolean) -> gboolean>,
    pub grab_focus: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub focus: Option<unsafe extern "C" fn(*mut GtkWidget, GtkDirectionType) -> gboolean>,
    pub move_focus: Option<unsafe extern "C" fn(*mut GtkWidget, GtkDirectionType)>,
    pub keynav_failed: Option<unsafe extern "C" fn(*mut GtkWidget, GtkDirectionType) -> gboolean>,
    pub event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEvent) -> gboolean>,
    pub button_press_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventButton) -> gboolean>,
    pub button_release_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventButton) -> gboolean>,
    pub scroll_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventScroll) -> gboolean>,
    pub motion_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventMotion) -> gboolean>,
    pub delete_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventAny) -> gboolean>,
    pub destroy_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventAny) -> gboolean>,
    pub key_press_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventKey) -> gboolean>,
    pub key_release_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventKey) -> gboolean>,
    pub enter_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventCrossing) -> gboolean>,
    pub leave_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventCrossing) -> gboolean>,
    pub configure_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventConfigure) -> gboolean>,
    pub focus_in_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventFocus) -> gboolean>,
    pub focus_out_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventFocus) -> gboolean>,
    pub map_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventAny) -> gboolean>,
    pub unmap_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventAny) -> gboolean>,
    pub property_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventProperty) -> gboolean>,
    pub selection_clear_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventSelection) -> gboolean>,
    pub selection_request_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventSelection) -> gboolean>,
    pub selection_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventSelection) -> gboolean>,
    pub proximity_in_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventProximity) -> gboolean>,
    pub proximity_out_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventProximity) -> gboolean>,
    pub visibility_notify_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventVisibility) -> gboolean>,
    pub window_state_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventWindowState) -> gboolean>,
    pub damage_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventExpose) -> gboolean>,
    pub grab_broken_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventGrabBroken) -> gboolean>,
    pub selection_get: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkSelectionData, c_uint, c_uint)>,
    pub selection_received: Option<unsafe extern "C" fn(*mut GtkWidget, *mut GtkSelectionData, c_uint)>,
    pub drag_begin: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext)>,
    pub drag_end: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext)>,
    pub drag_data_get: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, *mut GtkSelectionData, c_uint, c_uint)>,
    pub drag_data_delete: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext)>,
    pub drag_leave: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, c_uint)>,
    pub drag_motion: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, c_int, c_int, c_uint) -> gboolean>,
    pub drag_drop: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, c_int, c_int, c_uint) -> gboolean>,
    pub drag_data_received: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, c_int, c_int, *mut GtkSelectionData, c_uint, c_uint)>,
    pub drag_failed: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkDragContext, GtkDragResult) -> gboolean>,
    pub popup_menu: Option<unsafe extern "C" fn(*mut GtkWidget) -> gboolean>,
    pub show_help: Option<unsafe extern "C" fn(*mut GtkWidget, GtkWidgetHelpType) -> gboolean>,
    pub get_accessible: Option<unsafe extern "C" fn(*mut GtkWidget) -> *mut atk::AtkObject>,
    pub screen_changed: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkScreen)>,
    pub can_activate_accel: Option<unsafe extern "C" fn(*mut GtkWidget, c_uint) -> gboolean>,
    pub composited_changed: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub query_tooltip: Option<unsafe extern "C" fn(*mut GtkWidget, c_int, c_int, gboolean, *mut GtkTooltip) -> gboolean>,
    pub compute_expand: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gboolean, *mut gboolean)>,
    pub adjust_size_request: Option<unsafe extern "C" fn(*mut GtkWidget, GtkOrientation, *mut c_int, *mut c_int)>,
    pub adjust_size_allocation: Option<unsafe extern "C" fn(*mut GtkWidget, GtkOrientation, *mut c_int, *mut c_int, *mut c_int, *mut c_int)>,
    pub style_updated: Option<unsafe extern "C" fn(*mut GtkWidget)>,
    pub touch_event: Option<unsafe extern "C" fn(*mut GtkWidget, *mut gdk::GdkEventTouch) -> gboolean>,
    pub get_preferred_height_and_baseline_for_width: Option<unsafe extern "C" fn(*mut GtkWidget, c_int, *mut c_int, *mut c_int, *mut c_int, *mut c_int)>,
    pub adjust_baseline_request: Option<unsafe extern "C" fn(*mut GtkWidget, *mut c_int, *mut c_int)>,
    pub adjust_baseline_allocation: Option<unsafe extern "C" fn(*mut GtkWidget, *mut c_int)>,
    pub queue_draw_region: Option<unsafe extern "C" fn(*mut GtkWidget, *const cairo::cairo_region_t)>,
    priv_: *mut GtkWidgetClassPrivate,
    pub _gtk_reserved6: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved7: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkWidgetClassPrivate(c_void);

#[repr(C)]
pub struct GtkWidgetPath(c_void);

#[repr(C)]
pub struct GtkWidgetPrivate(c_void);

#[repr(C)]
pub struct GtkWindowAccessibleClass {
    pub parent_class: GtkContainerAccessibleClass,
}

#[repr(C)]
pub struct GtkWindowAccessiblePrivate(c_void);

#[repr(C)]
pub struct GtkWindowClass {
    pub parent_class: GtkBinClass,
    pub set_focus: Option<unsafe extern "C" fn(*mut GtkWindow, *mut GtkWidget)>,
    pub activate_focus: Option<unsafe extern "C" fn(*mut GtkWindow)>,
    pub activate_default: Option<unsafe extern "C" fn(*mut GtkWindow)>,
    pub keys_changed: Option<unsafe extern "C" fn(*mut GtkWindow)>,
    pub enable_debugging: Option<unsafe extern "C" fn(*mut GtkWindow, gboolean) -> gboolean>,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkWindowGeometryInfo(c_void);

#[repr(C)]
pub struct GtkWindowGroupClass {
    pub parent_class: gobject::GObjectClass,
    pub _gtk_reserved1: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved2: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved3: Option<unsafe extern "C" fn()>,
    pub _gtk_reserved4: Option<unsafe extern "C" fn()>,
}

#[repr(C)]
pub struct GtkWindowGroupPrivate(c_void);

#[repr(C)]
pub struct GtkWindowPrivate(c_void);


#[repr(C)]
pub struct GtkAboutDialog(c_void);
#[repr(C)]
pub struct GtkAccelGroup(c_void);
#[repr(C)]
pub struct GtkAccelLabel(c_void);
#[repr(C)]
pub struct GtkAccelMap(c_void);
#[repr(C)]
pub struct GtkAccessible(c_void);
#[repr(C)]
pub struct GtkAction(c_void);
#[repr(C)]
pub struct GtkActionBar(c_void);
#[repr(C)]
pub struct GtkActionGroup(c_void);
#[repr(C)]
pub struct GtkAdjustment(c_void);
#[repr(C)]
pub struct GtkAlignment(c_void);
#[repr(C)]
pub struct GtkAppChooserButton(c_void);
#[repr(C)]
pub struct GtkAppChooserDialog(c_void);
#[repr(C)]
pub struct GtkAppChooserWidget(c_void);
#[repr(C)]
pub struct GtkApplication(c_void);
#[repr(C)]
pub struct GtkApplicationWindow(c_void);
#[repr(C)]
pub struct GtkArrow(c_void);
#[repr(C)]
pub struct GtkArrowAccessible(c_void);
#[repr(C)]
pub struct GtkAspectFrame(c_void);
#[repr(C)]
pub struct GtkAssistant(c_void);
#[repr(C)]
pub struct GtkBin(c_void);
#[repr(C)]
pub struct GtkBooleanCellAccessible(c_void);
#[repr(C)]
pub struct GtkBox(c_void);
#[repr(C)]
pub struct GtkBuilder(c_void);
#[repr(C)]
pub struct GtkButton(c_void);
#[repr(C)]
pub struct GtkButtonAccessible(c_void);
#[repr(C)]
pub struct GtkButtonBox(c_void);
#[repr(C)]
pub struct GtkCalendar(c_void);
#[repr(C)]
pub struct GtkCellAccessible(c_void);
#[repr(C)]
pub struct GtkCellArea(c_void);
#[repr(C)]
pub struct GtkCellAreaBox(c_void);
#[repr(C)]
pub struct GtkCellAreaContext(c_void);
#[repr(C)]
pub struct GtkCellRenderer(c_void);
#[repr(C)]
pub struct GtkCellRendererAccel(c_void);
#[repr(C)]
pub struct GtkCellRendererCombo(c_void);
#[repr(C)]
pub struct GtkCellRendererPixbuf(c_void);
#[repr(C)]
pub struct GtkCellRendererProgress(c_void);
#[repr(C)]
pub struct GtkCellRendererSpin(c_void);
#[repr(C)]
pub struct GtkCellRendererSpinner(c_void);
#[repr(C)]
pub struct GtkCellRendererText(c_void);
#[repr(C)]
pub struct GtkCellRendererToggle(c_void);
#[repr(C)]
pub struct GtkCellView(c_void);
#[repr(C)]
pub struct GtkCheckButton(c_void);
#[repr(C)]
pub struct GtkCheckMenuItem(c_void);
#[repr(C)]
pub struct GtkCheckMenuItemAccessible(c_void);
#[repr(C)]
pub struct GtkClipboard(c_void);
#[repr(C)]
pub struct GtkColorButton(c_void);
#[repr(C)]
pub struct GtkColorChooserDialog(c_void);
#[repr(C)]
pub struct GtkColorChooserWidget(c_void);
#[repr(C)]
pub struct GtkColorSelection(c_void);
#[repr(C)]
pub struct GtkColorSelectionDialog(c_void);
#[repr(C)]
pub struct GtkComboBox(c_void);
#[repr(C)]
pub struct GtkComboBoxAccessible(c_void);
#[repr(C)]
pub struct GtkComboBoxText(c_void);
#[repr(C)]
pub struct GtkContainer(c_void);
#[repr(C)]
pub struct GtkContainerAccessible(c_void);
#[repr(C)]
pub struct GtkContainerCellAccessible(c_void);
#[repr(C)]
pub struct GtkCssProvider(c_void);
#[repr(C)]
pub struct GtkDialog(c_void);
#[repr(C)]
pub struct GtkDrawingArea(c_void);
#[repr(C)]
pub struct GtkEntry(c_void);
#[repr(C)]
pub struct GtkEntryAccessible(c_void);
#[repr(C)]
pub struct GtkEntryBuffer(c_void);
#[repr(C)]
pub struct GtkEntryCompletion(c_void);
#[repr(C)]
pub struct GtkEntryIconAccessible(c_void);
#[repr(C)]
pub struct GtkEventBox(c_void);
#[repr(C)]
pub struct GtkEventController(c_void);
#[repr(C)]
pub struct GtkExpander(c_void);
#[repr(C)]
pub struct GtkExpanderAccessible(c_void);
#[repr(C)]
pub struct GtkFileChooserButton(c_void);
#[repr(C)]
pub struct GtkFileChooserDialog(c_void);
#[repr(C)]
pub struct GtkFileChooserWidget(c_void);
#[repr(C)]
pub struct GtkFileFilter(c_void);
#[repr(C)]
pub struct GtkFixed(c_void);
#[repr(C)]
pub struct GtkFlowBox(c_void);
#[repr(C)]
pub struct GtkFlowBoxAccessible(c_void);
#[repr(C)]
pub struct GtkFlowBoxChild(c_void);
#[repr(C)]
pub struct GtkFlowBoxChildAccessible(c_void);
#[repr(C)]
pub struct GtkFontButton(c_void);
#[repr(C)]
pub struct GtkFontChooserDialog(c_void);
#[repr(C)]
pub struct GtkFontChooserWidget(c_void);
#[repr(C)]
pub struct GtkFontSelection(c_void);
#[repr(C)]
pub struct GtkFontSelectionDialog(c_void);
#[repr(C)]
pub struct GtkFrame(c_void);
#[repr(C)]
pub struct GtkFrameAccessible(c_void);
#[repr(C)]
pub struct GtkGLArea(c_void);
#[repr(C)]
pub struct GtkGesture(c_void);
#[repr(C)]
pub struct GtkGestureDrag(c_void);
#[repr(C)]
pub struct GtkGestureLongPress(c_void);
#[repr(C)]
pub struct GtkGestureMultiPress(c_void);
#[repr(C)]
pub struct GtkGesturePan(c_void);
#[repr(C)]
pub struct GtkGestureRotate(c_void);
#[repr(C)]
pub struct GtkGestureSingle(c_void);
#[repr(C)]
pub struct GtkGestureSwipe(c_void);
#[repr(C)]
pub struct GtkGestureZoom(c_void);
#[repr(C)]
pub struct GtkGrid(c_void);
#[repr(C)]
pub struct GtkHBox(c_void);
#[repr(C)]
pub struct GtkHButtonBox(c_void);
#[repr(C)]
pub struct GtkHPaned(c_void);
#[repr(C)]
pub struct GtkHSV(c_void);
#[repr(C)]
pub struct GtkHScale(c_void);
#[repr(C)]
pub struct GtkHScrollbar(c_void);
#[repr(C)]
pub struct GtkHSeparator(c_void);
#[repr(C)]
pub struct GtkHandleBox(c_void);
#[repr(C)]
pub struct GtkHeaderBar(c_void);
#[repr(C)]
pub struct GtkIMContext(c_void);
#[repr(C)]
pub struct GtkIMContextSimple(c_void);
#[repr(C)]
pub struct GtkIMMulticontext(c_void);
#[repr(C)]
pub struct GtkIconFactory(c_void);
#[repr(C)]
pub struct GtkIconInfo(c_void);
#[repr(C)]
pub struct GtkIconTheme(c_void);
#[repr(C)]
pub struct GtkIconView(c_void);
#[repr(C)]
pub struct GtkIconViewAccessible(c_void);
#[repr(C)]
pub struct GtkImage(c_void);
#[repr(C)]
pub struct GtkImageAccessible(c_void);
#[repr(C)]
pub struct GtkImageCellAccessible(c_void);
#[repr(C)]
pub struct GtkImageMenuItem(c_void);
#[repr(C)]
pub struct GtkInfoBar(c_void);
#[repr(C)]
pub struct GtkInvisible(c_void);
#[repr(C)]
pub struct GtkLabel(c_void);
#[repr(C)]
pub struct GtkLabelAccessible(c_void);
#[repr(C)]
pub struct GtkLayout(c_void);
#[repr(C)]
pub struct GtkLevelBar(c_void);
#[repr(C)]
pub struct GtkLevelBarAccessible(c_void);
#[repr(C)]
pub struct GtkLinkButton(c_void);
#[repr(C)]
pub struct GtkLinkButtonAccessible(c_void);
#[repr(C)]
pub struct GtkListBox(c_void);
#[repr(C)]
pub struct GtkListBoxAccessible(c_void);
#[repr(C)]
pub struct GtkListBoxRow(c_void);
#[repr(C)]
pub struct GtkListBoxRowAccessible(c_void);
#[repr(C)]
pub struct GtkListStore(c_void);
#[repr(C)]
pub struct GtkLockButton(c_void);
#[repr(C)]
pub struct GtkLockButtonAccessible(c_void);
#[repr(C)]
pub struct GtkMenu(c_void);
#[repr(C)]
pub struct GtkMenuAccessible(c_void);
#[repr(C)]
pub struct GtkMenuBar(c_void);
#[repr(C)]
pub struct GtkMenuButton(c_void);
#[repr(C)]
pub struct GtkMenuButtonAccessible(c_void);
#[repr(C)]
pub struct GtkMenuItem(c_void);
#[repr(C)]
pub struct GtkMenuItemAccessible(c_void);
#[repr(C)]
pub struct GtkMenuShell(c_void);
#[repr(C)]
pub struct GtkMenuShellAccessible(c_void);
#[repr(C)]
pub struct GtkMenuToolButton(c_void);
#[repr(C)]
pub struct GtkMessageDialog(c_void);
#[repr(C)]
pub struct GtkMisc(c_void);
#[repr(C)]
pub struct GtkModelButton(c_void);
#[repr(C)]
pub struct GtkMountOperation(c_void);
#[repr(C)]
pub struct GtkNotebook(c_void);
#[repr(C)]
pub struct GtkNotebookAccessible(c_void);
#[repr(C)]
pub struct GtkNotebookPageAccessible(c_void);
#[repr(C)]
pub struct GtkNumerableIcon(c_void);
#[repr(C)]
pub struct GtkOffscreenWindow(c_void);
#[repr(C)]
pub struct GtkOverlay(c_void);
#[repr(C)]
pub struct GtkPageSetup(c_void);
#[repr(C)]
pub struct GtkPaned(c_void);
#[repr(C)]
pub struct GtkPanedAccessible(c_void);
#[repr(C)]
pub struct GtkPlacesSidebar(c_void);
#[repr(C)]
pub struct GtkPlug(c_void);
#[repr(C)]
pub struct GtkPopover(c_void);
#[repr(C)]
pub struct GtkPopoverAccessible(c_void);
#[repr(C)]
pub struct GtkPopoverMenu(c_void);
#[repr(C)]
pub struct GtkPrintContext(c_void);
#[repr(C)]
pub struct GtkPrintOperation(c_void);
#[repr(C)]
pub struct GtkPrintSettings(c_void);
#[repr(C)]
pub struct GtkProgressBar(c_void);
#[repr(C)]
pub struct GtkProgressBarAccessible(c_void);
#[repr(C)]
pub struct GtkRadioAction(c_void);
#[repr(C)]
pub struct GtkRadioButton(c_void);
#[repr(C)]
pub struct GtkRadioButtonAccessible(c_void);
#[repr(C)]
pub struct GtkRadioMenuItem(c_void);
#[repr(C)]
pub struct GtkRadioMenuItemAccessible(c_void);
#[repr(C)]
pub struct GtkRadioToolButton(c_void);
#[repr(C)]
pub struct GtkRange(c_void);
#[repr(C)]
pub struct GtkRangeAccessible(c_void);
#[repr(C)]
pub struct GtkRcStyle(c_void);
#[repr(C)]
pub struct GtkRecentAction(c_void);
#[repr(C)]
pub struct GtkRecentChooserDialog(c_void);
#[repr(C)]
pub struct GtkRecentChooserMenu(c_void);
#[repr(C)]
pub struct GtkRecentChooserWidget(c_void);
#[repr(C)]
pub struct GtkRecentFilter(c_void);
#[repr(C)]
pub struct GtkRecentManager(c_void);
#[repr(C)]
pub struct GtkRendererCellAccessible(c_void);
#[repr(C)]
pub struct GtkRevealer(c_void);
#[repr(C)]
pub struct GtkScale(c_void);
#[repr(C)]
pub struct GtkScaleAccessible(c_void);
#[repr(C)]
pub struct GtkScaleButton(c_void);
#[repr(C)]
pub struct GtkScaleButtonAccessible(c_void);
#[repr(C)]
pub struct GtkScrollbar(c_void);
#[repr(C)]
pub struct GtkScrolledWindow(c_void);
#[repr(C)]
pub struct GtkScrolledWindowAccessible(c_void);
#[repr(C)]
pub struct GtkSearchBar(c_void);
#[repr(C)]
pub struct GtkSearchEntry(c_void);
#[repr(C)]
pub struct GtkSeparator(c_void);
#[repr(C)]
pub struct GtkSeparatorMenuItem(c_void);
#[repr(C)]
pub struct GtkSeparatorToolItem(c_void);
#[repr(C)]
pub struct GtkSettings(c_void);
#[repr(C)]
pub struct GtkSizeGroup(c_void);
#[repr(C)]
pub struct GtkSocket(c_void);
#[repr(C)]
pub struct GtkSpinButton(c_void);
#[repr(C)]
pub struct GtkSpinButtonAccessible(c_void);
#[repr(C)]
pub struct GtkSpinner(c_void);
#[repr(C)]
pub struct GtkSpinnerAccessible(c_void);
#[repr(C)]
pub struct GtkStack(c_void);
#[repr(C)]
pub struct GtkStackSidebar(c_void);
#[repr(C)]
pub struct GtkStackSwitcher(c_void);
#[repr(C)]
pub struct GtkStatusIcon(c_void);
#[repr(C)]
pub struct GtkStatusbar(c_void);
#[repr(C)]
pub struct GtkStatusbarAccessible(c_void);
#[repr(C)]
pub struct GtkStyle(c_void);
#[repr(C)]
pub struct GtkStyleContext(c_void);
#[repr(C)]
pub struct GtkStyleProperties(c_void);
#[repr(C)]
pub struct GtkSwitch(c_void);
#[repr(C)]
pub struct GtkSwitchAccessible(c_void);
#[repr(C)]
pub struct GtkTable(c_void);
#[repr(C)]
pub struct GtkTearoffMenuItem(c_void);
#[repr(C)]
pub struct GtkTextBuffer(c_void);
#[repr(C)]
pub struct GtkTextCellAccessible(c_void);
#[repr(C)]
pub struct GtkTextChildAnchor(c_void);
#[repr(C)]
pub struct GtkTextMark(c_void);
#[repr(C)]
pub struct GtkTextTag(c_void);
#[repr(C)]
pub struct GtkTextTagTable(c_void);
#[repr(C)]
pub struct GtkTextView(c_void);
#[repr(C)]
pub struct GtkTextViewAccessible(c_void);
#[repr(C)]
pub struct GtkThemingEngine(c_void);
#[repr(C)]
pub struct GtkToggleAction(c_void);
#[repr(C)]
pub struct GtkToggleButton(c_void);
#[repr(C)]
pub struct GtkToggleButtonAccessible(c_void);
#[repr(C)]
pub struct GtkToggleToolButton(c_void);
#[repr(C)]
pub struct GtkToolButton(c_void);
#[repr(C)]
pub struct GtkToolItem(c_void);
#[repr(C)]
pub struct GtkToolItemGroup(c_void);
#[repr(C)]
pub struct GtkToolPalette(c_void);
#[repr(C)]
pub struct GtkToolbar(c_void);
#[repr(C)]
pub struct GtkTooltip(c_void);
#[repr(C)]
pub struct GtkToplevelAccessible(c_void);
#[repr(C)]
pub struct GtkTreeModelFilter(c_void);
#[repr(C)]
pub struct GtkTreeModelSort(c_void);
#[repr(C)]
pub struct GtkTreeSelection(c_void);
#[repr(C)]
pub struct GtkTreeStore(c_void);
#[repr(C)]
pub struct GtkTreeView(c_void);
#[repr(C)]
pub struct GtkTreeViewAccessible(c_void);
#[repr(C)]
pub struct GtkTreeViewColumn(c_void);
#[repr(C)]
pub struct GtkUIManager(c_void);
#[repr(C)]
pub struct GtkVBox(c_void);
#[repr(C)]
pub struct GtkVButtonBox(c_void);
#[repr(C)]
pub struct GtkVPaned(c_void);
#[repr(C)]
pub struct GtkVScale(c_void);
#[repr(C)]
pub struct GtkVScrollbar(c_void);
#[repr(C)]
pub struct GtkVSeparator(c_void);
#[repr(C)]
pub struct GtkViewport(c_void);
#[repr(C)]
pub struct GtkVolumeButton(c_void);
#[repr(C)]
pub struct GtkWidget(c_void);
#[repr(C)]
pub struct GtkWidgetAccessible(c_void);
#[repr(C)]
pub struct GtkWindow(c_void);
#[repr(C)]
pub struct GtkWindowAccessible(c_void);
#[repr(C)]
pub struct GtkWindowGroup(c_void);

#[repr(C)]
pub struct GtkActionable(c_void);
#[repr(C)]
pub struct GtkActivatable(c_void);
#[repr(C)]
pub struct GtkAppChooser(c_void);
#[repr(C)]
pub struct GtkBuildable(c_void);
#[repr(C)]
pub struct GtkCellAccessibleParent(c_void);
#[repr(C)]
pub struct GtkCellEditable(c_void);
#[repr(C)]
pub struct GtkCellLayout(c_void);
#[repr(C)]
pub struct GtkColorChooser(c_void);
#[repr(C)]
pub struct GtkEditable(c_void);
#[repr(C)]
pub struct GtkFileChooser(c_void);
#[repr(C)]
pub struct GtkFontChooser(c_void);
#[repr(C)]
pub struct GtkOrientable(c_void);
#[repr(C)]
pub struct GtkPrintOperationPreview(c_void);
#[repr(C)]
pub struct GtkRecentChooser(c_void);
#[repr(C)]
pub struct GtkScrollable(c_void);
#[repr(C)]
pub struct GtkStyleProvider(c_void);
#[repr(C)]
pub struct GtkToolShell(c_void);
#[repr(C)]
pub struct GtkTreeDragDest(c_void);
#[repr(C)]
pub struct GtkTreeDragSource(c_void);
#[repr(C)]
pub struct GtkTreeModel(c_void);
#[repr(C)]
pub struct GtkTreeSortable(c_void);

extern "C" {

    //=========================================================================
    // GtkBindingEntry
    //=========================================================================
    pub fn gtk_binding_entry_add_signal(binding_set: *mut GtkBindingSet, keyval: c_uint, modifiers: gdk::GdkModifierType, signal_name: *const c_char, n_args: c_uint, ...);
    pub fn gtk_binding_entry_add_signal_from_string(binding_set: *mut GtkBindingSet, signal_desc: *const c_char) -> glib::GTokenType;
    pub fn gtk_binding_entry_add_signall(binding_set: *mut GtkBindingSet, keyval: c_uint, modifiers: gdk::GdkModifierType, signal_name: *const c_char, binding_args: *mut glib::GSList);
    pub fn gtk_binding_entry_remove(binding_set: *mut GtkBindingSet, keyval: c_uint, modifiers: gdk::GdkModifierType);
    pub fn gtk_binding_entry_skip(binding_set: *mut GtkBindingSet, keyval: c_uint, modifiers: gdk::GdkModifierType);

    //=========================================================================
    // GtkBindingSet
    //=========================================================================
    pub fn gtk_binding_set_activate(binding_set: *mut GtkBindingSet, keyval: c_uint, modifiers: gdk::GdkModifierType, object: *mut gobject::GObject) -> gboolean;
    pub fn gtk_binding_set_add_path(binding_set: *mut GtkBindingSet, path_type: GtkPathType, path_pattern: *const c_char, priority: GtkPathPriorityType);
    pub fn gtk_binding_set_by_class(object_class: gpointer) -> *mut GtkBindingSet;
    pub fn gtk_binding_set_find(set_name: *const c_char) -> *mut GtkBindingSet;
    pub fn gtk_binding_set_new(set_name: *const c_char) -> *mut GtkBindingSet;

    //=========================================================================
    // GtkBorder
    //=========================================================================
    pub fn gtk_border_get_type() -> GType;
    pub fn gtk_border_new() -> *mut GtkBorder;
    pub fn gtk_border_copy(border_: *const GtkBorder) -> *mut GtkBorder;
    pub fn gtk_border_free(border_: *mut GtkBorder);

    //=========================================================================
    // GtkCellAreaClass
    //=========================================================================
    pub fn gtk_cell_area_class_find_cell_property(aclass: *mut GtkCellAreaClass, property_name: *const c_char) -> *mut gobject::GParamSpec;
    pub fn gtk_cell_area_class_install_cell_property(aclass: *mut GtkCellAreaClass, property_id: c_uint, pspec: *mut gobject::GParamSpec);
    pub fn gtk_cell_area_class_list_cell_properties(aclass: *mut GtkCellAreaClass, n_properties: *mut c_uint) -> *mut *mut gobject::GParamSpec;

    //=========================================================================
    // GtkCellRendererClass
    //=========================================================================
    pub fn gtk_cell_renderer_class_set_accessible_type(renderer_class: *mut GtkCellRendererClass, type_: GType);

    //=========================================================================
    // GtkContainerClass
    //=========================================================================
    //pub fn gtk_container_class_find_child_property(cclass: *mut [c:type mismatch `GObjectClass` != `GtkContainerClass` of `ContainerClass`], property_name: *const c_char) -> *mut gobject::GParamSpec;
    pub fn gtk_container_class_handle_border_width(klass: *mut GtkContainerClass);
    pub fn gtk_container_class_install_child_property(cclass: *mut GtkContainerClass, property_id: c_uint, pspec: *mut gobject::GParamSpec);
    //pub fn gtk_container_class_list_child_properties(cclass: *mut [c:type mismatch `GObjectClass` != `GtkContainerClass` of `ContainerClass`], n_properties: *mut c_uint) -> *mut *mut gobject::GParamSpec;

    //=========================================================================
    // GtkCssSection
    //=========================================================================
    pub fn gtk_css_section_get_type() -> GType;
    pub fn gtk_css_section_get_end_line(section: *const GtkCssSection) -> c_uint;
    pub fn gtk_css_section_get_end_position(section: *const GtkCssSection) -> c_uint;
    pub fn gtk_css_section_get_file(section: *const GtkCssSection) -> *mut gio::GFile;
    pub fn gtk_css_section_get_parent(section: *const GtkCssSection) -> *mut GtkCssSection;
    pub fn gtk_css_section_get_section_type(section: *const GtkCssSection) -> GtkCssSectionType;
    pub fn gtk_css_section_get_start_line(section: *const GtkCssSection) -> c_uint;
    pub fn gtk_css_section_get_start_position(section: *const GtkCssSection) -> c_uint;
    pub fn gtk_css_section_ref(section: *mut GtkCssSection) -> *mut GtkCssSection;
    pub fn gtk_css_section_unref(section: *mut GtkCssSection);

    //=========================================================================
    // GtkGradient
    //=========================================================================
    pub fn gtk_gradient_get_type() -> GType;
    pub fn gtk_gradient_new_linear(x0: c_double, y0: c_double, x1: c_double, y1: c_double) -> *mut GtkGradient;
    pub fn gtk_gradient_new_radial(x0: c_double, y0: c_double, radius0: c_double, x1: c_double, y1: c_double, radius1: c_double) -> *mut GtkGradient;
    pub fn gtk_gradient_add_color_stop(gradient: *mut GtkGradient, offset: c_double, color: *mut GtkSymbolicColor);
    pub fn gtk_gradient_ref(gradient: *mut GtkGradient) -> *mut GtkGradient;
    pub fn gtk_gradient_resolve(gradient: *mut GtkGradient, props: *mut GtkStyleProperties, resolved_gradient: *mut *mut cairo::cairo_pattern_t) -> gboolean;
    pub fn gtk_gradient_resolve_for_context(gradient: *mut GtkGradient, context: *mut GtkStyleContext) -> *mut cairo::cairo_pattern_t;
    pub fn gtk_gradient_to_string(gradient: *mut GtkGradient) -> *mut c_char;
    pub fn gtk_gradient_unref(gradient: *mut GtkGradient);

    //=========================================================================
    // GtkIconSet
    //=========================================================================
    pub fn gtk_icon_set_get_type() -> GType;
    pub fn gtk_icon_set_new() -> *mut GtkIconSet;
    pub fn gtk_icon_set_new_from_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkIconSet;
    pub fn gtk_icon_set_add_source(icon_set: *mut GtkIconSet, source: *const GtkIconSource);
    pub fn gtk_icon_set_copy(icon_set: *mut GtkIconSet) -> *mut GtkIconSet;
    pub fn gtk_icon_set_get_sizes(icon_set: *mut GtkIconSet, sizes: *mut *mut c_int, n_sizes: *mut c_int);
    pub fn gtk_icon_set_ref(icon_set: *mut GtkIconSet) -> *mut GtkIconSet;
    pub fn gtk_icon_set_render_icon(icon_set: *mut GtkIconSet, style: *mut GtkStyle, direction: GtkTextDirection, state: GtkStateType, size: c_int, widget: *mut GtkWidget, detail: *const c_char) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_set_render_icon_pixbuf(icon_set: *mut GtkIconSet, context: *mut GtkStyleContext, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_set_render_icon_surface(icon_set: *mut GtkIconSet, context: *mut GtkStyleContext, size: c_int, scale: c_int, for_window: *mut gdk::GdkWindow) -> *mut cairo::cairo_surface_t;
    pub fn gtk_icon_set_unref(icon_set: *mut GtkIconSet);

    //=========================================================================
    // GtkIconSource
    //=========================================================================
    pub fn gtk_icon_source_get_type() -> GType;
    pub fn gtk_icon_source_new() -> *mut GtkIconSource;
    pub fn gtk_icon_source_copy(source: *const GtkIconSource) -> *mut GtkIconSource;
    pub fn gtk_icon_source_free(source: *mut GtkIconSource);
    pub fn gtk_icon_source_get_direction(source: *const GtkIconSource) -> GtkTextDirection;
    pub fn gtk_icon_source_get_direction_wildcarded(source: *const GtkIconSource) -> gboolean;
    pub fn gtk_icon_source_get_filename(source: *const GtkIconSource) -> *mut c_char;
    pub fn gtk_icon_source_get_icon_name(source: *const GtkIconSource) -> *const c_char;
    pub fn gtk_icon_source_get_pixbuf(source: *const GtkIconSource) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_source_get_size(source: *const GtkIconSource) -> c_int;
    pub fn gtk_icon_source_get_size_wildcarded(source: *const GtkIconSource) -> gboolean;
    pub fn gtk_icon_source_get_state(source: *const GtkIconSource) -> GtkStateType;
    pub fn gtk_icon_source_get_state_wildcarded(source: *const GtkIconSource) -> gboolean;
    pub fn gtk_icon_source_set_direction(source: *mut GtkIconSource, direction: GtkTextDirection);
    pub fn gtk_icon_source_set_direction_wildcarded(source: *mut GtkIconSource, setting: gboolean);
    pub fn gtk_icon_source_set_filename(source: *mut GtkIconSource, filename: *mut c_char);
    pub fn gtk_icon_source_set_icon_name(source: *mut GtkIconSource, icon_name: *const c_char);
    pub fn gtk_icon_source_set_pixbuf(source: *mut GtkIconSource, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_icon_source_set_size(source: *mut GtkIconSource, size: c_int);
    pub fn gtk_icon_source_set_size_wildcarded(source: *mut GtkIconSource, setting: gboolean);
    pub fn gtk_icon_source_set_state(source: *mut GtkIconSource, state: GtkStateType);
    pub fn gtk_icon_source_set_state_wildcarded(source: *mut GtkIconSource, setting: gboolean);

    //=========================================================================
    // GtkPaperSize
    //=========================================================================
    pub fn gtk_paper_size_get_type() -> GType;
    pub fn gtk_paper_size_new(name: *const c_char) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_new_custom(name: *const c_char, display_name: *const c_char, width: c_double, height: c_double, unit: GtkUnit) -> *mut GtkPaperSize;
    #[cfg(gtk_3_16)]
    pub fn gtk_paper_size_new_from_ipp(ipp_name: *const c_char, width: c_double, height: c_double) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_new_from_key_file(key_file: *mut glib::GKeyFile, group_name: *const c_char, error: *mut *mut glib::GError) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_new_from_ppd(ppd_name: *const c_char, ppd_display_name: *const c_char, width: c_double, height: c_double) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_copy(other: *mut GtkPaperSize) -> *mut GtkPaperSize;
    pub fn gtk_paper_size_free(size: *mut GtkPaperSize);
    pub fn gtk_paper_size_get_default_bottom_margin(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_get_default_left_margin(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_get_default_right_margin(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_get_default_top_margin(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_get_display_name(size: *mut GtkPaperSize) -> *const c_char;
    pub fn gtk_paper_size_get_height(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_get_name(size: *mut GtkPaperSize) -> *const c_char;
    pub fn gtk_paper_size_get_ppd_name(size: *mut GtkPaperSize) -> *const c_char;
    pub fn gtk_paper_size_get_width(size: *mut GtkPaperSize, unit: GtkUnit) -> c_double;
    pub fn gtk_paper_size_is_custom(size: *mut GtkPaperSize) -> gboolean;
    pub fn gtk_paper_size_is_equal(size1: *mut GtkPaperSize, size2: *mut GtkPaperSize) -> gboolean;
    pub fn gtk_paper_size_is_ipp(size: *mut GtkPaperSize) -> gboolean;
    pub fn gtk_paper_size_set_size(size: *mut GtkPaperSize, width: c_double, height: c_double, unit: GtkUnit);
    pub fn gtk_paper_size_to_key_file(size: *mut GtkPaperSize, key_file: *mut glib::GKeyFile, group_name: *const c_char);
    pub fn gtk_paper_size_get_default() -> *const c_char;
    pub fn gtk_paper_size_get_paper_sizes(include_custom: gboolean) -> *mut glib::GList;

    //=========================================================================
    // GtkRcProperty
    //=========================================================================
    pub fn gtk_rc_property_parse_border(pspec: *const gobject::GParamSpec, gstring: *const glib::GString, property_value: *mut gobject::GValue) -> gboolean;
    pub fn gtk_rc_property_parse_color(pspec: *const gobject::GParamSpec, gstring: *const glib::GString, property_value: *mut gobject::GValue) -> gboolean;
    pub fn gtk_rc_property_parse_enum(pspec: *const gobject::GParamSpec, gstring: *const glib::GString, property_value: *mut gobject::GValue) -> gboolean;
    pub fn gtk_rc_property_parse_flags(pspec: *const gobject::GParamSpec, gstring: *const glib::GString, property_value: *mut gobject::GValue) -> gboolean;
    pub fn gtk_rc_property_parse_requisition(pspec: *const gobject::GParamSpec, gstring: *const glib::GString, property_value: *mut gobject::GValue) -> gboolean;

    //=========================================================================
    // GtkRecentInfo
    //=========================================================================
    pub fn gtk_recent_info_get_type() -> GType;
    pub fn gtk_recent_info_create_app_info(info: *mut GtkRecentInfo, app_name: *const c_char, error: *mut *mut glib::GError) -> *mut gio::GAppInfo;
    pub fn gtk_recent_info_exists(info: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_get_added(info: *mut GtkRecentInfo) -> c_long;
    pub fn gtk_recent_info_get_age(info: *mut GtkRecentInfo) -> c_int;
    pub fn gtk_recent_info_get_application_info(info: *mut GtkRecentInfo, app_name: *const c_char, app_exec: *mut *const c_char, count: *mut c_uint, time_: *mut c_long) -> gboolean;
    pub fn gtk_recent_info_get_applications(info: *mut GtkRecentInfo, length: *mut size_t) -> *mut *mut c_char;
    pub fn gtk_recent_info_get_description(info: *mut GtkRecentInfo) -> *const c_char;
    pub fn gtk_recent_info_get_display_name(info: *mut GtkRecentInfo) -> *const c_char;
    pub fn gtk_recent_info_get_gicon(info: *mut GtkRecentInfo) -> *mut gio::GIcon;
    pub fn gtk_recent_info_get_groups(info: *mut GtkRecentInfo, length: *mut size_t) -> *mut *mut c_char;
    pub fn gtk_recent_info_get_icon(info: *mut GtkRecentInfo, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_recent_info_get_mime_type(info: *mut GtkRecentInfo) -> *const c_char;
    pub fn gtk_recent_info_get_modified(info: *mut GtkRecentInfo) -> c_long;
    pub fn gtk_recent_info_get_private_hint(info: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_get_short_name(info: *mut GtkRecentInfo) -> *mut c_char;
    pub fn gtk_recent_info_get_uri(info: *mut GtkRecentInfo) -> *const c_char;
    pub fn gtk_recent_info_get_uri_display(info: *mut GtkRecentInfo) -> *mut c_char;
    pub fn gtk_recent_info_get_visited(info: *mut GtkRecentInfo) -> c_long;
    pub fn gtk_recent_info_has_application(info: *mut GtkRecentInfo, app_name: *const c_char) -> gboolean;
    pub fn gtk_recent_info_has_group(info: *mut GtkRecentInfo, group_name: *const c_char) -> gboolean;
    pub fn gtk_recent_info_is_local(info: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_last_application(info: *mut GtkRecentInfo) -> *mut c_char;
    pub fn gtk_recent_info_match(info_a: *mut GtkRecentInfo, info_b: *mut GtkRecentInfo) -> gboolean;
    pub fn gtk_recent_info_ref(info: *mut GtkRecentInfo) -> *mut GtkRecentInfo;
    pub fn gtk_recent_info_unref(info: *mut GtkRecentInfo);

    //=========================================================================
    // GtkRequisition
    //=========================================================================
    pub fn gtk_requisition_get_type() -> GType;
    pub fn gtk_requisition_new() -> *mut GtkRequisition;
    pub fn gtk_requisition_copy(requisition: *const GtkRequisition) -> *mut GtkRequisition;
    pub fn gtk_requisition_free(requisition: *mut GtkRequisition);

    //=========================================================================
    // GtkSelectionData
    //=========================================================================
    pub fn gtk_selection_data_get_type() -> GType;
    pub fn gtk_selection_data_copy(data: *const GtkSelectionData) -> *mut GtkSelectionData;
    pub fn gtk_selection_data_free(data: *mut GtkSelectionData);
    pub fn gtk_selection_data_get_data(selection_data: *const GtkSelectionData) -> *mut u8;
    pub fn gtk_selection_data_get_data_type(selection_data: *const GtkSelectionData) -> gdk::GdkAtom;
    pub fn gtk_selection_data_get_data_with_length(selection_data: *const GtkSelectionData, length: *mut c_int) -> *mut u8;
    pub fn gtk_selection_data_get_display(selection_data: *const GtkSelectionData) -> *mut gdk::GdkDisplay;
    pub fn gtk_selection_data_get_format(selection_data: *const GtkSelectionData) -> c_int;
    pub fn gtk_selection_data_get_length(selection_data: *const GtkSelectionData) -> c_int;
    pub fn gtk_selection_data_get_pixbuf(selection_data: *const GtkSelectionData) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_selection_data_get_selection(selection_data: *const GtkSelectionData) -> gdk::GdkAtom;
    pub fn gtk_selection_data_get_target(selection_data: *const GtkSelectionData) -> gdk::GdkAtom;
    pub fn gtk_selection_data_get_targets(selection_data: *const GtkSelectionData, targets: *mut *mut gdk::GdkAtom, n_atoms: *mut c_int) -> gboolean;
    pub fn gtk_selection_data_get_text(selection_data: *const GtkSelectionData) -> *mut c_char;
    pub fn gtk_selection_data_get_uris(selection_data: *const GtkSelectionData) -> *mut *mut c_char;
    pub fn gtk_selection_data_set(selection_data: *mut GtkSelectionData, type_: gdk::GdkAtom, format: c_int, data: *mut u8, length: c_int);
    pub fn gtk_selection_data_set_pixbuf(selection_data: *mut GtkSelectionData, pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> gboolean;
    pub fn gtk_selection_data_set_text(selection_data: *mut GtkSelectionData, str: *const c_char, len: c_int) -> gboolean;
    pub fn gtk_selection_data_set_uris(selection_data: *mut GtkSelectionData, uris: *mut *mut c_char) -> gboolean;
    pub fn gtk_selection_data_targets_include_image(selection_data: *const GtkSelectionData, writable: gboolean) -> gboolean;
    pub fn gtk_selection_data_targets_include_rich_text(selection_data: *const GtkSelectionData, buffer: *mut GtkTextBuffer) -> gboolean;
    pub fn gtk_selection_data_targets_include_text(selection_data: *const GtkSelectionData) -> gboolean;
    pub fn gtk_selection_data_targets_include_uri(selection_data: *const GtkSelectionData) -> gboolean;

    //=========================================================================
    // GtkStockItem
    //=========================================================================
    pub fn gtk_stock_item_copy(item: *const GtkStockItem) -> *mut GtkStockItem;
    pub fn gtk_stock_item_free(item: *mut GtkStockItem);

    //=========================================================================
    // GtkSymbolicColor
    //=========================================================================
    pub fn gtk_symbolic_color_get_type() -> GType;
    pub fn gtk_symbolic_color_new_alpha(color: *mut GtkSymbolicColor, factor: c_double) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_literal(color: *const gdk::GdkRGBA) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_mix(color1: *mut GtkSymbolicColor, color2: *mut GtkSymbolicColor, factor: c_double) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_name(name: *const c_char) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_new_shade(color: *mut GtkSymbolicColor, factor: c_double) -> *mut GtkSymbolicColor;
    #[cfg(gtk_3_4)]
    pub fn gtk_symbolic_color_new_win32(theme_class: *const c_char, id: c_int) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_ref(color: *mut GtkSymbolicColor) -> *mut GtkSymbolicColor;
    pub fn gtk_symbolic_color_resolve(color: *mut GtkSymbolicColor, props: *mut GtkStyleProperties, resolved_color: *mut gdk::GdkRGBA) -> gboolean;
    pub fn gtk_symbolic_color_to_string(color: *mut GtkSymbolicColor) -> *mut c_char;
    pub fn gtk_symbolic_color_unref(color: *mut GtkSymbolicColor);

    //=========================================================================
    // GtkTargetEntry
    //=========================================================================
    pub fn gtk_target_entry_get_type() -> GType;
    pub fn gtk_target_entry_new(target: *const c_char, flags: c_uint, info: c_uint) -> *mut GtkTargetEntry;
    pub fn gtk_target_entry_copy(data: *mut GtkTargetEntry) -> *mut GtkTargetEntry;
    pub fn gtk_target_entry_free(data: *mut GtkTargetEntry);

    //=========================================================================
    // GtkTargetList
    //=========================================================================
    pub fn gtk_target_list_get_type() -> GType;
    pub fn gtk_target_list_new(targets: *mut GtkTargetEntry, ntargets: c_uint) -> *mut GtkTargetList;
    pub fn gtk_target_list_add(list: *mut GtkTargetList, target: gdk::GdkAtom, flags: c_uint, info: c_uint);
    pub fn gtk_target_list_add_image_targets(list: *mut GtkTargetList, info: c_uint, writable: gboolean);
    pub fn gtk_target_list_add_rich_text_targets(list: *mut GtkTargetList, info: c_uint, deserializable: gboolean, buffer: *mut GtkTextBuffer);
    pub fn gtk_target_list_add_table(list: *mut GtkTargetList, targets: *mut GtkTargetEntry, ntargets: c_uint);
    pub fn gtk_target_list_add_text_targets(list: *mut GtkTargetList, info: c_uint);
    pub fn gtk_target_list_add_uri_targets(list: *mut GtkTargetList, info: c_uint);
    pub fn gtk_target_list_find(list: *mut GtkTargetList, target: gdk::GdkAtom, info: *mut c_uint) -> gboolean;
    pub fn gtk_target_list_ref(list: *mut GtkTargetList) -> *mut GtkTargetList;
    pub fn gtk_target_list_remove(list: *mut GtkTargetList, target: gdk::GdkAtom);
    pub fn gtk_target_list_unref(list: *mut GtkTargetList);

    //=========================================================================
    // GtkTextAttributes
    //=========================================================================
    pub fn gtk_text_attributes_get_type() -> GType;
    pub fn gtk_text_attributes_new() -> *mut GtkTextAttributes;
    pub fn gtk_text_attributes_copy(src: *mut GtkTextAttributes) -> *mut GtkTextAttributes;
    pub fn gtk_text_attributes_copy_values(src: *mut GtkTextAttributes, dest: *mut GtkTextAttributes);
    pub fn gtk_text_attributes_ref(values: *mut GtkTextAttributes) -> *mut GtkTextAttributes;
    pub fn gtk_text_attributes_unref(values: *mut GtkTextAttributes);

    //=========================================================================
    // GtkTextIter
    //=========================================================================
    pub fn gtk_text_iter_get_type() -> GType;
    pub fn gtk_text_iter_assign(iter: *mut GtkTextIter, other: *const GtkTextIter);
    pub fn gtk_text_iter_backward_char(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_chars(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_cursor_position(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_cursor_positions(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_find_char(iter: *mut GtkTextIter, pred: GtkTextCharPredicate, user_data: gpointer, limit: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_lines(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_search(iter: *const GtkTextIter, str: *const c_char, flags: GtkTextSearchFlags, match_start: *mut GtkTextIter, match_end: *mut GtkTextIter, limit: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_sentence_start(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_sentence_starts(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_to_tag_toggle(iter: *mut GtkTextIter, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_iter_backward_visible_cursor_position(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_visible_cursor_positions(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_visible_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_visible_lines(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_visible_word_start(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_visible_word_starts(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_backward_word_start(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_backward_word_starts(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_begins_tag(iter: *const GtkTextIter, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_iter_can_insert(iter: *const GtkTextIter, default_editability: gboolean) -> gboolean;
    pub fn gtk_text_iter_compare(lhs: *const GtkTextIter, rhs: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_copy(iter: *const GtkTextIter) -> *mut GtkTextIter;
    pub fn gtk_text_iter_editable(iter: *const GtkTextIter, default_setting: gboolean) -> gboolean;
    pub fn gtk_text_iter_ends_line(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_ends_sentence(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_ends_tag(iter: *const GtkTextIter, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_iter_ends_word(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_equal(lhs: *const GtkTextIter, rhs: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_char(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_chars(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_cursor_position(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_cursor_positions(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_find_char(iter: *mut GtkTextIter, pred: GtkTextCharPredicate, user_data: gpointer, limit: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_lines(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_search(iter: *const GtkTextIter, str: *const c_char, flags: GtkTextSearchFlags, match_start: *mut GtkTextIter, match_end: *mut GtkTextIter, limit: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_sentence_end(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_sentence_ends(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_to_end(iter: *mut GtkTextIter);
    pub fn gtk_text_iter_forward_to_line_end(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_to_tag_toggle(iter: *mut GtkTextIter, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_iter_forward_visible_cursor_position(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_visible_cursor_positions(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_visible_line(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_visible_lines(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_visible_word_end(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_visible_word_ends(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_forward_word_end(iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_forward_word_ends(iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_iter_free(iter: *mut GtkTextIter);
    pub fn gtk_text_iter_get_attributes(iter: *const GtkTextIter, values: *mut GtkTextAttributes) -> gboolean;
    pub fn gtk_text_iter_get_buffer(iter: *const GtkTextIter) -> *mut GtkTextBuffer;
    pub fn gtk_text_iter_get_bytes_in_line(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_char(iter: *const GtkTextIter) -> u32;
    pub fn gtk_text_iter_get_chars_in_line(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_child_anchor(iter: *const GtkTextIter) -> *mut GtkTextChildAnchor;
    pub fn gtk_text_iter_get_language(iter: *const GtkTextIter) -> *mut pango::PangoLanguage;
    pub fn gtk_text_iter_get_line(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_line_index(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_line_offset(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_marks(iter: *const GtkTextIter) -> *mut glib::GSList;
    pub fn gtk_text_iter_get_offset(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_pixbuf(iter: *const GtkTextIter) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_text_iter_get_slice(start: *const GtkTextIter, end: *const GtkTextIter) -> *mut c_char;
    pub fn gtk_text_iter_get_tags(iter: *const GtkTextIter) -> *mut glib::GSList;
    pub fn gtk_text_iter_get_text(start: *const GtkTextIter, end: *const GtkTextIter) -> *mut c_char;
    pub fn gtk_text_iter_get_toggled_tags(iter: *const GtkTextIter, toggled_on: gboolean) -> *mut glib::GSList;
    pub fn gtk_text_iter_get_visible_line_index(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_visible_line_offset(iter: *const GtkTextIter) -> c_int;
    pub fn gtk_text_iter_get_visible_slice(start: *const GtkTextIter, end: *const GtkTextIter) -> *mut c_char;
    pub fn gtk_text_iter_get_visible_text(start: *const GtkTextIter, end: *const GtkTextIter) -> *mut c_char;
    pub fn gtk_text_iter_has_tag(iter: *const GtkTextIter, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_iter_in_range(iter: *const GtkTextIter, start: *const GtkTextIter, end: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_inside_sentence(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_inside_word(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_is_cursor_position(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_is_end(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_is_start(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_order(first: *mut GtkTextIter, second: *mut GtkTextIter);
    pub fn gtk_text_iter_set_line(iter: *mut GtkTextIter, line_number: c_int);
    pub fn gtk_text_iter_set_line_index(iter: *mut GtkTextIter, byte_on_line: c_int);
    pub fn gtk_text_iter_set_line_offset(iter: *mut GtkTextIter, char_on_line: c_int);
    pub fn gtk_text_iter_set_offset(iter: *mut GtkTextIter, char_offset: c_int);
    pub fn gtk_text_iter_set_visible_line_index(iter: *mut GtkTextIter, byte_on_line: c_int);
    pub fn gtk_text_iter_set_visible_line_offset(iter: *mut GtkTextIter, char_on_line: c_int);
    pub fn gtk_text_iter_starts_line(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_starts_sentence(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_starts_word(iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_iter_toggles_tag(iter: *const GtkTextIter, tag: *mut GtkTextTag) -> gboolean;

    //=========================================================================
    // GtkTreeIter
    //=========================================================================
    pub fn gtk_tree_iter_get_type() -> GType;
    pub fn gtk_tree_iter_copy(iter: *mut GtkTreeIter) -> *mut GtkTreeIter;
    pub fn gtk_tree_iter_free(iter: *mut GtkTreeIter);

    //=========================================================================
    // GtkTreePath
    //=========================================================================
    pub fn gtk_tree_path_get_type() -> GType;
    pub fn gtk_tree_path_new() -> *mut GtkTreePath;
    pub fn gtk_tree_path_new_first() -> *mut GtkTreePath;
    pub fn gtk_tree_path_new_from_indices(first_index: c_int, ...) -> *mut GtkTreePath;
    #[cfg(gtk_3_12)]
    pub fn gtk_tree_path_new_from_indicesv(indices: *mut c_int, length: size_t) -> *mut GtkTreePath;
    pub fn gtk_tree_path_new_from_string(path: *const c_char) -> *mut GtkTreePath;
    pub fn gtk_tree_path_append_index(path: *mut GtkTreePath, index_: c_int);
    pub fn gtk_tree_path_compare(a: *const GtkTreePath, b: *const GtkTreePath) -> c_int;
    pub fn gtk_tree_path_copy(path: *const GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_path_down(path: *mut GtkTreePath);
    pub fn gtk_tree_path_free(path: *mut GtkTreePath);
    pub fn gtk_tree_path_get_depth(path: *mut GtkTreePath) -> c_int;
    pub fn gtk_tree_path_get_indices(path: *mut GtkTreePath) -> *mut c_int;
    pub fn gtk_tree_path_get_indices_with_depth(path: *mut GtkTreePath, depth: *mut c_int) -> *mut c_int;
    pub fn gtk_tree_path_is_ancestor(path: *mut GtkTreePath, descendant: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_path_is_descendant(path: *mut GtkTreePath, ancestor: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_path_next(path: *mut GtkTreePath);
    pub fn gtk_tree_path_prepend_index(path: *mut GtkTreePath, index_: c_int);
    pub fn gtk_tree_path_prev(path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_path_to_string(path: *mut GtkTreePath) -> *mut c_char;
    pub fn gtk_tree_path_up(path: *mut GtkTreePath) -> gboolean;

    //=========================================================================
    // GtkTreeRowReference
    //=========================================================================
    pub fn gtk_tree_row_reference_get_type() -> GType;
    pub fn gtk_tree_row_reference_new(model: *mut GtkTreeModel, path: *mut GtkTreePath) -> *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_new_proxy(proxy: *mut gobject::GObject, model: *mut GtkTreeModel, path: *mut GtkTreePath) -> *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_copy(reference: *mut GtkTreeRowReference) -> *mut GtkTreeRowReference;
    pub fn gtk_tree_row_reference_free(reference: *mut GtkTreeRowReference);
    pub fn gtk_tree_row_reference_get_model(reference: *mut GtkTreeRowReference) -> *mut GtkTreeModel;
    pub fn gtk_tree_row_reference_get_path(reference: *mut GtkTreeRowReference) -> *mut GtkTreePath;
    pub fn gtk_tree_row_reference_valid(reference: *mut GtkTreeRowReference) -> gboolean;
    pub fn gtk_tree_row_reference_deleted(proxy: *mut gobject::GObject, path: *mut GtkTreePath);
    pub fn gtk_tree_row_reference_inserted(proxy: *mut gobject::GObject, path: *mut GtkTreePath);
    pub fn gtk_tree_row_reference_reordered(proxy: *mut gobject::GObject, path: *mut GtkTreePath, iter: *mut GtkTreeIter, new_order: *mut c_int);

    //=========================================================================
    // GtkWidgetClass
    //=========================================================================
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_class_bind_template_callback_full(widget_class: *mut GtkWidgetClass, callback_name: *const c_char, callback_symbol: gobject::GCallback);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_class_bind_template_child_full(widget_class: *mut GtkWidgetClass, name: *const c_char, internal_child: gboolean, struct_offset: ssize_t);
    pub fn gtk_widget_class_find_style_property(klass: *mut GtkWidgetClass, property_name: *const c_char) -> *mut gobject::GParamSpec;
    pub fn gtk_widget_class_install_style_property(klass: *mut GtkWidgetClass, pspec: *mut gobject::GParamSpec);
    pub fn gtk_widget_class_install_style_property_parser(klass: *mut GtkWidgetClass, pspec: *mut gobject::GParamSpec, parser: GtkRcPropertyParser);
    pub fn gtk_widget_class_list_style_properties(klass: *mut GtkWidgetClass, n_properties: *mut c_uint) -> *mut *mut gobject::GParamSpec;
    pub fn gtk_widget_class_set_accessible_role(widget_class: *mut GtkWidgetClass, role: atk::AtkRole);
    pub fn gtk_widget_class_set_accessible_type(widget_class: *mut GtkWidgetClass, type_: GType);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_class_set_connect_func(widget_class: *mut GtkWidgetClass, connect_func: GtkBuilderConnectFunc, connect_data: gpointer, connect_data_destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_class_set_template(widget_class: *mut GtkWidgetClass, template_bytes: *mut glib::GBytes);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_class_set_template_from_resource(widget_class: *mut GtkWidgetClass, resource_name: *const c_char);

    //=========================================================================
    // GtkWidgetPath
    //=========================================================================
    pub fn gtk_widget_path_get_type() -> GType;
    pub fn gtk_widget_path_new() -> *mut GtkWidgetPath;
    pub fn gtk_widget_path_append_for_widget(path: *mut GtkWidgetPath, widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_path_append_type(path: *mut GtkWidgetPath, type_: GType) -> c_int;
    pub fn gtk_widget_path_append_with_siblings(path: *mut GtkWidgetPath, siblings: *mut GtkWidgetPath, sibling_index: c_uint) -> c_int;
    pub fn gtk_widget_path_copy(path: *const GtkWidgetPath) -> *mut GtkWidgetPath;
    pub fn gtk_widget_path_free(path: *mut GtkWidgetPath);
    pub fn gtk_widget_path_get_object_type(path: *const GtkWidgetPath) -> GType;
    pub fn gtk_widget_path_has_parent(path: *const GtkWidgetPath, type_: GType) -> gboolean;
    pub fn gtk_widget_path_is_type(path: *const GtkWidgetPath, type_: GType) -> gboolean;
    pub fn gtk_widget_path_iter_add_class(path: *mut GtkWidgetPath, pos: c_int, name: *const c_char);
    pub fn gtk_widget_path_iter_add_region(path: *mut GtkWidgetPath, pos: c_int, name: *const c_char, flags: GtkRegionFlags);
    pub fn gtk_widget_path_iter_clear_classes(path: *mut GtkWidgetPath, pos: c_int);
    pub fn gtk_widget_path_iter_clear_regions(path: *mut GtkWidgetPath, pos: c_int);
    pub fn gtk_widget_path_iter_get_name(path: *const GtkWidgetPath, pos: c_int) -> *const c_char;
    pub fn gtk_widget_path_iter_get_object_type(path: *const GtkWidgetPath, pos: c_int) -> GType;
    pub fn gtk_widget_path_iter_get_sibling_index(path: *const GtkWidgetPath, pos: c_int) -> c_uint;
    pub fn gtk_widget_path_iter_get_siblings(path: *const GtkWidgetPath, pos: c_int) -> *const GtkWidgetPath;
    #[cfg(gtk_3_14)]
    pub fn gtk_widget_path_iter_get_state(path: *const GtkWidgetPath, pos: c_int) -> GtkStateFlags;
    pub fn gtk_widget_path_iter_has_class(path: *const GtkWidgetPath, pos: c_int, name: *const c_char) -> gboolean;
    pub fn gtk_widget_path_iter_has_name(path: *const GtkWidgetPath, pos: c_int, name: *const c_char) -> gboolean;
    pub fn gtk_widget_path_iter_has_qclass(path: *const GtkWidgetPath, pos: c_int, qname: glib::GQuark) -> gboolean;
    pub fn gtk_widget_path_iter_has_qname(path: *const GtkWidgetPath, pos: c_int, qname: glib::GQuark) -> gboolean;
    pub fn gtk_widget_path_iter_has_qregion(path: *const GtkWidgetPath, pos: c_int, qname: glib::GQuark, flags: *mut GtkRegionFlags) -> gboolean;
    pub fn gtk_widget_path_iter_has_region(path: *const GtkWidgetPath, pos: c_int, name: *const c_char, flags: *mut GtkRegionFlags) -> gboolean;
    pub fn gtk_widget_path_iter_list_classes(path: *const GtkWidgetPath, pos: c_int) -> *mut glib::GSList;
    pub fn gtk_widget_path_iter_list_regions(path: *const GtkWidgetPath, pos: c_int) -> *mut glib::GSList;
    pub fn gtk_widget_path_iter_remove_class(path: *mut GtkWidgetPath, pos: c_int, name: *const c_char);
    pub fn gtk_widget_path_iter_remove_region(path: *mut GtkWidgetPath, pos: c_int, name: *const c_char);
    pub fn gtk_widget_path_iter_set_name(path: *mut GtkWidgetPath, pos: c_int, name: *const c_char);
    pub fn gtk_widget_path_iter_set_object_type(path: *mut GtkWidgetPath, pos: c_int, type_: GType);
    #[cfg(gtk_3_14)]
    pub fn gtk_widget_path_iter_set_state(path: *mut GtkWidgetPath, pos: c_int, state: GtkStateFlags);
    pub fn gtk_widget_path_length(path: *const GtkWidgetPath) -> c_int;
    pub fn gtk_widget_path_prepend_type(path: *mut GtkWidgetPath, type_: GType);
    pub fn gtk_widget_path_ref(path: *mut GtkWidgetPath) -> *mut GtkWidgetPath;
    pub fn gtk_widget_path_to_string(path: *const GtkWidgetPath) -> *mut c_char;
    pub fn gtk_widget_path_unref(path: *mut GtkWidgetPath);

    //=========================================================================
    // GtkAboutDialog
    //=========================================================================
    pub fn gtk_about_dialog_get_type() -> GType;
    pub fn gtk_about_dialog_new() -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_about_dialog_add_credit_section(about: *mut GtkAboutDialog, section_name: *const c_char, people: *mut *mut c_char);
    pub fn gtk_about_dialog_get_artists(about: *mut GtkAboutDialog) -> *mut *mut c_char;
    pub fn gtk_about_dialog_get_authors(about: *mut GtkAboutDialog) -> *mut *mut c_char;
    pub fn gtk_about_dialog_get_comments(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_copyright(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_documenters(about: *mut GtkAboutDialog) -> *mut *mut c_char;
    pub fn gtk_about_dialog_get_license(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_license_type(about: *mut GtkAboutDialog) -> GtkLicense;
    pub fn gtk_about_dialog_get_logo(about: *mut GtkAboutDialog) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_about_dialog_get_logo_icon_name(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_program_name(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_translator_credits(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_version(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_website(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_website_label(about: *mut GtkAboutDialog) -> *const c_char;
    pub fn gtk_about_dialog_get_wrap_license(about: *mut GtkAboutDialog) -> gboolean;
    pub fn gtk_about_dialog_set_artists(about: *mut GtkAboutDialog, artists: *mut *mut c_char);
    pub fn gtk_about_dialog_set_authors(about: *mut GtkAboutDialog, authors: *mut *mut c_char);
    pub fn gtk_about_dialog_set_comments(about: *mut GtkAboutDialog, comments: *const c_char);
    pub fn gtk_about_dialog_set_copyright(about: *mut GtkAboutDialog, copyright: *const c_char);
    pub fn gtk_about_dialog_set_documenters(about: *mut GtkAboutDialog, documenters: *mut *mut c_char);
    pub fn gtk_about_dialog_set_license(about: *mut GtkAboutDialog, license: *const c_char);
    pub fn gtk_about_dialog_set_license_type(about: *mut GtkAboutDialog, license_type: GtkLicense);
    pub fn gtk_about_dialog_set_logo(about: *mut GtkAboutDialog, logo: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_about_dialog_set_logo_icon_name(about: *mut GtkAboutDialog, icon_name: *const c_char);
    pub fn gtk_about_dialog_set_program_name(about: *mut GtkAboutDialog, name: *const c_char);
    pub fn gtk_about_dialog_set_translator_credits(about: *mut GtkAboutDialog, translator_credits: *const c_char);
    pub fn gtk_about_dialog_set_version(about: *mut GtkAboutDialog, version: *const c_char);
    pub fn gtk_about_dialog_set_website(about: *mut GtkAboutDialog, website: *const c_char);
    pub fn gtk_about_dialog_set_website_label(about: *mut GtkAboutDialog, website_label: *const c_char);
    pub fn gtk_about_dialog_set_wrap_license(about: *mut GtkAboutDialog, wrap_license: gboolean);

    //=========================================================================
    // GtkAccelGroup
    //=========================================================================
    pub fn gtk_accel_group_get_type() -> GType;
    pub fn gtk_accel_group_new() -> *mut GtkAccelGroup;
    pub fn gtk_accel_group_from_accel_closure(closure: *mut gobject::GClosure) -> *mut GtkAccelGroup;
    pub fn gtk_accel_group_activate(accel_group: *mut GtkAccelGroup, accel_quark: glib::GQuark, acceleratable: *mut gobject::GObject, accel_key: c_uint, accel_mods: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_accel_group_connect(accel_group: *mut GtkAccelGroup, accel_key: c_uint, accel_mods: gdk::GdkModifierType, accel_flags: GtkAccelFlags, closure: *mut gobject::GClosure);
    pub fn gtk_accel_group_connect_by_path(accel_group: *mut GtkAccelGroup, accel_path: *const c_char, closure: *mut gobject::GClosure);
    pub fn gtk_accel_group_disconnect(accel_group: *mut GtkAccelGroup, closure: *mut gobject::GClosure) -> gboolean;
    pub fn gtk_accel_group_disconnect_key(accel_group: *mut GtkAccelGroup, accel_key: c_uint, accel_mods: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_accel_group_find(accel_group: *mut GtkAccelGroup, find_func: GtkAccelGroupFindFunc, data: gpointer) -> *mut GtkAccelKey;
    pub fn gtk_accel_group_get_is_locked(accel_group: *mut GtkAccelGroup) -> gboolean;
    pub fn gtk_accel_group_get_modifier_mask(accel_group: *mut GtkAccelGroup) -> gdk::GdkModifierType;
    pub fn gtk_accel_group_lock(accel_group: *mut GtkAccelGroup);
    pub fn gtk_accel_group_query(accel_group: *mut GtkAccelGroup, accel_key: c_uint, accel_mods: gdk::GdkModifierType, n_entries: *mut c_uint) -> *mut GtkAccelGroupEntry;
    pub fn gtk_accel_group_unlock(accel_group: *mut GtkAccelGroup);

    //=========================================================================
    // GtkAccelLabel
    //=========================================================================
    pub fn gtk_accel_label_get_type() -> GType;
    pub fn gtk_accel_label_new(string: *const c_char) -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_accel_label_get_accel(accel_label: *mut GtkAccelLabel, accelerator_key: *mut c_uint, accelerator_mods: *mut gdk::GdkModifierType);
    pub fn gtk_accel_label_get_accel_widget(accel_label: *mut GtkAccelLabel) -> *mut GtkWidget;
    pub fn gtk_accel_label_get_accel_width(accel_label: *mut GtkAccelLabel) -> c_uint;
    pub fn gtk_accel_label_refetch(accel_label: *mut GtkAccelLabel) -> gboolean;
    #[cfg(gtk_3_6)]
    pub fn gtk_accel_label_set_accel(accel_label: *mut GtkAccelLabel, accelerator_key: c_uint, accelerator_mods: gdk::GdkModifierType);
    pub fn gtk_accel_label_set_accel_closure(accel_label: *mut GtkAccelLabel, accel_closure: *mut gobject::GClosure);
    pub fn gtk_accel_label_set_accel_widget(accel_label: *mut GtkAccelLabel, accel_widget: *mut GtkWidget);

    //=========================================================================
    // GtkAccelMap
    //=========================================================================
    pub fn gtk_accel_map_get_type() -> GType;
    pub fn gtk_accel_map_add_entry(accel_path: *const c_char, accel_key: c_uint, accel_mods: gdk::GdkModifierType);
    pub fn gtk_accel_map_add_filter(filter_pattern: *const c_char);
    pub fn gtk_accel_map_change_entry(accel_path: *const c_char, accel_key: c_uint, accel_mods: gdk::GdkModifierType, replace: gboolean) -> gboolean;
    pub fn gtk_accel_map_foreach(data: gpointer, foreach_func: GtkAccelMapForeach);
    pub fn gtk_accel_map_foreach_unfiltered(data: gpointer, foreach_func: GtkAccelMapForeach);
    pub fn gtk_accel_map_get() -> *mut GtkAccelMap;
    pub fn gtk_accel_map_load(file_name: *mut c_char);
    pub fn gtk_accel_map_load_fd(fd: c_int);
    pub fn gtk_accel_map_load_scanner(scanner: *mut glib::GScanner);
    pub fn gtk_accel_map_lock_path(accel_path: *const c_char);
    pub fn gtk_accel_map_lookup_entry(accel_path: *const c_char, key: *mut GtkAccelKey) -> gboolean;
    pub fn gtk_accel_map_save(file_name: *mut c_char);
    pub fn gtk_accel_map_save_fd(fd: c_int);
    pub fn gtk_accel_map_unlock_path(accel_path: *const c_char);

    //=========================================================================
    // GtkAccessible
    //=========================================================================
    pub fn gtk_accessible_get_type() -> GType;
    pub fn gtk_accessible_connect_widget_destroyed(accessible: *mut GtkAccessible);
    pub fn gtk_accessible_get_widget(accessible: *mut GtkAccessible) -> *mut GtkWidget;
    pub fn gtk_accessible_set_widget(accessible: *mut GtkAccessible, widget: *mut GtkWidget);

    //=========================================================================
    // GtkAction
    //=========================================================================
    pub fn gtk_action_get_type() -> GType;
    pub fn gtk_action_new(name: *const c_char, label: *const c_char, tooltip: *const c_char, stock_id: *const c_char) -> *mut GtkAction;
    pub fn gtk_action_activate(action: *mut GtkAction);
    pub fn gtk_action_block_activate(action: *mut GtkAction);
    pub fn gtk_action_connect_accelerator(action: *mut GtkAction);
    pub fn gtk_action_create_icon(action: *mut GtkAction, icon_size: c_int) -> *mut GtkWidget;
    pub fn gtk_action_create_menu(action: *mut GtkAction) -> *mut GtkWidget;
    pub fn gtk_action_create_menu_item(action: *mut GtkAction) -> *mut GtkWidget;
    pub fn gtk_action_create_tool_item(action: *mut GtkAction) -> *mut GtkWidget;
    pub fn gtk_action_disconnect_accelerator(action: *mut GtkAction);
    pub fn gtk_action_get_accel_closure(action: *mut GtkAction) -> *mut gobject::GClosure;
    pub fn gtk_action_get_accel_path(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_always_show_image(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_gicon(action: *mut GtkAction) -> *mut gio::GIcon;
    pub fn gtk_action_get_icon_name(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_is_important(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_label(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_name(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_proxies(action: *mut GtkAction) -> *mut glib::GSList;
    pub fn gtk_action_get_sensitive(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_short_label(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_stock_id(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_tooltip(action: *mut GtkAction) -> *const c_char;
    pub fn gtk_action_get_visible(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_visible_horizontal(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_get_visible_vertical(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_is_sensitive(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_is_visible(action: *mut GtkAction) -> gboolean;
    pub fn gtk_action_set_accel_group(action: *mut GtkAction, accel_group: *mut GtkAccelGroup);
    pub fn gtk_action_set_accel_path(action: *mut GtkAction, accel_path: *const c_char);
    pub fn gtk_action_set_always_show_image(action: *mut GtkAction, always_show: gboolean);
    pub fn gtk_action_set_gicon(action: *mut GtkAction, icon: *mut gio::GIcon);
    pub fn gtk_action_set_icon_name(action: *mut GtkAction, icon_name: *const c_char);
    pub fn gtk_action_set_is_important(action: *mut GtkAction, is_important: gboolean);
    pub fn gtk_action_set_label(action: *mut GtkAction, label: *const c_char);
    pub fn gtk_action_set_sensitive(action: *mut GtkAction, sensitive: gboolean);
    pub fn gtk_action_set_short_label(action: *mut GtkAction, short_label: *const c_char);
    pub fn gtk_action_set_stock_id(action: *mut GtkAction, stock_id: *const c_char);
    pub fn gtk_action_set_tooltip(action: *mut GtkAction, tooltip: *const c_char);
    pub fn gtk_action_set_visible(action: *mut GtkAction, visible: gboolean);
    pub fn gtk_action_set_visible_horizontal(action: *mut GtkAction, visible_horizontal: gboolean);
    pub fn gtk_action_set_visible_vertical(action: *mut GtkAction, visible_vertical: gboolean);
    pub fn gtk_action_unblock_activate(action: *mut GtkAction);

    //=========================================================================
    // GtkActionBar
    //=========================================================================
    pub fn gtk_action_bar_get_type() -> GType;
    #[cfg(gtk_3_12)]
    pub fn gtk_action_bar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_action_bar_get_center_widget(action_bar: *mut GtkActionBar) -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_action_bar_pack_end(action_bar: *mut GtkActionBar, child: *mut GtkWidget);
    #[cfg(gtk_3_12)]
    pub fn gtk_action_bar_pack_start(action_bar: *mut GtkActionBar, child: *mut GtkWidget);
    #[cfg(gtk_3_12)]
    pub fn gtk_action_bar_set_center_widget(action_bar: *mut GtkActionBar, center_widget: *mut GtkWidget);

    //=========================================================================
    // GtkActionGroup
    //=========================================================================
    pub fn gtk_action_group_get_type() -> GType;
    pub fn gtk_action_group_new(name: *const c_char) -> *mut GtkActionGroup;
    pub fn gtk_action_group_add_action(action_group: *mut GtkActionGroup, action: *mut GtkAction);
    pub fn gtk_action_group_add_action_with_accel(action_group: *mut GtkActionGroup, action: *mut GtkAction, accelerator: *const c_char);
    pub fn gtk_action_group_add_actions(action_group: *mut GtkActionGroup, entries: *mut GtkActionEntry, n_entries: c_uint, user_data: gpointer);
    pub fn gtk_action_group_add_actions_full(action_group: *mut GtkActionGroup, entries: *mut GtkActionEntry, n_entries: c_uint, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_action_group_add_radio_actions(action_group: *mut GtkActionGroup, entries: *mut GtkRadioActionEntry, n_entries: c_uint, value: c_int, on_change: gobject::GCallback, user_data: gpointer);
    pub fn gtk_action_group_add_radio_actions_full(action_group: *mut GtkActionGroup, entries: *mut GtkRadioActionEntry, n_entries: c_uint, value: c_int, on_change: gobject::GCallback, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_action_group_add_toggle_actions(action_group: *mut GtkActionGroup, entries: *mut GtkToggleActionEntry, n_entries: c_uint, user_data: gpointer);
    pub fn gtk_action_group_add_toggle_actions_full(action_group: *mut GtkActionGroup, entries: *mut GtkToggleActionEntry, n_entries: c_uint, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_6)]
    pub fn gtk_action_group_get_accel_group(action_group: *mut GtkActionGroup) -> *mut GtkAccelGroup;
    pub fn gtk_action_group_get_action(action_group: *mut GtkActionGroup, action_name: *const c_char) -> *mut GtkAction;
    pub fn gtk_action_group_get_name(action_group: *mut GtkActionGroup) -> *const c_char;
    pub fn gtk_action_group_get_sensitive(action_group: *mut GtkActionGroup) -> gboolean;
    pub fn gtk_action_group_get_visible(action_group: *mut GtkActionGroup) -> gboolean;
    pub fn gtk_action_group_list_actions(action_group: *mut GtkActionGroup) -> *mut glib::GList;
    pub fn gtk_action_group_remove_action(action_group: *mut GtkActionGroup, action: *mut GtkAction);
    #[cfg(gtk_3_6)]
    pub fn gtk_action_group_set_accel_group(action_group: *mut GtkActionGroup, accel_group: *mut GtkAccelGroup);
    pub fn gtk_action_group_set_sensitive(action_group: *mut GtkActionGroup, sensitive: gboolean);
    pub fn gtk_action_group_set_translate_func(action_group: *mut GtkActionGroup, func: GtkTranslateFunc, data: gpointer, notify: glib::GDestroyNotify);
    pub fn gtk_action_group_set_translation_domain(action_group: *mut GtkActionGroup, domain: *const c_char);
    pub fn gtk_action_group_set_visible(action_group: *mut GtkActionGroup, visible: gboolean);
    pub fn gtk_action_group_translate_string(action_group: *mut GtkActionGroup, string: *const c_char) -> *const c_char;

    //=========================================================================
    // GtkAdjustment
    //=========================================================================
    pub fn gtk_adjustment_get_type() -> GType;
    pub fn gtk_adjustment_new(value: c_double, lower: c_double, upper: c_double, step_increment: c_double, page_increment: c_double, page_size: c_double) -> *mut GtkAdjustment;
    pub fn gtk_adjustment_changed(adjustment: *mut GtkAdjustment);
    pub fn gtk_adjustment_clamp_page(adjustment: *mut GtkAdjustment, lower: c_double, upper: c_double);
    pub fn gtk_adjustment_configure(adjustment: *mut GtkAdjustment, value: c_double, lower: c_double, upper: c_double, step_increment: c_double, page_increment: c_double, page_size: c_double);
    pub fn gtk_adjustment_get_lower(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_minimum_increment(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_page_increment(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_page_size(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_step_increment(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_upper(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_get_value(adjustment: *mut GtkAdjustment) -> c_double;
    pub fn gtk_adjustment_set_lower(adjustment: *mut GtkAdjustment, lower: c_double);
    pub fn gtk_adjustment_set_page_increment(adjustment: *mut GtkAdjustment, page_increment: c_double);
    pub fn gtk_adjustment_set_page_size(adjustment: *mut GtkAdjustment, page_size: c_double);
    pub fn gtk_adjustment_set_step_increment(adjustment: *mut GtkAdjustment, step_increment: c_double);
    pub fn gtk_adjustment_set_upper(adjustment: *mut GtkAdjustment, upper: c_double);
    pub fn gtk_adjustment_set_value(adjustment: *mut GtkAdjustment, value: c_double);
    pub fn gtk_adjustment_value_changed(adjustment: *mut GtkAdjustment);

    //=========================================================================
    // GtkAlignment
    //=========================================================================
    pub fn gtk_alignment_get_type() -> GType;
    pub fn gtk_alignment_new(xalign: c_float, yalign: c_float, xscale: c_float, yscale: c_float) -> *mut GtkWidget;
    pub fn gtk_alignment_get_padding(alignment: *mut GtkAlignment, padding_top: *mut c_uint, padding_bottom: *mut c_uint, padding_left: *mut c_uint, padding_right: *mut c_uint);
    pub fn gtk_alignment_set(alignment: *mut GtkAlignment, xalign: c_float, yalign: c_float, xscale: c_float, yscale: c_float);
    pub fn gtk_alignment_set_padding(alignment: *mut GtkAlignment, padding_top: c_uint, padding_bottom: c_uint, padding_left: c_uint, padding_right: c_uint);

    //=========================================================================
    // GtkAppChooserButton
    //=========================================================================
    pub fn gtk_app_chooser_button_get_type() -> GType;
    pub fn gtk_app_chooser_button_new(content_type: *const c_char) -> *mut GtkWidget;
    pub fn gtk_app_chooser_button_append_custom_item(self_: *mut GtkAppChooserButton, name: *const c_char, label: *const c_char, icon: *mut gio::GIcon);
    pub fn gtk_app_chooser_button_append_separator(self_: *mut GtkAppChooserButton);
    pub fn gtk_app_chooser_button_get_heading(self_: *mut GtkAppChooserButton) -> *const c_char;
    pub fn gtk_app_chooser_button_get_show_default_item(self_: *mut GtkAppChooserButton) -> gboolean;
    pub fn gtk_app_chooser_button_get_show_dialog_item(self_: *mut GtkAppChooserButton) -> gboolean;
    pub fn gtk_app_chooser_button_set_active_custom_item(self_: *mut GtkAppChooserButton, name: *const c_char);
    pub fn gtk_app_chooser_button_set_heading(self_: *mut GtkAppChooserButton, heading: *const c_char);
    pub fn gtk_app_chooser_button_set_show_default_item(self_: *mut GtkAppChooserButton, setting: gboolean);
    pub fn gtk_app_chooser_button_set_show_dialog_item(self_: *mut GtkAppChooserButton, setting: gboolean);

    //=========================================================================
    // GtkAppChooserDialog
    //=========================================================================
    pub fn gtk_app_chooser_dialog_get_type() -> GType;
    pub fn gtk_app_chooser_dialog_new(parent: *mut GtkWindow, flags: GtkDialogFlags, file: *mut gio::GFile) -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_new_for_content_type(parent: *mut GtkWindow, flags: GtkDialogFlags, content_type: *const c_char) -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_get_heading(self_: *mut GtkAppChooserDialog) -> *const c_char;
    pub fn gtk_app_chooser_dialog_get_widget(self_: *mut GtkAppChooserDialog) -> *mut GtkWidget;
    pub fn gtk_app_chooser_dialog_set_heading(self_: *mut GtkAppChooserDialog, heading: *const c_char);

    //=========================================================================
    // GtkAppChooserWidget
    //=========================================================================
    pub fn gtk_app_chooser_widget_get_type() -> GType;
    pub fn gtk_app_chooser_widget_new(content_type: *const c_char) -> *mut GtkWidget;
    pub fn gtk_app_chooser_widget_get_default_text(self_: *mut GtkAppChooserWidget) -> *const c_char;
    pub fn gtk_app_chooser_widget_get_show_all(self_: *mut GtkAppChooserWidget) -> gboolean;
    pub fn gtk_app_chooser_widget_get_show_default(self_: *mut GtkAppChooserWidget) -> gboolean;
    pub fn gtk_app_chooser_widget_get_show_fallback(self_: *mut GtkAppChooserWidget) -> gboolean;
    pub fn gtk_app_chooser_widget_get_show_other(self_: *mut GtkAppChooserWidget) -> gboolean;
    pub fn gtk_app_chooser_widget_get_show_recommended(self_: *mut GtkAppChooserWidget) -> gboolean;
    pub fn gtk_app_chooser_widget_set_default_text(self_: *mut GtkAppChooserWidget, text: *const c_char);
    pub fn gtk_app_chooser_widget_set_show_all(self_: *mut GtkAppChooserWidget, setting: gboolean);
    pub fn gtk_app_chooser_widget_set_show_default(self_: *mut GtkAppChooserWidget, setting: gboolean);
    pub fn gtk_app_chooser_widget_set_show_fallback(self_: *mut GtkAppChooserWidget, setting: gboolean);
    pub fn gtk_app_chooser_widget_set_show_other(self_: *mut GtkAppChooserWidget, setting: gboolean);
    pub fn gtk_app_chooser_widget_set_show_recommended(self_: *mut GtkAppChooserWidget, setting: gboolean);

    //=========================================================================
    // GtkApplication
    //=========================================================================
    pub fn gtk_application_get_type() -> GType;
    pub fn gtk_application_new(application_id: *const c_char, flags: gio::GApplicationFlags) -> *mut GtkApplication;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_add_accelerator(application: *mut GtkApplication, accelerator: *const c_char, action_name: *const c_char, parameter: *mut glib::GVariant);
    pub fn gtk_application_add_window(application: *mut GtkApplication, window: *mut GtkWindow);
    #[cfg(gtk_3_12)]
    pub fn gtk_application_get_accels_for_action(application: *mut GtkApplication, detailed_action_name: *const c_char) -> *mut *mut c_char;
    #[cfg(gtk_3_14)]
    pub fn gtk_application_get_actions_for_accel(application: *mut GtkApplication, accel: *const c_char) -> *mut *mut c_char;
    #[cfg(gtk_3_6)]
    pub fn gtk_application_get_active_window(application: *mut GtkApplication) -> *mut GtkWindow;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_get_app_menu(application: *mut GtkApplication) -> *mut gio::GMenuModel;
    #[cfg(gtk_3_14)]
    pub fn gtk_application_get_menu_by_id(application: *mut GtkApplication, id: *const c_char) -> *mut gio::GMenu;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_get_menubar(application: *mut GtkApplication) -> *mut gio::GMenuModel;
    #[cfg(gtk_3_6)]
    pub fn gtk_application_get_window_by_id(application: *mut GtkApplication, id: c_uint) -> *mut GtkWindow;
    pub fn gtk_application_get_windows(application: *mut GtkApplication) -> *mut glib::GList;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_inhibit(application: *mut GtkApplication, window: *mut GtkWindow, flags: GtkApplicationInhibitFlags, reason: *const c_char) -> c_uint;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_is_inhibited(application: *mut GtkApplication, flags: GtkApplicationInhibitFlags) -> gboolean;
    #[cfg(gtk_3_12)]
    pub fn gtk_application_list_action_descriptions(application: *mut GtkApplication) -> *mut *mut c_char;
    #[cfg(gtk_3_14)]
    pub fn gtk_application_prefers_app_menu(application: *mut GtkApplication) -> gboolean;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_remove_accelerator(application: *mut GtkApplication, action_name: *const c_char, parameter: *mut glib::GVariant);
    pub fn gtk_application_remove_window(application: *mut GtkApplication, window: *mut GtkWindow);
    #[cfg(gtk_3_12)]
    pub fn gtk_application_set_accels_for_action(application: *mut GtkApplication, detailed_action_name: *const c_char, accels: *mut *mut c_char);
    #[cfg(gtk_3_4)]
    pub fn gtk_application_set_app_menu(application: *mut GtkApplication, app_menu: *mut gio::GMenuModel);
    #[cfg(gtk_3_4)]
    pub fn gtk_application_set_menubar(application: *mut GtkApplication, menubar: *mut gio::GMenuModel);
    #[cfg(gtk_3_4)]
    pub fn gtk_application_uninhibit(application: *mut GtkApplication, cookie: c_uint);

    //=========================================================================
    // GtkApplicationWindow
    //=========================================================================
    pub fn gtk_application_window_get_type() -> GType;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_window_new(application: *mut GtkApplication) -> *mut GtkWidget;
    #[cfg(gtk_3_6)]
    pub fn gtk_application_window_get_id(window: *mut GtkApplicationWindow) -> c_uint;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_window_get_show_menubar(window: *mut GtkApplicationWindow) -> gboolean;
    #[cfg(gtk_3_4)]
    pub fn gtk_application_window_set_show_menubar(window: *mut GtkApplicationWindow, show_menubar: gboolean);

    //=========================================================================
    // GtkArrow
    //=========================================================================
    pub fn gtk_arrow_get_type() -> GType;
    pub fn gtk_arrow_new(arrow_type: GtkArrowType, shadow_type: GtkShadowType) -> *mut GtkWidget;
    pub fn gtk_arrow_set(arrow: *mut GtkArrow, arrow_type: GtkArrowType, shadow_type: GtkShadowType);

    //=========================================================================
    // GtkArrowAccessible
    //=========================================================================
    pub fn gtk_arrow_accessible_get_type() -> GType;

    //=========================================================================
    // GtkAspectFrame
    //=========================================================================
    pub fn gtk_aspect_frame_get_type() -> GType;
    pub fn gtk_aspect_frame_new(label: *const c_char, xalign: c_float, yalign: c_float, ratio: c_float, obey_child: gboolean) -> *mut GtkWidget;
    pub fn gtk_aspect_frame_set(aspect_frame: *mut GtkAspectFrame, xalign: c_float, yalign: c_float, ratio: c_float, obey_child: gboolean);

    //=========================================================================
    // GtkAssistant
    //=========================================================================
    pub fn gtk_assistant_get_type() -> GType;
    pub fn gtk_assistant_new() -> *mut GtkWidget;
    pub fn gtk_assistant_add_action_widget(assistant: *mut GtkAssistant, child: *mut GtkWidget);
    pub fn gtk_assistant_append_page(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> c_int;
    pub fn gtk_assistant_commit(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_get_current_page(assistant: *mut GtkAssistant) -> c_int;
    pub fn gtk_assistant_get_n_pages(assistant: *mut GtkAssistant) -> c_int;
    pub fn gtk_assistant_get_nth_page(assistant: *mut GtkAssistant, page_num: c_int) -> *mut GtkWidget;
    pub fn gtk_assistant_get_page_complete(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> gboolean;
    pub fn gtk_assistant_get_page_header_image(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_assistant_get_page_side_image(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_assistant_get_page_title(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> *const c_char;
    pub fn gtk_assistant_get_page_type(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> GtkAssistantPageType;
    pub fn gtk_assistant_insert_page(assistant: *mut GtkAssistant, page: *mut GtkWidget, position: c_int) -> c_int;
    pub fn gtk_assistant_next_page(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_prepend_page(assistant: *mut GtkAssistant, page: *mut GtkWidget) -> c_int;
    pub fn gtk_assistant_previous_page(assistant: *mut GtkAssistant);
    pub fn gtk_assistant_remove_action_widget(assistant: *mut GtkAssistant, child: *mut GtkWidget);
    pub fn gtk_assistant_remove_page(assistant: *mut GtkAssistant, page_num: c_int);
    pub fn gtk_assistant_set_current_page(assistant: *mut GtkAssistant, page_num: c_int);
    pub fn gtk_assistant_set_forward_page_func(assistant: *mut GtkAssistant, page_func: GtkAssistantPageFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_assistant_set_page_complete(assistant: *mut GtkAssistant, page: *mut GtkWidget, complete: gboolean);
    pub fn gtk_assistant_set_page_header_image(assistant: *mut GtkAssistant, page: *mut GtkWidget, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_assistant_set_page_side_image(assistant: *mut GtkAssistant, page: *mut GtkWidget, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_assistant_set_page_title(assistant: *mut GtkAssistant, page: *mut GtkWidget, title: *const c_char);
    pub fn gtk_assistant_set_page_type(assistant: *mut GtkAssistant, page: *mut GtkWidget, type_: GtkAssistantPageType);
    pub fn gtk_assistant_update_buttons_state(assistant: *mut GtkAssistant);

    //=========================================================================
    // GtkBin
    //=========================================================================
    pub fn gtk_bin_get_type() -> GType;
    pub fn gtk_bin_get_child(bin: *mut GtkBin) -> *mut GtkWidget;

    //=========================================================================
    // GtkBooleanCellAccessible
    //=========================================================================
    pub fn gtk_boolean_cell_accessible_get_type() -> GType;

    //=========================================================================
    // GtkBox
    //=========================================================================
    pub fn gtk_box_get_type() -> GType;
    pub fn gtk_box_new(orientation: GtkOrientation, spacing: c_int) -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_box_get_baseline_position(box_: *mut GtkBox) -> GtkBaselinePosition;
    #[cfg(gtk_3_12)]
    pub fn gtk_box_get_center_widget(box_: *mut GtkBox) -> *mut GtkWidget;
    pub fn gtk_box_get_homogeneous(box_: *mut GtkBox) -> gboolean;
    pub fn gtk_box_get_spacing(box_: *mut GtkBox) -> c_int;
    pub fn gtk_box_pack_end(box_: *mut GtkBox, child: *mut GtkWidget, expand: gboolean, fill: gboolean, padding: c_uint);
    pub fn gtk_box_pack_start(box_: *mut GtkBox, child: *mut GtkWidget, expand: gboolean, fill: gboolean, padding: c_uint);
    pub fn gtk_box_query_child_packing(box_: *mut GtkBox, child: *mut GtkWidget, expand: *mut gboolean, fill: *mut gboolean, padding: *mut c_uint, pack_type: *mut GtkPackType);
    pub fn gtk_box_reorder_child(box_: *mut GtkBox, child: *mut GtkWidget, position: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_box_set_baseline_position(box_: *mut GtkBox, position: GtkBaselinePosition);
    #[cfg(gtk_3_12)]
    pub fn gtk_box_set_center_widget(box_: *mut GtkBox, widget: *mut GtkWidget);
    pub fn gtk_box_set_child_packing(box_: *mut GtkBox, child: *mut GtkWidget, expand: gboolean, fill: gboolean, padding: c_uint, pack_type: GtkPackType);
    pub fn gtk_box_set_homogeneous(box_: *mut GtkBox, homogeneous: gboolean);
    pub fn gtk_box_set_spacing(box_: *mut GtkBox, spacing: c_int);

    //=========================================================================
    // GtkBuilder
    //=========================================================================
    pub fn gtk_builder_get_type() -> GType;
    pub fn gtk_builder_new() -> *mut GtkBuilder;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_new_from_file(filename: *const c_char) -> *mut GtkBuilder;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_new_from_resource(resource_path: *const c_char) -> *mut GtkBuilder;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_new_from_string(string: *const c_char, length: ssize_t) -> *mut GtkBuilder;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_add_callback_symbol(builder: *mut GtkBuilder, callback_name: *const c_char, callback_symbol: gobject::GCallback);
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_add_callback_symbols(builder: *mut GtkBuilder, first_callback_name: *const c_char, first_callback_symbol: gobject::GCallback, ...);
    pub fn gtk_builder_add_from_file(builder: *mut GtkBuilder, filename: *const c_char, error: *mut *mut glib::GError) -> c_uint;
    #[cfg(gtk_3_4)]
    pub fn gtk_builder_add_from_resource(builder: *mut GtkBuilder, resource_path: *const c_char, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_builder_add_from_string(builder: *mut GtkBuilder, buffer: *const c_char, length: size_t, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_builder_add_objects_from_file(builder: *mut GtkBuilder, filename: *const c_char, object_ids: *mut *mut c_char, error: *mut *mut glib::GError) -> c_uint;
    #[cfg(gtk_3_4)]
    pub fn gtk_builder_add_objects_from_resource(builder: *mut GtkBuilder, resource_path: *const c_char, object_ids: *mut *mut c_char, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_builder_add_objects_from_string(builder: *mut GtkBuilder, buffer: *const c_char, length: size_t, object_ids: *mut *mut c_char, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_builder_connect_signals(builder: *mut GtkBuilder, user_data: gpointer);
    pub fn gtk_builder_connect_signals_full(builder: *mut GtkBuilder, func: GtkBuilderConnectFunc, user_data: gpointer);
    #[cfg(gtk_3_8)]
    pub fn gtk_builder_expose_object(builder: *mut GtkBuilder, name: *const c_char, object: *mut gobject::GObject);
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_get_application(builder: *mut GtkBuilder) -> *mut GtkApplication;
    pub fn gtk_builder_get_object(builder: *mut GtkBuilder, name: *const c_char) -> *mut gobject::GObject;
    pub fn gtk_builder_get_objects(builder: *mut GtkBuilder) -> *mut glib::GSList;
    pub fn gtk_builder_get_translation_domain(builder: *mut GtkBuilder) -> *const c_char;
    pub fn gtk_builder_get_type_from_name(builder: *mut GtkBuilder, type_name: *const c_char) -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_lookup_callback_symbol(builder: *mut GtkBuilder, callback_name: *const c_char) -> gobject::GCallback;
    #[cfg(gtk_3_10)]
    pub fn gtk_builder_set_application(builder: *mut GtkBuilder, application: *mut GtkApplication);
    pub fn gtk_builder_set_translation_domain(builder: *mut GtkBuilder, domain: *const c_char);
    pub fn gtk_builder_value_from_string(builder: *mut GtkBuilder, pspec: *mut gobject::GParamSpec, string: *const c_char, value: *mut gobject::GValue, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_builder_value_from_string_type(builder: *mut GtkBuilder, type_: GType, string: *const c_char, value: *mut gobject::GValue, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // GtkButton
    //=========================================================================
    pub fn gtk_button_get_type() -> GType;
    pub fn gtk_button_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_button_new_from_icon_name(icon_name: *const c_char, size: c_int) -> *mut GtkWidget;
    pub fn gtk_button_new_from_stock(stock_id: *const c_char) -> *mut GtkWidget;
    pub fn gtk_button_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_button_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_button_clicked(button: *mut GtkButton);
    pub fn gtk_button_enter(button: *mut GtkButton);
    pub fn gtk_button_get_alignment(button: *mut GtkButton, xalign: *mut c_float, yalign: *mut c_float);
    #[cfg(gtk_3_6)]
    pub fn gtk_button_get_always_show_image(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_get_event_window(button: *mut GtkButton) -> *mut gdk::GdkWindow;
    pub fn gtk_button_get_focus_on_click(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_get_image(button: *mut GtkButton) -> *mut GtkWidget;
    pub fn gtk_button_get_image_position(button: *mut GtkButton) -> GtkPositionType;
    pub fn gtk_button_get_label(button: *mut GtkButton) -> *const c_char;
    pub fn gtk_button_get_relief(button: *mut GtkButton) -> GtkReliefStyle;
    pub fn gtk_button_get_use_stock(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_get_use_underline(button: *mut GtkButton) -> gboolean;
    pub fn gtk_button_leave(button: *mut GtkButton);
    pub fn gtk_button_pressed(button: *mut GtkButton);
    pub fn gtk_button_released(button: *mut GtkButton);
    pub fn gtk_button_set_alignment(button: *mut GtkButton, xalign: c_float, yalign: c_float);
    #[cfg(gtk_3_6)]
    pub fn gtk_button_set_always_show_image(button: *mut GtkButton, always_show: gboolean);
    pub fn gtk_button_set_focus_on_click(button: *mut GtkButton, focus_on_click: gboolean);
    pub fn gtk_button_set_image(button: *mut GtkButton, image: *mut GtkWidget);
    pub fn gtk_button_set_image_position(button: *mut GtkButton, position: GtkPositionType);
    pub fn gtk_button_set_label(button: *mut GtkButton, label: *const c_char);
    pub fn gtk_button_set_relief(button: *mut GtkButton, relief: GtkReliefStyle);
    pub fn gtk_button_set_use_stock(button: *mut GtkButton, use_stock: gboolean);
    pub fn gtk_button_set_use_underline(button: *mut GtkButton, use_underline: gboolean);

    //=========================================================================
    // GtkButtonAccessible
    //=========================================================================
    pub fn gtk_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkButtonBox
    //=========================================================================
    pub fn gtk_button_box_get_type() -> GType;
    pub fn gtk_button_box_new(orientation: GtkOrientation) -> *mut GtkWidget;
    pub fn gtk_button_box_get_child_non_homogeneous(widget: *mut GtkButtonBox, child: *mut GtkWidget) -> gboolean;
    pub fn gtk_button_box_get_child_secondary(widget: *mut GtkButtonBox, child: *mut GtkWidget) -> gboolean;
    pub fn gtk_button_box_get_layout(widget: *mut GtkButtonBox) -> GtkButtonBoxStyle;
    pub fn gtk_button_box_set_child_non_homogeneous(widget: *mut GtkButtonBox, child: *mut GtkWidget, non_homogeneous: gboolean);
    pub fn gtk_button_box_set_child_secondary(widget: *mut GtkButtonBox, child: *mut GtkWidget, is_secondary: gboolean);
    pub fn gtk_button_box_set_layout(widget: *mut GtkButtonBox, layout_style: GtkButtonBoxStyle);

    //=========================================================================
    // GtkCalendar
    //=========================================================================
    pub fn gtk_calendar_get_type() -> GType;
    pub fn gtk_calendar_new() -> *mut GtkWidget;
    pub fn gtk_calendar_clear_marks(calendar: *mut GtkCalendar);
    pub fn gtk_calendar_get_date(calendar: *mut GtkCalendar, year: *mut c_uint, month: *mut c_uint, day: *mut c_uint);
    pub fn gtk_calendar_get_day_is_marked(calendar: *mut GtkCalendar, day: c_uint) -> gboolean;
    pub fn gtk_calendar_get_detail_height_rows(calendar: *mut GtkCalendar) -> c_int;
    pub fn gtk_calendar_get_detail_width_chars(calendar: *mut GtkCalendar) -> c_int;
    pub fn gtk_calendar_get_display_options(calendar: *mut GtkCalendar) -> GtkCalendarDisplayOptions;
    pub fn gtk_calendar_mark_day(calendar: *mut GtkCalendar, day: c_uint);
    pub fn gtk_calendar_select_day(calendar: *mut GtkCalendar, day: c_uint);
    pub fn gtk_calendar_select_month(calendar: *mut GtkCalendar, month: c_uint, year: c_uint);
    pub fn gtk_calendar_set_detail_func(calendar: *mut GtkCalendar, func: GtkCalendarDetailFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_calendar_set_detail_height_rows(calendar: *mut GtkCalendar, rows: c_int);
    pub fn gtk_calendar_set_detail_width_chars(calendar: *mut GtkCalendar, chars: c_int);
    pub fn gtk_calendar_set_display_options(calendar: *mut GtkCalendar, flags: GtkCalendarDisplayOptions);
    pub fn gtk_calendar_unmark_day(calendar: *mut GtkCalendar, day: c_uint);

    //=========================================================================
    // GtkCellAccessible
    //=========================================================================
    pub fn gtk_cell_accessible_get_type() -> GType;

    //=========================================================================
    // GtkCellArea
    //=========================================================================
    pub fn gtk_cell_area_get_type() -> GType;
    pub fn gtk_cell_area_activate(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState, edit_only: gboolean) -> gboolean;
    pub fn gtk_cell_area_activate_cell(area: *mut GtkCellArea, widget: *mut GtkWidget, renderer: *mut GtkCellRenderer, event: *mut gdk::GdkEvent, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState) -> gboolean;
    pub fn gtk_cell_area_add(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_add_focus_sibling(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, sibling: *mut GtkCellRenderer);
    pub fn gtk_cell_area_add_with_properties(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, first_prop_name: *const c_char, ...);
    pub fn gtk_cell_area_apply_attributes(area: *mut GtkCellArea, tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, is_expander: gboolean, is_expanded: gboolean);
    pub fn gtk_cell_area_attribute_connect(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, attribute: *const c_char, column: c_int);
    pub fn gtk_cell_area_attribute_disconnect(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, attribute: *const c_char);
    #[cfg(gtk_3_14)]
    pub fn gtk_cell_area_attribute_get_column(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, attribute: *const c_char) -> c_int;
    pub fn gtk_cell_area_cell_get(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, first_prop_name: *const c_char, ...);
    pub fn gtk_cell_area_cell_get_property(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_cell_area_cell_get_valist(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_cell_area_cell_set(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, first_prop_name: *const c_char, ...);
    pub fn gtk_cell_area_cell_set_property(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, property_name: *const c_char, value: *const gobject::GValue);
    //pub fn gtk_cell_area_cell_set_valist(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_cell_area_copy_context(area: *mut GtkCellArea, context: *mut GtkCellAreaContext) -> *mut GtkCellAreaContext;
    pub fn gtk_cell_area_create_context(area: *mut GtkCellArea) -> *mut GtkCellAreaContext;
    pub fn gtk_cell_area_event(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, event: *mut gdk::GdkEvent, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState) -> c_int;
    pub fn gtk_cell_area_focus(area: *mut GtkCellArea, direction: GtkDirectionType) -> gboolean;
    pub fn gtk_cell_area_foreach(area: *mut GtkCellArea, callback: GtkCellCallback, callback_data: gpointer);
    pub fn gtk_cell_area_foreach_alloc(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, cell_area: *const gdk::GdkRectangle, background_area: *const gdk::GdkRectangle, callback: GtkCellAllocCallback, callback_data: gpointer);
    pub fn gtk_cell_area_get_cell_allocation(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, renderer: *mut GtkCellRenderer, cell_area: *const gdk::GdkRectangle, allocation: *mut gdk::GdkRectangle);
    pub fn gtk_cell_area_get_cell_at_position(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, cell_area: *const gdk::GdkRectangle, x: c_int, y: c_int, alloc_area: *mut gdk::GdkRectangle) -> *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_current_path_string(area: *mut GtkCellArea) -> *const c_char;
    pub fn gtk_cell_area_get_edit_widget(area: *mut GtkCellArea) -> *mut GtkCellEditable;
    pub fn gtk_cell_area_get_edited_cell(area: *mut GtkCellArea) -> *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_focus_cell(area: *mut GtkCellArea) -> *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_focus_from_sibling(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer) -> *mut GtkCellRenderer;
    pub fn gtk_cell_area_get_focus_siblings(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer) -> *const glib::GList;
    pub fn gtk_cell_area_get_preferred_height(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_cell_area_get_preferred_height_for_width(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, width: c_int, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_cell_area_get_preferred_width(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_cell_area_get_preferred_width_for_height(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, height: c_int, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_cell_area_get_request_mode(area: *mut GtkCellArea) -> GtkSizeRequestMode;
    pub fn gtk_cell_area_has_renderer(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_cell_area_inner_cell_area(area: *mut GtkCellArea, widget: *mut GtkWidget, cell_area: *const gdk::GdkRectangle, inner_area: *mut gdk::GdkRectangle);
    pub fn gtk_cell_area_is_activatable(area: *mut GtkCellArea) -> gboolean;
    pub fn gtk_cell_area_is_focus_sibling(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, sibling: *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_cell_area_remove(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_remove_focus_sibling(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, sibling: *mut GtkCellRenderer);
    pub fn gtk_cell_area_render(area: *mut GtkCellArea, context: *mut GtkCellAreaContext, widget: *mut GtkWidget, cr: *mut cairo::cairo_t, background_area: *const gdk::GdkRectangle, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState, paint_focus: gboolean);
    pub fn gtk_cell_area_request_renderer(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer, orientation: GtkOrientation, widget: *mut GtkWidget, for_size: c_int, minimum_size: *mut c_int, natural_size: *mut c_int);
    pub fn gtk_cell_area_set_focus_cell(area: *mut GtkCellArea, renderer: *mut GtkCellRenderer);
    pub fn gtk_cell_area_stop_editing(area: *mut GtkCellArea, canceled: gboolean);

    //=========================================================================
    // GtkCellAreaBox
    //=========================================================================
    pub fn gtk_cell_area_box_get_type() -> GType;
    pub fn gtk_cell_area_box_new() -> *mut GtkCellArea;
    pub fn gtk_cell_area_box_get_spacing(box_: *mut GtkCellAreaBox) -> c_int;
    pub fn gtk_cell_area_box_pack_end(box_: *mut GtkCellAreaBox, renderer: *mut GtkCellRenderer, expand: gboolean, align: gboolean, fixed: gboolean);
    pub fn gtk_cell_area_box_pack_start(box_: *mut GtkCellAreaBox, renderer: *mut GtkCellRenderer, expand: gboolean, align: gboolean, fixed: gboolean);
    pub fn gtk_cell_area_box_set_spacing(box_: *mut GtkCellAreaBox, spacing: c_int);

    //=========================================================================
    // GtkCellAreaContext
    //=========================================================================
    pub fn gtk_cell_area_context_get_type() -> GType;
    pub fn gtk_cell_area_context_allocate(context: *mut GtkCellAreaContext, width: c_int, height: c_int);
    pub fn gtk_cell_area_context_get_allocation(context: *mut GtkCellAreaContext, width: *mut c_int, height: *mut c_int);
    pub fn gtk_cell_area_context_get_area(context: *mut GtkCellAreaContext) -> *mut GtkCellArea;
    pub fn gtk_cell_area_context_get_preferred_height(context: *mut GtkCellAreaContext, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_cell_area_context_get_preferred_height_for_width(context: *mut GtkCellAreaContext, width: c_int, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_cell_area_context_get_preferred_width(context: *mut GtkCellAreaContext, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_cell_area_context_get_preferred_width_for_height(context: *mut GtkCellAreaContext, height: c_int, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_cell_area_context_push_preferred_height(context: *mut GtkCellAreaContext, minimum_height: c_int, natural_height: c_int);
    pub fn gtk_cell_area_context_push_preferred_width(context: *mut GtkCellAreaContext, minimum_width: c_int, natural_width: c_int);
    pub fn gtk_cell_area_context_reset(context: *mut GtkCellAreaContext);

    //=========================================================================
    // GtkCellRenderer
    //=========================================================================
    pub fn gtk_cell_renderer_get_type() -> GType;
    pub fn gtk_cell_renderer_activate(cell: *mut GtkCellRenderer, event: *mut gdk::GdkEvent, widget: *mut GtkWidget, path: *const c_char, background_area: *const gdk::GdkRectangle, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState) -> gboolean;
    pub fn gtk_cell_renderer_get_aligned_area(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, flags: GtkCellRendererState, cell_area: *const gdk::GdkRectangle, aligned_area: *mut gdk::GdkRectangle);
    pub fn gtk_cell_renderer_get_alignment(cell: *mut GtkCellRenderer, xalign: *mut c_float, yalign: *mut c_float);
    pub fn gtk_cell_renderer_get_fixed_size(cell: *mut GtkCellRenderer, width: *mut c_int, height: *mut c_int);
    pub fn gtk_cell_renderer_get_padding(cell: *mut GtkCellRenderer, xpad: *mut c_int, ypad: *mut c_int);
    pub fn gtk_cell_renderer_get_preferred_height(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, minimum_size: *mut c_int, natural_size: *mut c_int);
    pub fn gtk_cell_renderer_get_preferred_height_for_width(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, width: c_int, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_cell_renderer_get_preferred_size(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, minimum_size: *mut GtkRequisition, natural_size: *mut GtkRequisition);
    pub fn gtk_cell_renderer_get_preferred_width(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, minimum_size: *mut c_int, natural_size: *mut c_int);
    pub fn gtk_cell_renderer_get_preferred_width_for_height(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, height: c_int, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_cell_renderer_get_request_mode(cell: *mut GtkCellRenderer) -> GtkSizeRequestMode;
    pub fn gtk_cell_renderer_get_sensitive(cell: *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_cell_renderer_get_size(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, cell_area: *const gdk::GdkRectangle, x_offset: *mut c_int, y_offset: *mut c_int, width: *mut c_int, height: *mut c_int);
    pub fn gtk_cell_renderer_get_state(cell: *mut GtkCellRenderer, widget: *mut GtkWidget, cell_state: GtkCellRendererState) -> GtkStateFlags;
    pub fn gtk_cell_renderer_get_visible(cell: *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_cell_renderer_is_activatable(cell: *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_cell_renderer_render(cell: *mut GtkCellRenderer, cr: *mut cairo::cairo_t, widget: *mut GtkWidget, background_area: *const gdk::GdkRectangle, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState);
    pub fn gtk_cell_renderer_set_alignment(cell: *mut GtkCellRenderer, xalign: c_float, yalign: c_float);
    pub fn gtk_cell_renderer_set_fixed_size(cell: *mut GtkCellRenderer, width: c_int, height: c_int);
    pub fn gtk_cell_renderer_set_padding(cell: *mut GtkCellRenderer, xpad: c_int, ypad: c_int);
    pub fn gtk_cell_renderer_set_sensitive(cell: *mut GtkCellRenderer, sensitive: gboolean);
    pub fn gtk_cell_renderer_set_visible(cell: *mut GtkCellRenderer, visible: gboolean);
    pub fn gtk_cell_renderer_start_editing(cell: *mut GtkCellRenderer, event: *mut gdk::GdkEvent, widget: *mut GtkWidget, path: *const c_char, background_area: *const gdk::GdkRectangle, cell_area: *const gdk::GdkRectangle, flags: GtkCellRendererState) -> *mut GtkCellEditable;
    pub fn gtk_cell_renderer_stop_editing(cell: *mut GtkCellRenderer, canceled: gboolean);

    //=========================================================================
    // GtkCellRendererAccel
    //=========================================================================
    pub fn gtk_cell_renderer_accel_get_type() -> GType;
    pub fn gtk_cell_renderer_accel_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererCombo
    //=========================================================================
    pub fn gtk_cell_renderer_combo_get_type() -> GType;
    pub fn gtk_cell_renderer_combo_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererPixbuf
    //=========================================================================
    pub fn gtk_cell_renderer_pixbuf_get_type() -> GType;
    pub fn gtk_cell_renderer_pixbuf_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererProgress
    //=========================================================================
    pub fn gtk_cell_renderer_progress_get_type() -> GType;
    pub fn gtk_cell_renderer_progress_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererSpin
    //=========================================================================
    pub fn gtk_cell_renderer_spin_get_type() -> GType;
    pub fn gtk_cell_renderer_spin_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererSpinner
    //=========================================================================
    pub fn gtk_cell_renderer_spinner_get_type() -> GType;
    pub fn gtk_cell_renderer_spinner_new() -> *mut GtkCellRenderer;

    //=========================================================================
    // GtkCellRendererText
    //=========================================================================
    pub fn gtk_cell_renderer_text_get_type() -> GType;
    pub fn gtk_cell_renderer_text_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_text_set_fixed_height_from_font(renderer: *mut GtkCellRendererText, number_of_rows: c_int);

    //=========================================================================
    // GtkCellRendererToggle
    //=========================================================================
    pub fn gtk_cell_renderer_toggle_get_type() -> GType;
    pub fn gtk_cell_renderer_toggle_new() -> *mut GtkCellRenderer;
    pub fn gtk_cell_renderer_toggle_get_activatable(toggle: *mut GtkCellRendererToggle) -> gboolean;
    pub fn gtk_cell_renderer_toggle_get_active(toggle: *mut GtkCellRendererToggle) -> gboolean;
    pub fn gtk_cell_renderer_toggle_get_radio(toggle: *mut GtkCellRendererToggle) -> gboolean;
    pub fn gtk_cell_renderer_toggle_set_activatable(toggle: *mut GtkCellRendererToggle, setting: gboolean);
    pub fn gtk_cell_renderer_toggle_set_active(toggle: *mut GtkCellRendererToggle, setting: gboolean);
    pub fn gtk_cell_renderer_toggle_set_radio(toggle: *mut GtkCellRendererToggle, radio: gboolean);

    //=========================================================================
    // GtkCellView
    //=========================================================================
    pub fn gtk_cell_view_get_type() -> GType;
    pub fn gtk_cell_view_new() -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_context(area: *mut GtkCellArea, context: *mut GtkCellAreaContext) -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_markup(markup: *const c_char) -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkWidget;
    pub fn gtk_cell_view_new_with_text(text: *const c_char) -> *mut GtkWidget;
    pub fn gtk_cell_view_get_displayed_row(cell_view: *mut GtkCellView) -> *mut GtkTreePath;
    pub fn gtk_cell_view_get_draw_sensitive(cell_view: *mut GtkCellView) -> gboolean;
    pub fn gtk_cell_view_get_fit_model(cell_view: *mut GtkCellView) -> gboolean;
    pub fn gtk_cell_view_get_model(cell_view: *mut GtkCellView) -> *mut GtkTreeModel;
    pub fn gtk_cell_view_get_size_of_row(cell_view: *mut GtkCellView, path: *mut GtkTreePath, requisition: *mut GtkRequisition) -> gboolean;
    pub fn gtk_cell_view_set_background_color(cell_view: *mut GtkCellView, color: *const gdk::GdkColor);
    pub fn gtk_cell_view_set_background_rgba(cell_view: *mut GtkCellView, rgba: *const gdk::GdkRGBA);
    pub fn gtk_cell_view_set_displayed_row(cell_view: *mut GtkCellView, path: *mut GtkTreePath);
    pub fn gtk_cell_view_set_draw_sensitive(cell_view: *mut GtkCellView, draw_sensitive: gboolean);
    pub fn gtk_cell_view_set_fit_model(cell_view: *mut GtkCellView, fit_model: gboolean);
    pub fn gtk_cell_view_set_model(cell_view: *mut GtkCellView, model: *mut GtkTreeModel);

    //=========================================================================
    // GtkCheckButton
    //=========================================================================
    pub fn gtk_check_button_get_type() -> GType;
    pub fn gtk_check_button_new() -> *mut GtkWidget;
    pub fn gtk_check_button_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_check_button_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;

    //=========================================================================
    // GtkCheckMenuItem
    //=========================================================================
    pub fn gtk_check_menu_item_get_type() -> GType;
    pub fn gtk_check_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_check_menu_item_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_check_menu_item_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_check_menu_item_get_active(check_menu_item: *mut GtkCheckMenuItem) -> gboolean;
    pub fn gtk_check_menu_item_get_draw_as_radio(check_menu_item: *mut GtkCheckMenuItem) -> gboolean;
    pub fn gtk_check_menu_item_get_inconsistent(check_menu_item: *mut GtkCheckMenuItem) -> gboolean;
    pub fn gtk_check_menu_item_set_active(check_menu_item: *mut GtkCheckMenuItem, is_active: gboolean);
    pub fn gtk_check_menu_item_set_draw_as_radio(check_menu_item: *mut GtkCheckMenuItem, draw_as_radio: gboolean);
    pub fn gtk_check_menu_item_set_inconsistent(check_menu_item: *mut GtkCheckMenuItem, setting: gboolean);
    pub fn gtk_check_menu_item_toggled(check_menu_item: *mut GtkCheckMenuItem);

    //=========================================================================
    // GtkCheckMenuItemAccessible
    //=========================================================================
    pub fn gtk_check_menu_item_accessible_get_type() -> GType;

    //=========================================================================
    // GtkClipboard
    //=========================================================================
    pub fn gtk_clipboard_get_type() -> GType;
    pub fn gtk_clipboard_get(selection: gdk::GdkAtom) -> *mut GtkClipboard;
    #[cfg(gtk_3_16)]
    pub fn gtk_clipboard_get_default(display: *mut gdk::GdkDisplay) -> *mut GtkClipboard;
    pub fn gtk_clipboard_get_for_display(display: *mut gdk::GdkDisplay, selection: gdk::GdkAtom) -> *mut GtkClipboard;
    pub fn gtk_clipboard_clear(clipboard: *mut GtkClipboard);
    pub fn gtk_clipboard_get_display(clipboard: *mut GtkClipboard) -> *mut gdk::GdkDisplay;
    pub fn gtk_clipboard_get_owner(clipboard: *mut GtkClipboard) -> *mut gobject::GObject;
    pub fn gtk_clipboard_request_contents(clipboard: *mut GtkClipboard, target: gdk::GdkAtom, callback: GtkClipboardReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_request_image(clipboard: *mut GtkClipboard, callback: GtkClipboardImageReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_request_rich_text(clipboard: *mut GtkClipboard, buffer: *mut GtkTextBuffer, callback: GtkClipboardRichTextReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_request_targets(clipboard: *mut GtkClipboard, callback: GtkClipboardTargetsReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_request_text(clipboard: *mut GtkClipboard, callback: GtkClipboardTextReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_request_uris(clipboard: *mut GtkClipboard, callback: GtkClipboardURIReceivedFunc, user_data: gpointer);
    pub fn gtk_clipboard_set_can_store(clipboard: *mut GtkClipboard, targets: *mut GtkTargetEntry, n_targets: c_int);
    pub fn gtk_clipboard_set_image(clipboard: *mut GtkClipboard, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_clipboard_set_text(clipboard: *mut GtkClipboard, text: *const c_char, len: c_int);
    pub fn gtk_clipboard_set_with_data(clipboard: *mut GtkClipboard, targets: *mut GtkTargetEntry, n_targets: c_uint, get_func: GtkClipboardGetFunc, clear_func: GtkClipboardClearFunc, user_data: gpointer) -> gboolean;
    pub fn gtk_clipboard_set_with_owner(clipboard: *mut GtkClipboard, targets: *mut GtkTargetEntry, n_targets: c_uint, get_func: GtkClipboardGetFunc, clear_func: GtkClipboardClearFunc, owner: *mut gobject::GObject) -> gboolean;
    pub fn gtk_clipboard_store(clipboard: *mut GtkClipboard);
    pub fn gtk_clipboard_wait_for_contents(clipboard: *mut GtkClipboard, target: gdk::GdkAtom) -> *mut GtkSelectionData;
    pub fn gtk_clipboard_wait_for_image(clipboard: *mut GtkClipboard) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_clipboard_wait_for_rich_text(clipboard: *mut GtkClipboard, buffer: *mut GtkTextBuffer, format: *mut gdk::GdkAtom, length: *mut size_t) -> *mut u8;
    pub fn gtk_clipboard_wait_for_targets(clipboard: *mut GtkClipboard, targets: *mut *mut gdk::GdkAtom, n_targets: *mut c_int) -> gboolean;
    pub fn gtk_clipboard_wait_for_text(clipboard: *mut GtkClipboard) -> *mut c_char;
    pub fn gtk_clipboard_wait_for_uris(clipboard: *mut GtkClipboard) -> *mut *mut c_char;
    pub fn gtk_clipboard_wait_is_image_available(clipboard: *mut GtkClipboard) -> gboolean;
    pub fn gtk_clipboard_wait_is_rich_text_available(clipboard: *mut GtkClipboard, buffer: *mut GtkTextBuffer) -> gboolean;
    pub fn gtk_clipboard_wait_is_target_available(clipboard: *mut GtkClipboard, target: gdk::GdkAtom) -> gboolean;
    pub fn gtk_clipboard_wait_is_text_available(clipboard: *mut GtkClipboard) -> gboolean;
    pub fn gtk_clipboard_wait_is_uris_available(clipboard: *mut GtkClipboard) -> gboolean;

    //=========================================================================
    // GtkColorButton
    //=========================================================================
    pub fn gtk_color_button_get_type() -> GType;
    pub fn gtk_color_button_new() -> *mut GtkWidget;
    pub fn gtk_color_button_new_with_color(color: *const gdk::GdkColor) -> *mut GtkWidget;
    pub fn gtk_color_button_new_with_rgba(rgba: *const gdk::GdkRGBA) -> *mut GtkWidget;
    pub fn gtk_color_button_get_alpha(button: *mut GtkColorButton) -> u16;
    pub fn gtk_color_button_get_color(button: *mut GtkColorButton, color: *mut gdk::GdkColor);
    pub fn gtk_color_button_get_rgba(button: *mut GtkColorButton, rgba: *mut gdk::GdkRGBA);
    pub fn gtk_color_button_get_title(button: *mut GtkColorButton) -> *const c_char;
    pub fn gtk_color_button_get_use_alpha(button: *mut GtkColorButton) -> gboolean;
    pub fn gtk_color_button_set_alpha(button: *mut GtkColorButton, alpha: u16);
    pub fn gtk_color_button_set_color(button: *mut GtkColorButton, color: *const gdk::GdkColor);
    pub fn gtk_color_button_set_rgba(button: *mut GtkColorButton, rgba: *const gdk::GdkRGBA);
    pub fn gtk_color_button_set_title(button: *mut GtkColorButton, title: *const c_char);
    pub fn gtk_color_button_set_use_alpha(button: *mut GtkColorButton, use_alpha: gboolean);

    //=========================================================================
    // GtkColorChooserDialog
    //=========================================================================
    pub fn gtk_color_chooser_dialog_get_type() -> GType;
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_dialog_new(title: *const c_char, parent: *mut GtkWindow) -> *mut GtkWidget;

    //=========================================================================
    // GtkColorChooserWidget
    //=========================================================================
    pub fn gtk_color_chooser_widget_get_type() -> GType;
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_widget_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkColorSelection
    //=========================================================================
    pub fn gtk_color_selection_get_type() -> GType;
    pub fn gtk_color_selection_new() -> *mut GtkWidget;
    pub fn gtk_color_selection_palette_from_string(str: *const c_char, colors: *mut *mut gdk::GdkColor, n_colors: *mut c_int) -> gboolean;
    pub fn gtk_color_selection_palette_to_string(colors: *mut gdk::GdkColor, n_colors: c_int) -> *mut c_char;
    pub fn gtk_color_selection_set_change_palette_with_screen_hook(func: GtkColorSelectionChangePaletteWithScreenFunc) -> GtkColorSelectionChangePaletteWithScreenFunc;
    pub fn gtk_color_selection_get_current_alpha(colorsel: *mut GtkColorSelection) -> u16;
    pub fn gtk_color_selection_get_current_color(colorsel: *mut GtkColorSelection, color: *mut gdk::GdkColor);
    pub fn gtk_color_selection_get_current_rgba(colorsel: *mut GtkColorSelection, rgba: *mut gdk::GdkRGBA);
    pub fn gtk_color_selection_get_has_opacity_control(colorsel: *mut GtkColorSelection) -> gboolean;
    pub fn gtk_color_selection_get_has_palette(colorsel: *mut GtkColorSelection) -> gboolean;
    pub fn gtk_color_selection_get_previous_alpha(colorsel: *mut GtkColorSelection) -> u16;
    pub fn gtk_color_selection_get_previous_color(colorsel: *mut GtkColorSelection, color: *mut gdk::GdkColor);
    pub fn gtk_color_selection_get_previous_rgba(colorsel: *mut GtkColorSelection, rgba: *mut gdk::GdkRGBA);
    pub fn gtk_color_selection_is_adjusting(colorsel: *mut GtkColorSelection) -> gboolean;
    pub fn gtk_color_selection_set_current_alpha(colorsel: *mut GtkColorSelection, alpha: u16);
    pub fn gtk_color_selection_set_current_color(colorsel: *mut GtkColorSelection, color: *const gdk::GdkColor);
    pub fn gtk_color_selection_set_current_rgba(colorsel: *mut GtkColorSelection, rgba: *const gdk::GdkRGBA);
    pub fn gtk_color_selection_set_has_opacity_control(colorsel: *mut GtkColorSelection, has_opacity: gboolean);
    pub fn gtk_color_selection_set_has_palette(colorsel: *mut GtkColorSelection, has_palette: gboolean);
    pub fn gtk_color_selection_set_previous_alpha(colorsel: *mut GtkColorSelection, alpha: u16);
    pub fn gtk_color_selection_set_previous_color(colorsel: *mut GtkColorSelection, color: *const gdk::GdkColor);
    pub fn gtk_color_selection_set_previous_rgba(colorsel: *mut GtkColorSelection, rgba: *const gdk::GdkRGBA);

    //=========================================================================
    // GtkColorSelectionDialog
    //=========================================================================
    pub fn gtk_color_selection_dialog_get_type() -> GType;
    pub fn gtk_color_selection_dialog_new(title: *const c_char) -> *mut GtkWidget;
    pub fn gtk_color_selection_dialog_get_color_selection(colorsel: *mut GtkColorSelectionDialog) -> *mut GtkWidget;

    //=========================================================================
    // GtkComboBox
    //=========================================================================
    pub fn gtk_combo_box_get_type() -> GType;
    pub fn gtk_combo_box_new() -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_area(area: *mut GtkCellArea) -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_area_and_entry(area: *mut GtkCellArea) -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_entry() -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_model(model: *mut GtkTreeModel) -> *mut GtkWidget;
    pub fn gtk_combo_box_new_with_model_and_entry(model: *mut GtkTreeModel) -> *mut GtkWidget;
    pub fn gtk_combo_box_get_active(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_get_active_id(combo_box: *mut GtkComboBox) -> *const c_char;
    pub fn gtk_combo_box_get_active_iter(combo_box: *mut GtkComboBox, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_combo_box_get_add_tearoffs(combo_box: *mut GtkComboBox) -> gboolean;
    pub fn gtk_combo_box_get_button_sensitivity(combo_box: *mut GtkComboBox) -> GtkSensitivityType;
    pub fn gtk_combo_box_get_column_span_column(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_get_entry_text_column(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_get_focus_on_click(combo: *mut GtkComboBox) -> gboolean;
    pub fn gtk_combo_box_get_has_entry(combo_box: *mut GtkComboBox) -> gboolean;
    pub fn gtk_combo_box_get_id_column(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_get_model(combo_box: *mut GtkComboBox) -> *mut GtkTreeModel;
    pub fn gtk_combo_box_get_popup_accessible(combo_box: *mut GtkComboBox) -> *mut atk::AtkObject;
    pub fn gtk_combo_box_get_popup_fixed_width(combo_box: *mut GtkComboBox) -> gboolean;
    pub fn gtk_combo_box_get_row_separator_func(combo_box: *mut GtkComboBox) -> GtkTreeViewRowSeparatorFunc;
    pub fn gtk_combo_box_get_row_span_column(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_get_title(combo_box: *mut GtkComboBox) -> *const c_char;
    pub fn gtk_combo_box_get_wrap_width(combo_box: *mut GtkComboBox) -> c_int;
    pub fn gtk_combo_box_popdown(combo_box: *mut GtkComboBox);
    pub fn gtk_combo_box_popup(combo_box: *mut GtkComboBox);
    pub fn gtk_combo_box_popup_for_device(combo_box: *mut GtkComboBox, device: *mut gdk::GdkDevice);
    pub fn gtk_combo_box_set_active(combo_box: *mut GtkComboBox, index_: c_int);
    pub fn gtk_combo_box_set_active_id(combo_box: *mut GtkComboBox, active_id: *const c_char) -> gboolean;
    pub fn gtk_combo_box_set_active_iter(combo_box: *mut GtkComboBox, iter: *mut GtkTreeIter);
    pub fn gtk_combo_box_set_add_tearoffs(combo_box: *mut GtkComboBox, add_tearoffs: gboolean);
    pub fn gtk_combo_box_set_button_sensitivity(combo_box: *mut GtkComboBox, sensitivity: GtkSensitivityType);
    pub fn gtk_combo_box_set_column_span_column(combo_box: *mut GtkComboBox, column_span: c_int);
    pub fn gtk_combo_box_set_entry_text_column(combo_box: *mut GtkComboBox, text_column: c_int);
    pub fn gtk_combo_box_set_focus_on_click(combo: *mut GtkComboBox, focus_on_click: gboolean);
    pub fn gtk_combo_box_set_id_column(combo_box: *mut GtkComboBox, id_column: c_int);
    pub fn gtk_combo_box_set_model(combo_box: *mut GtkComboBox, model: *mut GtkTreeModel);
    pub fn gtk_combo_box_set_popup_fixed_width(combo_box: *mut GtkComboBox, fixed: gboolean);
    pub fn gtk_combo_box_set_row_separator_func(combo_box: *mut GtkComboBox, func: GtkTreeViewRowSeparatorFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_combo_box_set_row_span_column(combo_box: *mut GtkComboBox, row_span: c_int);
    pub fn gtk_combo_box_set_title(combo_box: *mut GtkComboBox, title: *const c_char);
    pub fn gtk_combo_box_set_wrap_width(combo_box: *mut GtkComboBox, width: c_int);

    //=========================================================================
    // GtkComboBoxAccessible
    //=========================================================================
    pub fn gtk_combo_box_accessible_get_type() -> GType;

    //=========================================================================
    // GtkComboBoxText
    //=========================================================================
    pub fn gtk_combo_box_text_get_type() -> GType;
    pub fn gtk_combo_box_text_new() -> *mut GtkWidget;
    pub fn gtk_combo_box_text_new_with_entry() -> *mut GtkWidget;
    pub fn gtk_combo_box_text_append(combo_box: *mut GtkComboBoxText, id: *const c_char, text: *const c_char);
    pub fn gtk_combo_box_text_append_text(combo_box: *mut GtkComboBoxText, text: *const c_char);
    pub fn gtk_combo_box_text_get_active_text(combo_box: *mut GtkComboBoxText) -> *mut c_char;
    pub fn gtk_combo_box_text_insert(combo_box: *mut GtkComboBoxText, position: c_int, id: *const c_char, text: *const c_char);
    pub fn gtk_combo_box_text_insert_text(combo_box: *mut GtkComboBoxText, position: c_int, text: *const c_char);
    pub fn gtk_combo_box_text_prepend(combo_box: *mut GtkComboBoxText, id: *const c_char, text: *const c_char);
    pub fn gtk_combo_box_text_prepend_text(combo_box: *mut GtkComboBoxText, text: *const c_char);
    pub fn gtk_combo_box_text_remove(combo_box: *mut GtkComboBoxText, position: c_int);
    pub fn gtk_combo_box_text_remove_all(combo_box: *mut GtkComboBoxText);

    //=========================================================================
    // GtkContainer
    //=========================================================================
    pub fn gtk_container_get_type() -> GType;
    pub fn gtk_container_add(container: *mut GtkContainer, widget: *mut GtkWidget);
    pub fn gtk_container_add_with_properties(container: *mut GtkContainer, widget: *mut GtkWidget, first_prop_name: *const c_char, ...);
    pub fn gtk_container_check_resize(container: *mut GtkContainer);
    pub fn gtk_container_child_get(container: *mut GtkContainer, child: *mut GtkWidget, first_prop_name: *const c_char, ...);
    pub fn gtk_container_child_get_property(container: *mut GtkContainer, child: *mut GtkWidget, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_container_child_get_valist(container: *mut GtkContainer, child: *mut GtkWidget, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_container_child_notify(container: *mut GtkContainer, child: *mut GtkWidget, child_property: *const c_char);
    pub fn gtk_container_child_set(container: *mut GtkContainer, child: *mut GtkWidget, first_prop_name: *const c_char, ...);
    pub fn gtk_container_child_set_property(container: *mut GtkContainer, child: *mut GtkWidget, property_name: *const c_char, value: *const gobject::GValue);
    //pub fn gtk_container_child_set_valist(container: *mut GtkContainer, child: *mut GtkWidget, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_container_child_type(container: *mut GtkContainer) -> GType;
    pub fn gtk_container_forall(container: *mut GtkContainer, callback: GtkCallback, callback_data: gpointer);
    pub fn gtk_container_foreach(container: *mut GtkContainer, callback: GtkCallback, callback_data: gpointer);
    pub fn gtk_container_get_border_width(container: *mut GtkContainer) -> c_uint;
    pub fn gtk_container_get_children(container: *mut GtkContainer) -> *mut glib::GList;
    pub fn gtk_container_get_focus_chain(container: *mut GtkContainer, focusable_widgets: *mut *mut glib::GList) -> gboolean;
    pub fn gtk_container_get_focus_child(container: *mut GtkContainer) -> *mut GtkWidget;
    pub fn gtk_container_get_focus_hadjustment(container: *mut GtkContainer) -> *mut GtkAdjustment;
    pub fn gtk_container_get_focus_vadjustment(container: *mut GtkContainer) -> *mut GtkAdjustment;
    pub fn gtk_container_get_path_for_child(container: *mut GtkContainer, child: *mut GtkWidget) -> *mut GtkWidgetPath;
    pub fn gtk_container_get_resize_mode(container: *mut GtkContainer) -> GtkResizeMode;
    pub fn gtk_container_propagate_draw(container: *mut GtkContainer, child: *mut GtkWidget, cr: *mut cairo::cairo_t);
    pub fn gtk_container_remove(container: *mut GtkContainer, widget: *mut GtkWidget);
    pub fn gtk_container_resize_children(container: *mut GtkContainer);
    pub fn gtk_container_set_border_width(container: *mut GtkContainer, border_width: c_uint);
    pub fn gtk_container_set_focus_chain(container: *mut GtkContainer, focusable_widgets: *mut glib::GList);
    pub fn gtk_container_set_focus_child(container: *mut GtkContainer, child: *mut GtkWidget);
    pub fn gtk_container_set_focus_hadjustment(container: *mut GtkContainer, adjustment: *mut GtkAdjustment);
    pub fn gtk_container_set_focus_vadjustment(container: *mut GtkContainer, adjustment: *mut GtkAdjustment);
    pub fn gtk_container_set_reallocate_redraws(container: *mut GtkContainer, needs_redraws: gboolean);
    pub fn gtk_container_set_resize_mode(container: *mut GtkContainer, resize_mode: GtkResizeMode);
    pub fn gtk_container_unset_focus_chain(container: *mut GtkContainer);

    //=========================================================================
    // GtkContainerAccessible
    //=========================================================================
    pub fn gtk_container_accessible_get_type() -> GType;

    //=========================================================================
    // GtkContainerCellAccessible
    //=========================================================================
    pub fn gtk_container_cell_accessible_get_type() -> GType;
    pub fn gtk_container_cell_accessible_new() -> *mut GtkContainerCellAccessible;
    pub fn gtk_container_cell_accessible_add_child(container: *mut GtkContainerCellAccessible, child: *mut GtkCellAccessible);
    pub fn gtk_container_cell_accessible_get_children(container: *mut GtkContainerCellAccessible) -> *mut glib::GList;
    pub fn gtk_container_cell_accessible_remove_child(container: *mut GtkContainerCellAccessible, child: *mut GtkCellAccessible);

    //=========================================================================
    // GtkCssProvider
    //=========================================================================
    pub fn gtk_css_provider_get_type() -> GType;
    pub fn gtk_css_provider_new() -> *mut GtkCssProvider;
    pub fn gtk_css_provider_get_default() -> *mut GtkCssProvider;
    pub fn gtk_css_provider_get_named(name: *const c_char, variant: *const c_char) -> *mut GtkCssProvider;
    pub fn gtk_css_provider_load_from_data(css_provider: *mut GtkCssProvider, data: *mut u8, length: ssize_t, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_css_provider_load_from_file(css_provider: *mut GtkCssProvider, file: *mut gio::GFile, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_css_provider_load_from_path(css_provider: *mut GtkCssProvider, path: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_css_provider_load_from_resource(css_provider: *mut GtkCssProvider, resource_path: *const c_char);
    pub fn gtk_css_provider_to_string(provider: *mut GtkCssProvider) -> *mut c_char;

    //=========================================================================
    // GtkDialog
    //=========================================================================
    pub fn gtk_dialog_get_type() -> GType;
    pub fn gtk_dialog_new() -> *mut GtkWidget;
    pub fn gtk_dialog_new_with_buttons(title: *const c_char, parent: *mut GtkWindow, flags: GtkDialogFlags, first_button_text: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_dialog_add_action_widget(dialog: *mut GtkDialog, child: *mut GtkWidget, response_id: c_int);
    pub fn gtk_dialog_add_button(dialog: *mut GtkDialog, button_text: *const c_char, response_id: c_int) -> *mut GtkWidget;
    pub fn gtk_dialog_add_buttons(dialog: *mut GtkDialog, first_button_text: *const c_char, ...);
    pub fn gtk_dialog_get_action_area(dialog: *mut GtkDialog) -> *mut GtkWidget;
    pub fn gtk_dialog_get_content_area(dialog: *mut GtkDialog) -> *mut GtkBox;
    #[cfg(gtk_3_12)]
    pub fn gtk_dialog_get_header_bar(dialog: *mut GtkDialog) -> *mut GtkWidget;
    pub fn gtk_dialog_get_response_for_widget(dialog: *mut GtkDialog, widget: *mut GtkWidget) -> c_int;
    pub fn gtk_dialog_get_widget_for_response(dialog: *mut GtkDialog, response_id: c_int) -> *mut GtkWidget;
    pub fn gtk_dialog_response(dialog: *mut GtkDialog, response_id: c_int);
    pub fn gtk_dialog_run(dialog: *mut GtkDialog) -> c_int;
    pub fn gtk_dialog_set_alternative_button_order(dialog: *mut GtkDialog, first_response_id: c_int, ...);
    pub fn gtk_dialog_set_alternative_button_order_from_array(dialog: *mut GtkDialog, n_params: c_int, new_order: *mut c_int);
    pub fn gtk_dialog_set_default_response(dialog: *mut GtkDialog, response_id: c_int);
    pub fn gtk_dialog_set_response_sensitive(dialog: *mut GtkDialog, response_id: c_int, setting: gboolean);

    //=========================================================================
    // GtkDrawingArea
    //=========================================================================
    pub fn gtk_drawing_area_get_type() -> GType;
    pub fn gtk_drawing_area_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkEntry
    //=========================================================================
    pub fn gtk_entry_get_type() -> GType;
    pub fn gtk_entry_new() -> *mut GtkWidget;
    pub fn gtk_entry_new_with_buffer(buffer: *mut GtkEntryBuffer) -> *mut GtkWidget;
    pub fn gtk_entry_get_activates_default(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_get_alignment(entry: *mut GtkEntry) -> c_float;
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_get_attributes(entry: *mut GtkEntry) -> *mut pango::PangoAttrList;
    pub fn gtk_entry_get_buffer(entry: *mut GtkEntry) -> *mut GtkEntryBuffer;
    pub fn gtk_entry_get_completion(entry: *mut GtkEntry) -> *mut GtkEntryCompletion;
    pub fn gtk_entry_get_current_icon_drag_source(entry: *mut GtkEntry) -> c_int;
    pub fn gtk_entry_get_cursor_hadjustment(entry: *mut GtkEntry) -> *mut GtkAdjustment;
    pub fn gtk_entry_get_has_frame(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_get_icon_activatable(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> gboolean;
    pub fn gtk_entry_get_icon_area(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, icon_area: *mut gdk::GdkRectangle);
    pub fn gtk_entry_get_icon_at_pos(entry: *mut GtkEntry, x: c_int, y: c_int) -> c_int;
    pub fn gtk_entry_get_icon_gicon(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *mut gio::GIcon;
    pub fn gtk_entry_get_icon_name(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *const c_char;
    pub fn gtk_entry_get_icon_pixbuf(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_entry_get_icon_sensitive(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> gboolean;
    pub fn gtk_entry_get_icon_stock(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *const c_char;
    pub fn gtk_entry_get_icon_storage_type(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> GtkImageType;
    pub fn gtk_entry_get_icon_tooltip_markup(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *mut c_char;
    pub fn gtk_entry_get_icon_tooltip_text(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition) -> *mut c_char;
    pub fn gtk_entry_get_inner_border(entry: *mut GtkEntry) -> *const GtkBorder;
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_get_input_hints(entry: *mut GtkEntry) -> GtkInputHints;
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_get_input_purpose(entry: *mut GtkEntry) -> GtkInputPurpose;
    pub fn gtk_entry_get_invisible_char(entry: *mut GtkEntry) -> u32;
    pub fn gtk_entry_get_layout(entry: *mut GtkEntry) -> *mut pango::PangoLayout;
    pub fn gtk_entry_get_layout_offsets(entry: *mut GtkEntry, x: *mut c_int, y: *mut c_int);
    pub fn gtk_entry_get_max_length(entry: *mut GtkEntry) -> c_int;
    #[cfg(gtk_3_12)]
    pub fn gtk_entry_get_max_width_chars(entry: *mut GtkEntry) -> c_int;
    pub fn gtk_entry_get_overwrite_mode(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_get_placeholder_text(entry: *mut GtkEntry) -> *const c_char;
    pub fn gtk_entry_get_progress_fraction(entry: *mut GtkEntry) -> c_double;
    pub fn gtk_entry_get_progress_pulse_step(entry: *mut GtkEntry) -> c_double;
    #[cfg(gtk_3_10)]
    pub fn gtk_entry_get_tabs(entry: *mut GtkEntry) -> *mut pango::PangoTabArray;
    pub fn gtk_entry_get_text(entry: *mut GtkEntry) -> *const c_char;
    pub fn gtk_entry_get_text_area(entry: *mut GtkEntry, text_area: *mut gdk::GdkRectangle);
    pub fn gtk_entry_get_text_length(entry: *mut GtkEntry) -> u16;
    pub fn gtk_entry_get_visibility(entry: *mut GtkEntry) -> gboolean;
    pub fn gtk_entry_get_width_chars(entry: *mut GtkEntry) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_entry_grab_focus_without_selecting(entry: *mut GtkEntry);
    pub fn gtk_entry_im_context_filter_keypress(entry: *mut GtkEntry, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_entry_layout_index_to_text_index(entry: *mut GtkEntry, layout_index: c_int) -> c_int;
    pub fn gtk_entry_progress_pulse(entry: *mut GtkEntry);
    pub fn gtk_entry_reset_im_context(entry: *mut GtkEntry);
    pub fn gtk_entry_set_activates_default(entry: *mut GtkEntry, setting: gboolean);
    pub fn gtk_entry_set_alignment(entry: *mut GtkEntry, xalign: c_float);
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_set_attributes(entry: *mut GtkEntry, attrs: *mut pango::PangoAttrList);
    pub fn gtk_entry_set_buffer(entry: *mut GtkEntry, buffer: *mut GtkEntryBuffer);
    pub fn gtk_entry_set_completion(entry: *mut GtkEntry, completion: *mut GtkEntryCompletion);
    pub fn gtk_entry_set_cursor_hadjustment(entry: *mut GtkEntry, adjustment: *mut GtkAdjustment);
    pub fn gtk_entry_set_has_frame(entry: *mut GtkEntry, setting: gboolean);
    pub fn gtk_entry_set_icon_activatable(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, activatable: gboolean);
    pub fn gtk_entry_set_icon_drag_source(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, target_list: *mut GtkTargetList, actions: gdk::GdkDragAction);
    pub fn gtk_entry_set_icon_from_gicon(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, icon: *mut gio::GIcon);
    pub fn gtk_entry_set_icon_from_icon_name(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, icon_name: *const c_char);
    pub fn gtk_entry_set_icon_from_pixbuf(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_entry_set_icon_from_stock(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, stock_id: *const c_char);
    pub fn gtk_entry_set_icon_sensitive(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, sensitive: gboolean);
    pub fn gtk_entry_set_icon_tooltip_markup(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, tooltip: *const c_char);
    pub fn gtk_entry_set_icon_tooltip_text(entry: *mut GtkEntry, icon_pos: GtkEntryIconPosition, tooltip: *const c_char);
    pub fn gtk_entry_set_inner_border(entry: *mut GtkEntry, border: *const GtkBorder);
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_set_input_hints(entry: *mut GtkEntry, hints: GtkInputHints);
    #[cfg(gtk_3_6)]
    pub fn gtk_entry_set_input_purpose(entry: *mut GtkEntry, purpose: GtkInputPurpose);
    pub fn gtk_entry_set_invisible_char(entry: *mut GtkEntry, ch: u32);
    pub fn gtk_entry_set_max_length(entry: *mut GtkEntry, max: c_int);
    #[cfg(gtk_3_12)]
    pub fn gtk_entry_set_max_width_chars(entry: *mut GtkEntry, n_chars: c_int);
    pub fn gtk_entry_set_overwrite_mode(entry: *mut GtkEntry, overwrite: gboolean);
    pub fn gtk_entry_set_placeholder_text(entry: *mut GtkEntry, text: *const c_char);
    pub fn gtk_entry_set_progress_fraction(entry: *mut GtkEntry, fraction: c_double);
    pub fn gtk_entry_set_progress_pulse_step(entry: *mut GtkEntry, fraction: c_double);
    #[cfg(gtk_3_10)]
    pub fn gtk_entry_set_tabs(entry: *mut GtkEntry, tabs: *mut pango::PangoTabArray);
    pub fn gtk_entry_set_text(entry: *mut GtkEntry, text: *const c_char);
    pub fn gtk_entry_set_visibility(entry: *mut GtkEntry, visible: gboolean);
    pub fn gtk_entry_set_width_chars(entry: *mut GtkEntry, n_chars: c_int);
    pub fn gtk_entry_text_index_to_layout_index(entry: *mut GtkEntry, text_index: c_int) -> c_int;
    pub fn gtk_entry_unset_invisible_char(entry: *mut GtkEntry);

    //=========================================================================
    // GtkEntryAccessible
    //=========================================================================
    pub fn gtk_entry_accessible_get_type() -> GType;

    //=========================================================================
    // GtkEntryBuffer
    //=========================================================================
    pub fn gtk_entry_buffer_get_type() -> GType;
    pub fn gtk_entry_buffer_new(initial_chars: *const c_char, n_initial_chars: c_int) -> *mut GtkEntryBuffer;
    pub fn gtk_entry_buffer_delete_text(buffer: *mut GtkEntryBuffer, position: c_uint, n_chars: c_int) -> c_uint;
    pub fn gtk_entry_buffer_emit_deleted_text(buffer: *mut GtkEntryBuffer, position: c_uint, n_chars: c_uint);
    pub fn gtk_entry_buffer_emit_inserted_text(buffer: *mut GtkEntryBuffer, position: c_uint, chars: *const c_char, n_chars: c_uint);
    pub fn gtk_entry_buffer_get_bytes(buffer: *mut GtkEntryBuffer) -> size_t;
    pub fn gtk_entry_buffer_get_length(buffer: *mut GtkEntryBuffer) -> c_uint;
    pub fn gtk_entry_buffer_get_max_length(buffer: *mut GtkEntryBuffer) -> c_int;
    pub fn gtk_entry_buffer_get_text(buffer: *mut GtkEntryBuffer) -> *const c_char;
    pub fn gtk_entry_buffer_insert_text(buffer: *mut GtkEntryBuffer, position: c_uint, chars: *const c_char, n_chars: c_int) -> c_uint;
    pub fn gtk_entry_buffer_set_max_length(buffer: *mut GtkEntryBuffer, max_length: c_int);
    pub fn gtk_entry_buffer_set_text(buffer: *mut GtkEntryBuffer, chars: *const c_char, n_chars: c_int);

    //=========================================================================
    // GtkEntryCompletion
    //=========================================================================
    pub fn gtk_entry_completion_get_type() -> GType;
    pub fn gtk_entry_completion_new() -> *mut GtkEntryCompletion;
    pub fn gtk_entry_completion_new_with_area(area: *mut GtkCellArea) -> *mut GtkEntryCompletion;
    pub fn gtk_entry_completion_complete(completion: *mut GtkEntryCompletion);
    #[cfg(gtk_3_4)]
    pub fn gtk_entry_completion_compute_prefix(completion: *mut GtkEntryCompletion, key: *const c_char) -> *mut c_char;
    pub fn gtk_entry_completion_delete_action(completion: *mut GtkEntryCompletion, index_: c_int);
    pub fn gtk_entry_completion_get_completion_prefix(completion: *mut GtkEntryCompletion) -> *const c_char;
    pub fn gtk_entry_completion_get_entry(completion: *mut GtkEntryCompletion) -> *mut GtkWidget;
    pub fn gtk_entry_completion_get_inline_completion(completion: *mut GtkEntryCompletion) -> gboolean;
    pub fn gtk_entry_completion_get_inline_selection(completion: *mut GtkEntryCompletion) -> gboolean;
    pub fn gtk_entry_completion_get_minimum_key_length(completion: *mut GtkEntryCompletion) -> c_int;
    pub fn gtk_entry_completion_get_model(completion: *mut GtkEntryCompletion) -> *mut GtkTreeModel;
    pub fn gtk_entry_completion_get_popup_completion(completion: *mut GtkEntryCompletion) -> gboolean;
    pub fn gtk_entry_completion_get_popup_set_width(completion: *mut GtkEntryCompletion) -> gboolean;
    pub fn gtk_entry_completion_get_popup_single_match(completion: *mut GtkEntryCompletion) -> gboolean;
    pub fn gtk_entry_completion_get_text_column(completion: *mut GtkEntryCompletion) -> c_int;
    pub fn gtk_entry_completion_insert_action_markup(completion: *mut GtkEntryCompletion, index_: c_int, markup: *const c_char);
    pub fn gtk_entry_completion_insert_action_text(completion: *mut GtkEntryCompletion, index_: c_int, text: *const c_char);
    pub fn gtk_entry_completion_insert_prefix(completion: *mut GtkEntryCompletion);
    pub fn gtk_entry_completion_set_inline_completion(completion: *mut GtkEntryCompletion, inline_completion: gboolean);
    pub fn gtk_entry_completion_set_inline_selection(completion: *mut GtkEntryCompletion, inline_selection: gboolean);
    pub fn gtk_entry_completion_set_match_func(completion: *mut GtkEntryCompletion, func: GtkEntryCompletionMatchFunc, func_data: gpointer, func_notify: glib::GDestroyNotify);
    pub fn gtk_entry_completion_set_minimum_key_length(completion: *mut GtkEntryCompletion, length: c_int);
    pub fn gtk_entry_completion_set_model(completion: *mut GtkEntryCompletion, model: *mut GtkTreeModel);
    pub fn gtk_entry_completion_set_popup_completion(completion: *mut GtkEntryCompletion, popup_completion: gboolean);
    pub fn gtk_entry_completion_set_popup_set_width(completion: *mut GtkEntryCompletion, popup_set_width: gboolean);
    pub fn gtk_entry_completion_set_popup_single_match(completion: *mut GtkEntryCompletion, popup_single_match: gboolean);
    pub fn gtk_entry_completion_set_text_column(completion: *mut GtkEntryCompletion, column: c_int);

    //=========================================================================
    // GtkEntryIconAccessible
    //=========================================================================
    pub fn gtk_entry_icon_accessible_get_type() -> GType;

    //=========================================================================
    // GtkEventBox
    //=========================================================================
    pub fn gtk_event_box_get_type() -> GType;
    pub fn gtk_event_box_new() -> *mut GtkWidget;
    pub fn gtk_event_box_get_above_child(event_box: *mut GtkEventBox) -> gboolean;
    pub fn gtk_event_box_get_visible_window(event_box: *mut GtkEventBox) -> gboolean;
    pub fn gtk_event_box_set_above_child(event_box: *mut GtkEventBox, above_child: gboolean);
    pub fn gtk_event_box_set_visible_window(event_box: *mut GtkEventBox, visible_window: gboolean);

    //=========================================================================
    // GtkEventController
    //=========================================================================
    pub fn gtk_event_controller_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_event_controller_get_propagation_phase(controller: *mut GtkEventController) -> GtkPropagationPhase;
    #[cfg(gtk_3_14)]
    pub fn gtk_event_controller_get_widget(controller: *mut GtkEventController) -> *mut GtkWidget;
    #[cfg(gtk_3_14)]
    pub fn gtk_event_controller_handle_event(controller: *mut GtkEventController, event: *const gdk::GdkEvent) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_event_controller_reset(controller: *mut GtkEventController);
    #[cfg(gtk_3_14)]
    pub fn gtk_event_controller_set_propagation_phase(controller: *mut GtkEventController, phase: GtkPropagationPhase);

    //=========================================================================
    // GtkExpander
    //=========================================================================
    pub fn gtk_expander_get_type() -> GType;
    pub fn gtk_expander_new(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_expander_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_expander_get_expanded(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_get_label(expander: *mut GtkExpander) -> *const c_char;
    pub fn gtk_expander_get_label_fill(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_get_label_widget(expander: *mut GtkExpander) -> *mut GtkWidget;
    pub fn gtk_expander_get_resize_toplevel(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_get_spacing(expander: *mut GtkExpander) -> c_int;
    pub fn gtk_expander_get_use_markup(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_get_use_underline(expander: *mut GtkExpander) -> gboolean;
    pub fn gtk_expander_set_expanded(expander: *mut GtkExpander, expanded: gboolean);
    pub fn gtk_expander_set_label(expander: *mut GtkExpander, label: *const c_char);
    pub fn gtk_expander_set_label_fill(expander: *mut GtkExpander, label_fill: gboolean);
    pub fn gtk_expander_set_label_widget(expander: *mut GtkExpander, label_widget: *mut GtkWidget);
    pub fn gtk_expander_set_resize_toplevel(expander: *mut GtkExpander, resize_toplevel: gboolean);
    pub fn gtk_expander_set_spacing(expander: *mut GtkExpander, spacing: c_int);
    pub fn gtk_expander_set_use_markup(expander: *mut GtkExpander, use_markup: gboolean);
    pub fn gtk_expander_set_use_underline(expander: *mut GtkExpander, use_underline: gboolean);

    //=========================================================================
    // GtkExpanderAccessible
    //=========================================================================
    pub fn gtk_expander_accessible_get_type() -> GType;

    //=========================================================================
    // GtkFileChooserButton
    //=========================================================================
    pub fn gtk_file_chooser_button_get_type() -> GType;
    pub fn gtk_file_chooser_button_new(title: *const c_char, action: GtkFileChooserAction) -> *mut GtkWidget;
    pub fn gtk_file_chooser_button_new_with_dialog(dialog: *mut GtkDialog) -> *mut GtkWidget;
    pub fn gtk_file_chooser_button_get_focus_on_click(button: *mut GtkFileChooserButton) -> gboolean;
    pub fn gtk_file_chooser_button_get_title(button: *mut GtkFileChooserButton) -> *const c_char;
    pub fn gtk_file_chooser_button_get_width_chars(button: *mut GtkFileChooserButton) -> c_int;
    pub fn gtk_file_chooser_button_set_focus_on_click(button: *mut GtkFileChooserButton, focus_on_click: gboolean);
    pub fn gtk_file_chooser_button_set_title(button: *mut GtkFileChooserButton, title: *const c_char);
    pub fn gtk_file_chooser_button_set_width_chars(button: *mut GtkFileChooserButton, n_chars: c_int);

    //=========================================================================
    // GtkFileChooserDialog
    //=========================================================================
    pub fn gtk_file_chooser_dialog_get_type() -> GType;
    pub fn gtk_file_chooser_dialog_new(title: *const c_char, parent: *mut GtkWindow, action: GtkFileChooserAction, first_button_text: *const c_char, ...) -> *mut GtkWidget;

    //=========================================================================
    // GtkFileChooserWidget
    //=========================================================================
    pub fn gtk_file_chooser_widget_get_type() -> GType;
    pub fn gtk_file_chooser_widget_new(action: GtkFileChooserAction) -> *mut GtkWidget;

    //=========================================================================
    // GtkFileFilter
    //=========================================================================
    pub fn gtk_file_filter_get_type() -> GType;
    pub fn gtk_file_filter_new() -> *mut GtkFileFilter;
    pub fn gtk_file_filter_add_custom(filter: *mut GtkFileFilter, needed: GtkFileFilterFlags, func: GtkFileFilterFunc, data: gpointer, notify: glib::GDestroyNotify);
    pub fn gtk_file_filter_add_mime_type(filter: *mut GtkFileFilter, mime_type: *const c_char);
    pub fn gtk_file_filter_add_pattern(filter: *mut GtkFileFilter, pattern: *const c_char);
    pub fn gtk_file_filter_add_pixbuf_formats(filter: *mut GtkFileFilter);
    pub fn gtk_file_filter_filter(filter: *mut GtkFileFilter, filter_info: *const GtkFileFilterInfo) -> gboolean;
    pub fn gtk_file_filter_get_name(filter: *mut GtkFileFilter) -> *const c_char;
    pub fn gtk_file_filter_get_needed(filter: *mut GtkFileFilter) -> GtkFileFilterFlags;
    pub fn gtk_file_filter_set_name(filter: *mut GtkFileFilter, name: *const c_char);

    //=========================================================================
    // GtkFixed
    //=========================================================================
    pub fn gtk_fixed_get_type() -> GType;
    pub fn gtk_fixed_new() -> *mut GtkWidget;
    pub fn gtk_fixed_move(fixed: *mut GtkFixed, widget: *mut GtkWidget, x: c_int, y: c_int);
    pub fn gtk_fixed_put(fixed: *mut GtkFixed, widget: *mut GtkWidget, x: c_int, y: c_int);

    //=========================================================================
    // GtkFlowBox
    //=========================================================================
    pub fn gtk_flow_box_get_type() -> GType;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_new() -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_activate_on_single_click(box_: *mut GtkFlowBox) -> gboolean;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_child_at_index(box_: *mut GtkFlowBox, idx: c_int) -> *mut GtkFlowBoxChild;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_column_spacing(box_: *mut GtkFlowBox) -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_homogeneous(box_: *mut GtkFlowBox) -> gboolean;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_max_children_per_line(box_: *mut GtkFlowBox) -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_min_children_per_line(box_: *mut GtkFlowBox) -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_row_spacing(box_: *mut GtkFlowBox) -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_selected_children(box_: *mut GtkFlowBox) -> *mut glib::GList;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_get_selection_mode(box_: *mut GtkFlowBox) -> GtkSelectionMode;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_insert(box_: *mut GtkFlowBox, widget: *mut GtkWidget, position: c_int);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_invalidate_filter(box_: *mut GtkFlowBox);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_invalidate_sort(box_: *mut GtkFlowBox);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_select_all(box_: *mut GtkFlowBox);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_select_child(box_: *mut GtkFlowBox, child: *mut GtkFlowBoxChild);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_selected_foreach(box_: *mut GtkFlowBox, func: GtkFlowBoxForeachFunc, data: gpointer);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_activate_on_single_click(box_: *mut GtkFlowBox, single: gboolean);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_column_spacing(box_: *mut GtkFlowBox, spacing: c_uint);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_filter_func(box_: *mut GtkFlowBox, filter_func: GtkFlowBoxFilterFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_hadjustment(box_: *mut GtkFlowBox, adjustment: *mut GtkAdjustment);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_homogeneous(box_: *mut GtkFlowBox, homogeneous: gboolean);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_max_children_per_line(box_: *mut GtkFlowBox, n_children: c_uint);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_min_children_per_line(box_: *mut GtkFlowBox, n_children: c_uint);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_row_spacing(box_: *mut GtkFlowBox, spacing: c_uint);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_selection_mode(box_: *mut GtkFlowBox, mode: GtkSelectionMode);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_sort_func(box_: *mut GtkFlowBox, sort_func: GtkFlowBoxSortFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_set_vadjustment(box_: *mut GtkFlowBox, adjustment: *mut GtkAdjustment);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_unselect_all(box_: *mut GtkFlowBox);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_unselect_child(box_: *mut GtkFlowBox, child: *mut GtkFlowBoxChild);

    //=========================================================================
    // GtkFlowBoxAccessible
    //=========================================================================
    pub fn gtk_flow_box_accessible_get_type() -> GType;

    //=========================================================================
    // GtkFlowBoxChild
    //=========================================================================
    pub fn gtk_flow_box_child_get_type() -> GType;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_child_new() -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_child_changed(child: *mut GtkFlowBoxChild);
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_child_get_index(child: *mut GtkFlowBoxChild) -> c_int;
    #[cfg(gtk_3_12)]
    pub fn gtk_flow_box_child_is_selected(child: *mut GtkFlowBoxChild) -> gboolean;

    //=========================================================================
    // GtkFlowBoxChildAccessible
    //=========================================================================
    pub fn gtk_flow_box_child_accessible_get_type() -> GType;

    //=========================================================================
    // GtkFontButton
    //=========================================================================
    pub fn gtk_font_button_get_type() -> GType;
    pub fn gtk_font_button_new() -> *mut GtkWidget;
    pub fn gtk_font_button_new_with_font(fontname: *const c_char) -> *mut GtkWidget;
    pub fn gtk_font_button_get_font_name(font_button: *mut GtkFontButton) -> *const c_char;
    pub fn gtk_font_button_get_show_size(font_button: *mut GtkFontButton) -> gboolean;
    pub fn gtk_font_button_get_show_style(font_button: *mut GtkFontButton) -> gboolean;
    pub fn gtk_font_button_get_title(font_button: *mut GtkFontButton) -> *const c_char;
    pub fn gtk_font_button_get_use_font(font_button: *mut GtkFontButton) -> gboolean;
    pub fn gtk_font_button_get_use_size(font_button: *mut GtkFontButton) -> gboolean;
    pub fn gtk_font_button_set_font_name(font_button: *mut GtkFontButton, fontname: *const c_char) -> gboolean;
    pub fn gtk_font_button_set_show_size(font_button: *mut GtkFontButton, show_size: gboolean);
    pub fn gtk_font_button_set_show_style(font_button: *mut GtkFontButton, show_style: gboolean);
    pub fn gtk_font_button_set_title(font_button: *mut GtkFontButton, title: *const c_char);
    pub fn gtk_font_button_set_use_font(font_button: *mut GtkFontButton, use_font: gboolean);
    pub fn gtk_font_button_set_use_size(font_button: *mut GtkFontButton, use_size: gboolean);

    //=========================================================================
    // GtkFontChooserDialog
    //=========================================================================
    pub fn gtk_font_chooser_dialog_get_type() -> GType;
    pub fn gtk_font_chooser_dialog_new(title: *const c_char, parent: *mut GtkWindow) -> *mut GtkWidget;

    //=========================================================================
    // GtkFontChooserWidget
    //=========================================================================
    pub fn gtk_font_chooser_widget_get_type() -> GType;
    pub fn gtk_font_chooser_widget_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkFontSelection
    //=========================================================================
    pub fn gtk_font_selection_get_type() -> GType;
    pub fn gtk_font_selection_new() -> *mut GtkWidget;
    pub fn gtk_font_selection_get_face(fontsel: *mut GtkFontSelection) -> *mut pango::PangoFontFace;
    pub fn gtk_font_selection_get_face_list(fontsel: *mut GtkFontSelection) -> *mut GtkWidget;
    pub fn gtk_font_selection_get_family(fontsel: *mut GtkFontSelection) -> *mut pango::PangoFontFamily;
    pub fn gtk_font_selection_get_family_list(fontsel: *mut GtkFontSelection) -> *mut GtkWidget;
    pub fn gtk_font_selection_get_font_name(fontsel: *mut GtkFontSelection) -> *mut c_char;
    pub fn gtk_font_selection_get_preview_entry(fontsel: *mut GtkFontSelection) -> *mut GtkWidget;
    pub fn gtk_font_selection_get_preview_text(fontsel: *mut GtkFontSelection) -> *const c_char;
    pub fn gtk_font_selection_get_size(fontsel: *mut GtkFontSelection) -> c_int;
    pub fn gtk_font_selection_get_size_entry(fontsel: *mut GtkFontSelection) -> *mut GtkWidget;
    pub fn gtk_font_selection_get_size_list(fontsel: *mut GtkFontSelection) -> *mut GtkWidget;
    pub fn gtk_font_selection_set_font_name(fontsel: *mut GtkFontSelection, fontname: *const c_char) -> gboolean;
    pub fn gtk_font_selection_set_preview_text(fontsel: *mut GtkFontSelection, text: *const c_char);

    //=========================================================================
    // GtkFontSelectionDialog
    //=========================================================================
    pub fn gtk_font_selection_dialog_get_type() -> GType;
    pub fn gtk_font_selection_dialog_new(title: *const c_char) -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_cancel_button(fsd: *mut GtkFontSelectionDialog) -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_font_name(fsd: *mut GtkFontSelectionDialog) -> *mut c_char;
    pub fn gtk_font_selection_dialog_get_font_selection(fsd: *mut GtkFontSelectionDialog) -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_ok_button(fsd: *mut GtkFontSelectionDialog) -> *mut GtkWidget;
    pub fn gtk_font_selection_dialog_get_preview_text(fsd: *mut GtkFontSelectionDialog) -> *const c_char;
    pub fn gtk_font_selection_dialog_set_font_name(fsd: *mut GtkFontSelectionDialog, fontname: *const c_char) -> gboolean;
    pub fn gtk_font_selection_dialog_set_preview_text(fsd: *mut GtkFontSelectionDialog, text: *const c_char);

    //=========================================================================
    // GtkFrame
    //=========================================================================
    pub fn gtk_frame_get_type() -> GType;
    pub fn gtk_frame_new(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_frame_get_label(frame: *mut GtkFrame) -> *const c_char;
    pub fn gtk_frame_get_label_align(frame: *mut GtkFrame, xalign: *mut c_float, yalign: *mut c_float);
    pub fn gtk_frame_get_label_widget(frame: *mut GtkFrame) -> *mut GtkWidget;
    pub fn gtk_frame_get_shadow_type(frame: *mut GtkFrame) -> GtkShadowType;
    pub fn gtk_frame_set_label(frame: *mut GtkFrame, label: *const c_char);
    pub fn gtk_frame_set_label_align(frame: *mut GtkFrame, xalign: c_float, yalign: c_float);
    pub fn gtk_frame_set_label_widget(frame: *mut GtkFrame, label_widget: *mut GtkWidget);
    pub fn gtk_frame_set_shadow_type(frame: *mut GtkFrame, type_: GtkShadowType);

    //=========================================================================
    // GtkFrameAccessible
    //=========================================================================
    pub fn gtk_frame_accessible_get_type() -> GType;

    //=========================================================================
    // GtkGLArea
    //=========================================================================
    pub fn gtk_gl_area_get_type() -> GType;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_new() -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_attach_buffers(area: *mut GtkGLArea);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_auto_render(area: *mut GtkGLArea) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_context(area: *mut GtkGLArea) -> *mut gdk::GdkGLContext;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_error(area: *mut GtkGLArea) -> *mut glib::GError;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_has_alpha(area: *mut GtkGLArea) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_has_depth_buffer(area: *mut GtkGLArea) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_has_stencil_buffer(area: *mut GtkGLArea) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_get_required_version(area: *mut GtkGLArea, major: *mut c_int, minor: *mut c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_make_current(area: *mut GtkGLArea);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_queue_render(area: *mut GtkGLArea);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_auto_render(area: *mut GtkGLArea, auto_render: gboolean);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_error(area: *mut GtkGLArea, error: *const glib::GError);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_has_alpha(area: *mut GtkGLArea, has_alpha: gboolean);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_has_depth_buffer(area: *mut GtkGLArea, has_depth_buffer: gboolean);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_has_stencil_buffer(area: *mut GtkGLArea, has_stencil_buffer: gboolean);
    #[cfg(gtk_3_16)]
    pub fn gtk_gl_area_set_required_version(area: *mut GtkGLArea, major: c_int, minor: c_int);

    //=========================================================================
    // GtkGesture
    //=========================================================================
    pub fn gtk_gesture_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_bounding_box(gesture: *mut GtkGesture, rect: *mut gdk::GdkRectangle) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_bounding_box_center(gesture: *mut GtkGesture, x: *mut c_double, y: *mut c_double) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_device(gesture: *mut GtkGesture) -> *mut gdk::GdkDevice;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_group(gesture: *mut GtkGesture) -> *mut glib::GList;
    pub fn gtk_gesture_get_last_event(gesture: *mut GtkGesture, sequence: *mut gdk::GdkEventSequence) -> *const gdk::GdkEvent;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_last_updated_sequence(gesture: *mut GtkGesture) -> *mut gdk::GdkEventSequence;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_point(gesture: *mut GtkGesture, sequence: *mut gdk::GdkEventSequence, x: *mut c_double, y: *mut c_double) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_sequence_state(gesture: *mut GtkGesture, sequence: *mut gdk::GdkEventSequence) -> GtkEventSequenceState;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_sequences(gesture: *mut GtkGesture) -> *mut glib::GList;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_get_window(gesture: *mut GtkGesture) -> *mut gdk::GdkWindow;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_group(group_gesture: *mut GtkGesture, gesture: *mut GtkGesture);
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_handles_sequence(gesture: *mut GtkGesture, sequence: *mut gdk::GdkEventSequence) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_is_active(gesture: *mut GtkGesture) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_is_grouped_with(gesture: *mut GtkGesture, other: *mut GtkGesture) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_is_recognized(gesture: *mut GtkGesture) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_set_sequence_state(gesture: *mut GtkGesture, sequence: *mut gdk::GdkEventSequence, state: GtkEventSequenceState) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_set_state(gesture: *mut GtkGesture, state: GtkEventSequenceState) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_set_window(gesture: *mut GtkGesture, window: *mut gdk::GdkWindow);
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_ungroup(gesture: *mut GtkGesture);

    //=========================================================================
    // GtkGestureDrag
    //=========================================================================
    pub fn gtk_gesture_drag_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_drag_new(widget: *mut GtkWidget) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_drag_get_offset(gesture: *mut GtkGestureDrag, x: *mut c_double, y: *mut c_double) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_drag_get_start_point(gesture: *mut GtkGestureDrag, x: *mut c_double, y: *mut c_double) -> gboolean;

    //=========================================================================
    // GtkGestureLongPress
    //=========================================================================
    pub fn gtk_gesture_long_press_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_long_press_new(widget: *mut GtkWidget) -> *mut GtkGesture;

    //=========================================================================
    // GtkGestureMultiPress
    //=========================================================================
    pub fn gtk_gesture_multi_press_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_multi_press_new(widget: *mut GtkWidget) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_multi_press_get_area(gesture: *mut GtkGestureMultiPress, rect: *mut gdk::GdkRectangle) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_multi_press_set_area(gesture: *mut GtkGestureMultiPress, rect: *const gdk::GdkRectangle);

    //=========================================================================
    // GtkGesturePan
    //=========================================================================
    pub fn gtk_gesture_pan_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_pan_new(widget: *mut GtkWidget, orientation: GtkOrientation) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_pan_get_orientation(gesture: *mut GtkGesturePan) -> GtkOrientation;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_pan_set_orientation(gesture: *mut GtkGesturePan, orientation: GtkOrientation);

    //=========================================================================
    // GtkGestureRotate
    //=========================================================================
    pub fn gtk_gesture_rotate_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_rotate_new(widget: *mut GtkWidget) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_rotate_get_angle_delta(gesture: *mut GtkGestureRotate) -> c_double;

    //=========================================================================
    // GtkGestureSingle
    //=========================================================================
    pub fn gtk_gesture_single_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_get_button(gesture: *mut GtkGestureSingle) -> c_uint;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_get_current_button(gesture: *mut GtkGestureSingle) -> c_uint;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_get_current_sequence(gesture: *mut GtkGestureSingle) -> *mut gdk::GdkEventSequence;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_get_exclusive(gesture: *mut GtkGestureSingle) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_get_touch_only(gesture: *mut GtkGestureSingle) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_set_button(gesture: *mut GtkGestureSingle, button: c_uint);
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_set_exclusive(gesture: *mut GtkGestureSingle, exclusive: gboolean);
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_single_set_touch_only(gesture: *mut GtkGestureSingle, touch_only: gboolean);

    //=========================================================================
    // GtkGestureSwipe
    //=========================================================================
    pub fn gtk_gesture_swipe_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_swipe_new(widget: *mut GtkWidget) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_swipe_get_velocity(gesture: *mut GtkGestureSwipe, velocity_x: *mut c_double, velocity_y: *mut c_double) -> gboolean;

    //=========================================================================
    // GtkGestureZoom
    //=========================================================================
    pub fn gtk_gesture_zoom_get_type() -> GType;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_zoom_new(widget: *mut GtkWidget) -> *mut GtkGesture;
    #[cfg(gtk_3_14)]
    pub fn gtk_gesture_zoom_get_scale_delta(gesture: *mut GtkGestureZoom) -> c_double;

    //=========================================================================
    // GtkGrid
    //=========================================================================
    pub fn gtk_grid_get_type() -> GType;
    pub fn gtk_grid_new() -> *mut GtkWidget;
    pub fn gtk_grid_attach(grid: *mut GtkGrid, child: *mut GtkWidget, left: c_int, top: c_int, width: c_int, height: c_int);
    pub fn gtk_grid_attach_next_to(grid: *mut GtkGrid, child: *mut GtkWidget, sibling: *mut GtkWidget, side: GtkPositionType, width: c_int, height: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_get_baseline_row(grid: *mut GtkGrid) -> c_int;
    pub fn gtk_grid_get_child_at(grid: *mut GtkGrid, left: c_int, top: c_int) -> *mut GtkWidget;
    pub fn gtk_grid_get_column_homogeneous(grid: *mut GtkGrid) -> gboolean;
    pub fn gtk_grid_get_column_spacing(grid: *mut GtkGrid) -> c_uint;
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_get_row_baseline_position(grid: *mut GtkGrid, row: c_int) -> GtkBaselinePosition;
    pub fn gtk_grid_get_row_homogeneous(grid: *mut GtkGrid) -> gboolean;
    pub fn gtk_grid_get_row_spacing(grid: *mut GtkGrid) -> c_uint;
    pub fn gtk_grid_insert_column(grid: *mut GtkGrid, position: c_int);
    pub fn gtk_grid_insert_next_to(grid: *mut GtkGrid, sibling: *mut GtkWidget, side: GtkPositionType);
    pub fn gtk_grid_insert_row(grid: *mut GtkGrid, position: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_remove_column(grid: *mut GtkGrid, position: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_remove_row(grid: *mut GtkGrid, position: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_set_baseline_row(grid: *mut GtkGrid, row: c_int);
    pub fn gtk_grid_set_column_homogeneous(grid: *mut GtkGrid, homogeneous: gboolean);
    pub fn gtk_grid_set_column_spacing(grid: *mut GtkGrid, spacing: c_uint);
    #[cfg(gtk_3_10)]
    pub fn gtk_grid_set_row_baseline_position(grid: *mut GtkGrid, row: c_int, pos: GtkBaselinePosition);
    pub fn gtk_grid_set_row_homogeneous(grid: *mut GtkGrid, homogeneous: gboolean);
    pub fn gtk_grid_set_row_spacing(grid: *mut GtkGrid, spacing: c_uint);

    //=========================================================================
    // GtkHBox
    //=========================================================================
    pub fn gtk_hbox_get_type() -> GType;
    pub fn gtk_hbox_new(homogeneous: gboolean, spacing: c_int) -> *mut GtkWidget;

    //=========================================================================
    // GtkHButtonBox
    //=========================================================================
    pub fn gtk_hbutton_box_get_type() -> GType;
    pub fn gtk_hbutton_box_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkHPaned
    //=========================================================================
    pub fn gtk_hpaned_get_type() -> GType;
    pub fn gtk_hpaned_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkHSV
    //=========================================================================
    pub fn gtk_hsv_get_type() -> GType;
    pub fn gtk_hsv_new() -> *mut GtkWidget;
    pub fn gtk_hsv_to_rgb(h: c_double, s: c_double, v: c_double, r: *mut c_double, g: *mut c_double, b: *mut c_double);
    pub fn gtk_hsv_get_color(hsv: *mut GtkHSV, h: *mut c_double, s: *mut c_double, v: *mut c_double);
    pub fn gtk_hsv_get_metrics(hsv: *mut GtkHSV, size: *mut c_int, ring_width: *mut c_int);
    pub fn gtk_hsv_is_adjusting(hsv: *mut GtkHSV) -> gboolean;
    pub fn gtk_hsv_set_color(hsv: *mut GtkHSV, h: c_double, s: c_double, v: c_double);
    pub fn gtk_hsv_set_metrics(hsv: *mut GtkHSV, size: c_int, ring_width: c_int);

    //=========================================================================
    // GtkHScale
    //=========================================================================
    pub fn gtk_hscale_get_type() -> GType;
    pub fn gtk_hscale_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_hscale_new_with_range(min: c_double, max: c_double, step: c_double) -> *mut GtkWidget;

    //=========================================================================
    // GtkHScrollbar
    //=========================================================================
    pub fn gtk_hscrollbar_get_type() -> GType;
    pub fn gtk_hscrollbar_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;

    //=========================================================================
    // GtkHSeparator
    //=========================================================================
    pub fn gtk_hseparator_get_type() -> GType;
    pub fn gtk_hseparator_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkHandleBox
    //=========================================================================
    pub fn gtk_handle_box_get_type() -> GType;
    pub fn gtk_handle_box_new() -> *mut GtkWidget;
    pub fn gtk_handle_box_get_child_detached(handle_box: *mut GtkHandleBox) -> gboolean;
    pub fn gtk_handle_box_get_handle_position(handle_box: *mut GtkHandleBox) -> GtkPositionType;
    pub fn gtk_handle_box_get_shadow_type(handle_box: *mut GtkHandleBox) -> GtkShadowType;
    pub fn gtk_handle_box_get_snap_edge(handle_box: *mut GtkHandleBox) -> GtkPositionType;
    pub fn gtk_handle_box_set_handle_position(handle_box: *mut GtkHandleBox, position: GtkPositionType);
    pub fn gtk_handle_box_set_shadow_type(handle_box: *mut GtkHandleBox, type_: GtkShadowType);
    pub fn gtk_handle_box_set_snap_edge(handle_box: *mut GtkHandleBox, edge: GtkPositionType);

    //=========================================================================
    // GtkHeaderBar
    //=========================================================================
    pub fn gtk_header_bar_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_get_custom_title(bar: *mut GtkHeaderBar) -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_header_bar_get_decoration_layout(bar: *mut GtkHeaderBar) -> *const c_char;
    #[cfg(gtk_3_12)]
    pub fn gtk_header_bar_get_has_subtitle(bar: *mut GtkHeaderBar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_get_show_close_button(bar: *mut GtkHeaderBar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_get_subtitle(bar: *mut GtkHeaderBar) -> *const c_char;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_get_title(bar: *mut GtkHeaderBar) -> *const c_char;
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_pack_end(bar: *mut GtkHeaderBar, child: *mut GtkWidget);
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_pack_start(bar: *mut GtkHeaderBar, child: *mut GtkWidget);
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_set_custom_title(bar: *mut GtkHeaderBar, title_widget: *mut GtkWidget);
    #[cfg(gtk_3_12)]
    pub fn gtk_header_bar_set_decoration_layout(bar: *mut GtkHeaderBar, layout: *const c_char);
    #[cfg(gtk_3_12)]
    pub fn gtk_header_bar_set_has_subtitle(bar: *mut GtkHeaderBar, setting: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_set_show_close_button(bar: *mut GtkHeaderBar, setting: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_set_subtitle(bar: *mut GtkHeaderBar, subtitle: *const c_char);
    #[cfg(gtk_3_10)]
    pub fn gtk_header_bar_set_title(bar: *mut GtkHeaderBar, title: *const c_char);

    //=========================================================================
    // GtkIMContext
    //=========================================================================
    pub fn gtk_im_context_get_type() -> GType;
    pub fn gtk_im_context_delete_surrounding(context: *mut GtkIMContext, offset: c_int, n_chars: c_int) -> gboolean;
    pub fn gtk_im_context_filter_keypress(context: *mut GtkIMContext, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_im_context_focus_in(context: *mut GtkIMContext);
    pub fn gtk_im_context_focus_out(context: *mut GtkIMContext);
    pub fn gtk_im_context_get_preedit_string(context: *mut GtkIMContext, str: *mut *mut c_char, attrs: *mut *mut pango::PangoAttrList, cursor_pos: *mut c_int);
    pub fn gtk_im_context_get_surrounding(context: *mut GtkIMContext, text: *mut *mut c_char, cursor_index: *mut c_int) -> gboolean;
    pub fn gtk_im_context_reset(context: *mut GtkIMContext);
    pub fn gtk_im_context_set_client_window(context: *mut GtkIMContext, window: *mut gdk::GdkWindow);
    pub fn gtk_im_context_set_cursor_location(context: *mut GtkIMContext, area: *const gdk::GdkRectangle);
    pub fn gtk_im_context_set_surrounding(context: *mut GtkIMContext, text: *const c_char, len: c_int, cursor_index: c_int);
    pub fn gtk_im_context_set_use_preedit(context: *mut GtkIMContext, use_preedit: gboolean);

    //=========================================================================
    // GtkIMContextSimple
    //=========================================================================
    pub fn gtk_im_context_simple_get_type() -> GType;
    pub fn gtk_im_context_simple_new() -> *mut GtkIMContext;
    pub fn gtk_im_context_simple_add_table(context_simple: *mut GtkIMContextSimple, data: *mut u16, max_seq_len: c_int, n_seqs: c_int);

    //=========================================================================
    // GtkIMMulticontext
    //=========================================================================
    pub fn gtk_im_multicontext_get_type() -> GType;
    pub fn gtk_im_multicontext_new() -> *mut GtkIMContext;
    pub fn gtk_im_multicontext_append_menuitems(context: *mut GtkIMMulticontext, menushell: *mut GtkMenuShell);
    pub fn gtk_im_multicontext_get_context_id(context: *mut GtkIMMulticontext) -> *const c_char;
    pub fn gtk_im_multicontext_set_context_id(context: *mut GtkIMMulticontext, context_id: *const c_char);

    //=========================================================================
    // GtkIconFactory
    //=========================================================================
    pub fn gtk_icon_factory_get_type() -> GType;
    pub fn gtk_icon_factory_new() -> *mut GtkIconFactory;
    pub fn gtk_icon_factory_lookup_default(stock_id: *const c_char) -> *mut GtkIconSet;
    pub fn gtk_icon_factory_add(factory: *mut GtkIconFactory, stock_id: *const c_char, icon_set: *mut GtkIconSet);
    pub fn gtk_icon_factory_add_default(factory: *mut GtkIconFactory);
    pub fn gtk_icon_factory_lookup(factory: *mut GtkIconFactory, stock_id: *const c_char) -> *mut GtkIconSet;
    pub fn gtk_icon_factory_remove_default(factory: *mut GtkIconFactory);

    //=========================================================================
    // GtkIconInfo
    //=========================================================================
    pub fn gtk_icon_info_get_type() -> GType;
    pub fn gtk_icon_info_new_for_pixbuf(icon_theme: *mut GtkIconTheme, pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkIconInfo;
    pub fn gtk_icon_info_copy(icon_info: *mut GtkIconInfo) -> *mut GtkIconInfo;
    pub fn gtk_icon_info_free(icon_info: *mut GtkIconInfo);
    pub fn gtk_icon_info_get_attach_points(icon_info: *mut GtkIconInfo, points: *mut *mut gdk::GdkPoint, n_points: *mut c_int) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_info_get_base_scale(icon_info: *mut GtkIconInfo) -> c_int;
    pub fn gtk_icon_info_get_base_size(icon_info: *mut GtkIconInfo) -> c_int;
    pub fn gtk_icon_info_get_builtin_pixbuf(icon_info: *mut GtkIconInfo) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_info_get_display_name(icon_info: *mut GtkIconInfo) -> *const c_char;
    pub fn gtk_icon_info_get_embedded_rect(icon_info: *mut GtkIconInfo, rectangle: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gtk_icon_info_get_filename(icon_info: *mut GtkIconInfo) -> *mut c_char;
    #[cfg(gtk_3_12)]
    pub fn gtk_icon_info_is_symbolic(icon_info: *mut GtkIconInfo) -> gboolean;
    pub fn gtk_icon_info_load_icon(icon_info: *mut GtkIconInfo, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_icon_async(icon_info: *mut GtkIconInfo, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_icon_finish(icon_info: *mut GtkIconInfo, res: *mut gio::GAsyncResult, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_info_load_surface(icon_info: *mut GtkIconInfo, for_window: *mut gdk::GdkWindow, error: *mut *mut glib::GError) -> *mut cairo::cairo_surface_t;
    pub fn gtk_icon_info_load_symbolic(icon_info: *mut GtkIconInfo, fg: *const gdk::GdkRGBA, success_color: *const gdk::GdkRGBA, warning_color: *const gdk::GdkRGBA, error_color: *const gdk::GdkRGBA, was_symbolic: *mut gboolean, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_symbolic_async(icon_info: *mut GtkIconInfo, fg: *const gdk::GdkRGBA, success_color: *const gdk::GdkRGBA, warning_color: *const gdk::GdkRGBA, error_color: *const gdk::GdkRGBA, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_symbolic_finish(icon_info: *mut GtkIconInfo, res: *mut gio::GAsyncResult, was_symbolic: *mut gboolean, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_for_context(icon_info: *mut GtkIconInfo, context: *mut GtkStyleContext, was_symbolic: *mut gboolean, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_symbolic_for_context_async(icon_info: *mut GtkIconInfo, context: *mut GtkStyleContext, cancellable: *mut gio::GCancellable, callback: gio::GAsyncReadyCallback, user_data: gpointer);
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_info_load_symbolic_for_context_finish(icon_info: *mut GtkIconInfo, res: *mut gio::GAsyncResult, was_symbolic: *mut gboolean, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_info_load_symbolic_for_style(icon_info: *mut GtkIconInfo, style: *mut GtkStyle, state: GtkStateType, was_symbolic: *mut gboolean, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_icon_info_set_raw_coordinates(icon_info: *mut GtkIconInfo, raw_coordinates: gboolean);

    //=========================================================================
    // GtkIconTheme
    //=========================================================================
    pub fn gtk_icon_theme_get_type() -> GType;
    pub fn gtk_icon_theme_new() -> *mut GtkIconTheme;
    pub fn gtk_icon_theme_add_builtin_icon(icon_name: *const c_char, size: c_int, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_icon_theme_get_default() -> *mut GtkIconTheme;
    pub fn gtk_icon_theme_get_for_screen(screen: *mut gdk::GdkScreen) -> *mut GtkIconTheme;
    #[cfg(gtk_3_14)]
    pub fn gtk_icon_theme_add_resource_path(icon_theme: *mut GtkIconTheme, path: *const c_char);
    pub fn gtk_icon_theme_append_search_path(icon_theme: *mut GtkIconTheme, path: *mut c_char);
    pub fn gtk_icon_theme_choose_icon(icon_theme: *mut GtkIconTheme, icon_names: *mut c_char, size: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_theme_choose_icon_for_scale(icon_theme: *mut GtkIconTheme, icon_names: *mut c_char, size: c_int, scale: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    pub fn gtk_icon_theme_get_example_icon_name(icon_theme: *mut GtkIconTheme) -> *mut c_char;
    pub fn gtk_icon_theme_get_icon_sizes(icon_theme: *mut GtkIconTheme, icon_name: *const c_char) -> *mut c_int;
    pub fn gtk_icon_theme_get_search_path(icon_theme: *mut GtkIconTheme, path: *mut *mut c_char, n_elements: *mut c_int);
    pub fn gtk_icon_theme_has_icon(icon_theme: *mut GtkIconTheme, icon_name: *const c_char) -> gboolean;
    pub fn gtk_icon_theme_list_contexts(icon_theme: *mut GtkIconTheme) -> *mut glib::GList;
    pub fn gtk_icon_theme_list_icons(icon_theme: *mut GtkIconTheme, context: *const c_char) -> *mut glib::GList;
    pub fn gtk_icon_theme_load_icon(icon_theme: *mut GtkIconTheme, icon_name: *const c_char, size: c_int, flags: GtkIconLookupFlags, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_theme_load_icon_for_scale(icon_theme: *mut GtkIconTheme, icon_name: *const c_char, size: c_int, scale: c_int, flags: GtkIconLookupFlags, error: *mut *mut glib::GError) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_theme_load_surface(icon_theme: *mut GtkIconTheme, icon_name: *const c_char, size: c_int, scale: c_int, for_window: *mut gdk::GdkWindow, flags: GtkIconLookupFlags, error: *mut *mut glib::GError) -> *mut cairo::cairo_surface_t;
    pub fn gtk_icon_theme_lookup_by_gicon(icon_theme: *mut GtkIconTheme, icon: *mut gio::GIcon, size: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_theme_lookup_by_gicon_for_scale(icon_theme: *mut GtkIconTheme, icon: *mut gio::GIcon, size: c_int, scale: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    pub fn gtk_icon_theme_lookup_icon(icon_theme: *mut GtkIconTheme, icon_name: *const c_char, size: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    #[cfg(gtk_3_10)]
    pub fn gtk_icon_theme_lookup_icon_for_scale(icon_theme: *mut GtkIconTheme, icon_name: *const c_char, size: c_int, scale: c_int, flags: GtkIconLookupFlags) -> *mut GtkIconInfo;
    pub fn gtk_icon_theme_prepend_search_path(icon_theme: *mut GtkIconTheme, path: *mut c_char);
    pub fn gtk_icon_theme_rescan_if_needed(icon_theme: *mut GtkIconTheme) -> gboolean;
    pub fn gtk_icon_theme_set_custom_theme(icon_theme: *mut GtkIconTheme, theme_name: *const c_char);
    pub fn gtk_icon_theme_set_screen(icon_theme: *mut GtkIconTheme, screen: *mut gdk::GdkScreen);
    pub fn gtk_icon_theme_set_search_path(icon_theme: *mut GtkIconTheme, path: *mut c_char, n_elements: c_int);

    //=========================================================================
    // GtkIconView
    //=========================================================================
    pub fn gtk_icon_view_get_type() -> GType;
    pub fn gtk_icon_view_new() -> *mut GtkWidget;
    pub fn gtk_icon_view_new_with_area(area: *mut GtkCellArea) -> *mut GtkWidget;
    pub fn gtk_icon_view_new_with_model(model: *mut GtkTreeModel) -> *mut GtkWidget;
    pub fn gtk_icon_view_convert_widget_to_bin_window_coords(icon_view: *mut GtkIconView, wx: c_int, wy: c_int, bx: *mut c_int, by: *mut c_int);
    pub fn gtk_icon_view_create_drag_icon(icon_view: *mut GtkIconView, path: *mut GtkTreePath) -> *mut cairo::cairo_surface_t;
    pub fn gtk_icon_view_enable_model_drag_dest(icon_view: *mut GtkIconView, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    pub fn gtk_icon_view_enable_model_drag_source(icon_view: *mut GtkIconView, start_button_mask: gdk::GdkModifierType, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_view_get_activate_on_single_click(icon_view: *mut GtkIconView) -> gboolean;
    #[cfg(gtk_3_6)]
    pub fn gtk_icon_view_get_cell_rect(icon_view: *mut GtkIconView, path: *mut GtkTreePath, cell: *mut GtkCellRenderer, rect: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gtk_icon_view_get_column_spacing(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_columns(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_cursor(icon_view: *mut GtkIconView, path: *mut *mut GtkTreePath, cell: *mut *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_icon_view_get_dest_item_at_pos(icon_view: *mut GtkIconView, drag_x: c_int, drag_y: c_int, path: *mut *mut GtkTreePath, pos: *mut GtkIconViewDropPosition) -> gboolean;
    pub fn gtk_icon_view_get_drag_dest_item(icon_view: *mut GtkIconView, path: *mut *mut GtkTreePath, pos: *mut GtkIconViewDropPosition);
    pub fn gtk_icon_view_get_item_at_pos(icon_view: *mut GtkIconView, x: c_int, y: c_int, path: *mut *mut GtkTreePath, cell: *mut *mut GtkCellRenderer) -> gboolean;
    pub fn gtk_icon_view_get_item_column(icon_view: *mut GtkIconView, path: *mut GtkTreePath) -> c_int;
    pub fn gtk_icon_view_get_item_orientation(icon_view: *mut GtkIconView) -> GtkOrientation;
    pub fn gtk_icon_view_get_item_padding(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_item_row(icon_view: *mut GtkIconView, path: *mut GtkTreePath) -> c_int;
    pub fn gtk_icon_view_get_item_width(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_margin(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_markup_column(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_model(icon_view: *mut GtkIconView) -> *mut GtkTreeModel;
    pub fn gtk_icon_view_get_path_at_pos(icon_view: *mut GtkIconView, x: c_int, y: c_int) -> *mut GtkTreePath;
    pub fn gtk_icon_view_get_pixbuf_column(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_reorderable(icon_view: *mut GtkIconView) -> gboolean;
    pub fn gtk_icon_view_get_row_spacing(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_selected_items(icon_view: *mut GtkIconView) -> *mut glib::GList;
    pub fn gtk_icon_view_get_selection_mode(icon_view: *mut GtkIconView) -> GtkSelectionMode;
    pub fn gtk_icon_view_get_spacing(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_text_column(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_tooltip_column(icon_view: *mut GtkIconView) -> c_int;
    pub fn gtk_icon_view_get_tooltip_context(icon_view: *mut GtkIconView, x: *mut c_int, y: *mut c_int, keyboard_tip: gboolean, model: *mut *mut GtkTreeModel, path: *mut *mut GtkTreePath, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_icon_view_get_visible_range(icon_view: *mut GtkIconView, start_path: *mut *mut GtkTreePath, end_path: *mut *mut GtkTreePath) -> gboolean;
    pub fn gtk_icon_view_item_activated(icon_view: *mut GtkIconView, path: *mut GtkTreePath);
    pub fn gtk_icon_view_path_is_selected(icon_view: *mut GtkIconView, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_icon_view_scroll_to_path(icon_view: *mut GtkIconView, path: *mut GtkTreePath, use_align: gboolean, row_align: c_float, col_align: c_float);
    pub fn gtk_icon_view_select_all(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_select_path(icon_view: *mut GtkIconView, path: *mut GtkTreePath);
    pub fn gtk_icon_view_selected_foreach(icon_view: *mut GtkIconView, func: GtkIconViewForeachFunc, data: gpointer);
    #[cfg(gtk_3_8)]
    pub fn gtk_icon_view_set_activate_on_single_click(icon_view: *mut GtkIconView, single: gboolean);
    pub fn gtk_icon_view_set_column_spacing(icon_view: *mut GtkIconView, column_spacing: c_int);
    pub fn gtk_icon_view_set_columns(icon_view: *mut GtkIconView, columns: c_int);
    pub fn gtk_icon_view_set_cursor(icon_view: *mut GtkIconView, path: *mut GtkTreePath, cell: *mut GtkCellRenderer, start_editing: gboolean);
    pub fn gtk_icon_view_set_drag_dest_item(icon_view: *mut GtkIconView, path: *mut GtkTreePath, pos: GtkIconViewDropPosition);
    pub fn gtk_icon_view_set_item_orientation(icon_view: *mut GtkIconView, orientation: GtkOrientation);
    pub fn gtk_icon_view_set_item_padding(icon_view: *mut GtkIconView, item_padding: c_int);
    pub fn gtk_icon_view_set_item_width(icon_view: *mut GtkIconView, item_width: c_int);
    pub fn gtk_icon_view_set_margin(icon_view: *mut GtkIconView, margin: c_int);
    pub fn gtk_icon_view_set_markup_column(icon_view: *mut GtkIconView, column: c_int);
    pub fn gtk_icon_view_set_model(icon_view: *mut GtkIconView, model: *mut GtkTreeModel);
    pub fn gtk_icon_view_set_pixbuf_column(icon_view: *mut GtkIconView, column: c_int);
    pub fn gtk_icon_view_set_reorderable(icon_view: *mut GtkIconView, reorderable: gboolean);
    pub fn gtk_icon_view_set_row_spacing(icon_view: *mut GtkIconView, row_spacing: c_int);
    pub fn gtk_icon_view_set_selection_mode(icon_view: *mut GtkIconView, mode: GtkSelectionMode);
    pub fn gtk_icon_view_set_spacing(icon_view: *mut GtkIconView, spacing: c_int);
    pub fn gtk_icon_view_set_text_column(icon_view: *mut GtkIconView, column: c_int);
    pub fn gtk_icon_view_set_tooltip_cell(icon_view: *mut GtkIconView, tooltip: *mut GtkTooltip, path: *mut GtkTreePath, cell: *mut GtkCellRenderer);
    pub fn gtk_icon_view_set_tooltip_column(icon_view: *mut GtkIconView, column: c_int);
    pub fn gtk_icon_view_set_tooltip_item(icon_view: *mut GtkIconView, tooltip: *mut GtkTooltip, path: *mut GtkTreePath);
    pub fn gtk_icon_view_unselect_all(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_unselect_path(icon_view: *mut GtkIconView, path: *mut GtkTreePath);
    pub fn gtk_icon_view_unset_model_drag_dest(icon_view: *mut GtkIconView);
    pub fn gtk_icon_view_unset_model_drag_source(icon_view: *mut GtkIconView);

    //=========================================================================
    // GtkIconViewAccessible
    //=========================================================================
    pub fn gtk_icon_view_accessible_get_type() -> GType;

    //=========================================================================
    // GtkImage
    //=========================================================================
    pub fn gtk_image_get_type() -> GType;
    pub fn gtk_image_new() -> *mut GtkWidget;
    pub fn gtk_image_new_from_animation(animation: *mut gdk_pixbuf::GdkPixbufAnimation) -> *mut GtkWidget;
    pub fn gtk_image_new_from_file(filename: *mut c_char) -> *mut GtkWidget;
    pub fn gtk_image_new_from_gicon(icon: *mut gio::GIcon, size: c_int) -> *mut GtkWidget;
    pub fn gtk_image_new_from_icon_name(icon_name: *const c_char, size: c_int) -> *mut GtkWidget;
    pub fn gtk_image_new_from_icon_set(icon_set: *mut GtkIconSet, size: c_int) -> *mut GtkWidget;
    pub fn gtk_image_new_from_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_image_new_from_resource(resource_path: *const c_char) -> *mut GtkWidget;
    pub fn gtk_image_new_from_stock(stock_id: *const c_char, size: c_int) -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_image_new_from_surface(surface: *mut cairo::cairo_surface_t) -> *mut GtkWidget;
    pub fn gtk_image_clear(image: *mut GtkImage);
    pub fn gtk_image_get_animation(image: *mut GtkImage) -> *mut gdk_pixbuf::GdkPixbufAnimation;
    pub fn gtk_image_get_gicon(image: *mut GtkImage, gicon: *mut *mut gio::GIcon, size: *mut c_int);
    pub fn gtk_image_get_icon_name(image: *mut GtkImage, icon_name: *mut *const c_char, size: *mut c_int);
    pub fn gtk_image_get_icon_set(image: *mut GtkImage, icon_set: *mut *mut GtkIconSet, size: *mut c_int);
    pub fn gtk_image_get_pixbuf(image: *mut GtkImage) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_image_get_pixel_size(image: *mut GtkImage) -> c_int;
    pub fn gtk_image_get_stock(image: *mut GtkImage, stock_id: *mut *mut c_char, size: *mut c_int);
    pub fn gtk_image_get_storage_type(image: *mut GtkImage) -> GtkImageType;
    pub fn gtk_image_set_from_animation(image: *mut GtkImage, animation: *mut gdk_pixbuf::GdkPixbufAnimation);
    pub fn gtk_image_set_from_file(image: *mut GtkImage, filename: *mut c_char);
    pub fn gtk_image_set_from_gicon(image: *mut GtkImage, icon: *mut gio::GIcon, size: c_int);
    pub fn gtk_image_set_from_icon_name(image: *mut GtkImage, icon_name: *const c_char, size: c_int);
    pub fn gtk_image_set_from_icon_set(image: *mut GtkImage, icon_set: *mut GtkIconSet, size: c_int);
    pub fn gtk_image_set_from_pixbuf(image: *mut GtkImage, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_image_set_from_resource(image: *mut GtkImage, resource_path: *const c_char);
    pub fn gtk_image_set_from_stock(image: *mut GtkImage, stock_id: *const c_char, size: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_image_set_from_surface(image: *mut GtkImage, surface: *mut cairo::cairo_surface_t);
    pub fn gtk_image_set_pixel_size(image: *mut GtkImage, pixel_size: c_int);

    //=========================================================================
    // GtkImageAccessible
    //=========================================================================
    pub fn gtk_image_accessible_get_type() -> GType;

    //=========================================================================
    // GtkImageCellAccessible
    //=========================================================================
    pub fn gtk_image_cell_accessible_get_type() -> GType;

    //=========================================================================
    // GtkImageMenuItem
    //=========================================================================
    pub fn gtk_image_menu_item_get_type() -> GType;
    pub fn gtk_image_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_image_menu_item_new_from_stock(stock_id: *const c_char, accel_group: *mut GtkAccelGroup) -> *mut GtkWidget;
    pub fn gtk_image_menu_item_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_image_menu_item_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_image_menu_item_get_always_show_image(image_menu_item: *mut GtkImageMenuItem) -> gboolean;
    pub fn gtk_image_menu_item_get_image(image_menu_item: *mut GtkImageMenuItem) -> *mut GtkWidget;
    pub fn gtk_image_menu_item_get_use_stock(image_menu_item: *mut GtkImageMenuItem) -> gboolean;
    pub fn gtk_image_menu_item_set_accel_group(image_menu_item: *mut GtkImageMenuItem, accel_group: *mut GtkAccelGroup);
    pub fn gtk_image_menu_item_set_always_show_image(image_menu_item: *mut GtkImageMenuItem, always_show: gboolean);
    pub fn gtk_image_menu_item_set_image(image_menu_item: *mut GtkImageMenuItem, image: *mut GtkWidget);
    pub fn gtk_image_menu_item_set_use_stock(image_menu_item: *mut GtkImageMenuItem, use_stock: gboolean);

    //=========================================================================
    // GtkInfoBar
    //=========================================================================
    pub fn gtk_info_bar_get_type() -> GType;
    pub fn gtk_info_bar_new() -> *mut GtkWidget;
    pub fn gtk_info_bar_new_with_buttons(first_button_text: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_info_bar_add_action_widget(info_bar: *mut GtkInfoBar, child: *mut GtkWidget, response_id: c_int);
    pub fn gtk_info_bar_add_button(info_bar: *mut GtkInfoBar, button_text: *const c_char, response_id: c_int) -> *mut GtkButton;
    pub fn gtk_info_bar_add_buttons(info_bar: *mut GtkInfoBar, first_button_text: *const c_char, ...);
    pub fn gtk_info_bar_get_action_area(info_bar: *mut GtkInfoBar) -> *mut GtkWidget;
    pub fn gtk_info_bar_get_content_area(info_bar: *mut GtkInfoBar) -> *mut GtkWidget;
    pub fn gtk_info_bar_get_message_type(info_bar: *mut GtkInfoBar) -> GtkMessageType;
    #[cfg(gtk_3_10)]
    pub fn gtk_info_bar_get_show_close_button(info_bar: *mut GtkInfoBar) -> gboolean;
    pub fn gtk_info_bar_response(info_bar: *mut GtkInfoBar, response_id: c_int);
    pub fn gtk_info_bar_set_default_response(info_bar: *mut GtkInfoBar, response_id: c_int);
    pub fn gtk_info_bar_set_message_type(info_bar: *mut GtkInfoBar, message_type: GtkMessageType);
    pub fn gtk_info_bar_set_response_sensitive(info_bar: *mut GtkInfoBar, response_id: c_int, setting: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_info_bar_set_show_close_button(info_bar: *mut GtkInfoBar, setting: gboolean);

    //=========================================================================
    // GtkInvisible
    //=========================================================================
    pub fn gtk_invisible_get_type() -> GType;
    pub fn gtk_invisible_new() -> *mut GtkWidget;
    pub fn gtk_invisible_new_for_screen(screen: *mut gdk::GdkScreen) -> *mut GtkWidget;
    pub fn gtk_invisible_get_screen(invisible: *mut GtkInvisible) -> *mut gdk::GdkScreen;
    pub fn gtk_invisible_set_screen(invisible: *mut GtkInvisible, screen: *mut gdk::GdkScreen);

    //=========================================================================
    // GtkLabel
    //=========================================================================
    pub fn gtk_label_get_type() -> GType;
    pub fn gtk_label_new(str: *const c_char) -> *mut GtkWidget;
    pub fn gtk_label_new_with_mnemonic(str: *const c_char) -> *mut GtkWidget;
    pub fn gtk_label_get_angle(label: *mut GtkLabel) -> c_double;
    pub fn gtk_label_get_attributes(label: *mut GtkLabel) -> *mut pango::PangoAttrList;
    pub fn gtk_label_get_current_uri(label: *mut GtkLabel) -> *const c_char;
    pub fn gtk_label_get_ellipsize(label: *mut GtkLabel) -> pango::PangoEllipsizeMode;
    pub fn gtk_label_get_justify(label: *mut GtkLabel) -> GtkJustification;
    pub fn gtk_label_get_label(label: *mut GtkLabel) -> *const c_char;
    pub fn gtk_label_get_layout(label: *mut GtkLabel) -> *mut pango::PangoLayout;
    pub fn gtk_label_get_layout_offsets(label: *mut GtkLabel, x: *mut c_int, y: *mut c_int);
    pub fn gtk_label_get_line_wrap(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_line_wrap_mode(label: *mut GtkLabel) -> pango::PangoWrapMode;
    #[cfg(gtk_3_10)]
    pub fn gtk_label_get_lines(label: *mut GtkLabel) -> c_int;
    pub fn gtk_label_get_max_width_chars(label: *mut GtkLabel) -> c_int;
    pub fn gtk_label_get_mnemonic_keyval(label: *mut GtkLabel) -> c_uint;
    pub fn gtk_label_get_mnemonic_widget(label: *mut GtkLabel) -> *mut GtkWidget;
    pub fn gtk_label_get_selectable(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_selection_bounds(label: *mut GtkLabel, start: *mut c_int, end: *mut c_int) -> gboolean;
    pub fn gtk_label_get_single_line_mode(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_text(label: *mut GtkLabel) -> *const c_char;
    pub fn gtk_label_get_track_visited_links(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_use_markup(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_use_underline(label: *mut GtkLabel) -> gboolean;
    pub fn gtk_label_get_width_chars(label: *mut GtkLabel) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_label_get_xalign(label: *mut GtkLabel) -> c_float;
    #[cfg(gtk_3_16)]
    pub fn gtk_label_get_yalign(label: *mut GtkLabel) -> c_float;
    pub fn gtk_label_select_region(label: *mut GtkLabel, start_offset: c_int, end_offset: c_int);
    pub fn gtk_label_set_angle(label: *mut GtkLabel, angle: c_double);
    pub fn gtk_label_set_attributes(label: *mut GtkLabel, attrs: *mut pango::PangoAttrList);
    pub fn gtk_label_set_ellipsize(label: *mut GtkLabel, mode: pango::PangoEllipsizeMode);
    pub fn gtk_label_set_justify(label: *mut GtkLabel, jtype: GtkJustification);
    pub fn gtk_label_set_label(label: *mut GtkLabel, str: *const c_char);
    pub fn gtk_label_set_line_wrap(label: *mut GtkLabel, wrap: gboolean);
    pub fn gtk_label_set_line_wrap_mode(label: *mut GtkLabel, wrap_mode: pango::PangoWrapMode);
    #[cfg(gtk_3_10)]
    pub fn gtk_label_set_lines(label: *mut GtkLabel, lines: c_int);
    pub fn gtk_label_set_markup(label: *mut GtkLabel, str: *const c_char);
    pub fn gtk_label_set_markup_with_mnemonic(label: *mut GtkLabel, str: *const c_char);
    pub fn gtk_label_set_max_width_chars(label: *mut GtkLabel, n_chars: c_int);
    pub fn gtk_label_set_mnemonic_widget(label: *mut GtkLabel, widget: *mut GtkWidget);
    pub fn gtk_label_set_pattern(label: *mut GtkLabel, pattern: *const c_char);
    pub fn gtk_label_set_selectable(label: *mut GtkLabel, setting: gboolean);
    pub fn gtk_label_set_single_line_mode(label: *mut GtkLabel, single_line_mode: gboolean);
    pub fn gtk_label_set_text(label: *mut GtkLabel, str: *const c_char);
    pub fn gtk_label_set_text_with_mnemonic(label: *mut GtkLabel, str: *const c_char);
    pub fn gtk_label_set_track_visited_links(label: *mut GtkLabel, track_links: gboolean);
    pub fn gtk_label_set_use_markup(label: *mut GtkLabel, setting: gboolean);
    pub fn gtk_label_set_use_underline(label: *mut GtkLabel, setting: gboolean);
    pub fn gtk_label_set_width_chars(label: *mut GtkLabel, n_chars: c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_label_set_xalign(label: *mut GtkLabel, xalign: c_float);
    #[cfg(gtk_3_16)]
    pub fn gtk_label_set_yalign(label: *mut GtkLabel, yalign: c_float);

    //=========================================================================
    // GtkLabelAccessible
    //=========================================================================
    pub fn gtk_label_accessible_get_type() -> GType;

    //=========================================================================
    // GtkLayout
    //=========================================================================
    pub fn gtk_layout_get_type() -> GType;
    pub fn gtk_layout_new(hadjustment: *mut GtkAdjustment, vadjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_layout_get_bin_window(layout: *mut GtkLayout) -> *mut gdk::GdkWindow;
    pub fn gtk_layout_get_hadjustment(layout: *mut GtkLayout) -> *mut GtkAdjustment;
    pub fn gtk_layout_get_size(layout: *mut GtkLayout, width: *mut c_uint, height: *mut c_uint);
    pub fn gtk_layout_get_vadjustment(layout: *mut GtkLayout) -> *mut GtkAdjustment;
    pub fn gtk_layout_move(layout: *mut GtkLayout, child_widget: *mut GtkWidget, x: c_int, y: c_int);
    pub fn gtk_layout_put(layout: *mut GtkLayout, child_widget: *mut GtkWidget, x: c_int, y: c_int);
    pub fn gtk_layout_set_hadjustment(layout: *mut GtkLayout, adjustment: *mut GtkAdjustment);
    pub fn gtk_layout_set_size(layout: *mut GtkLayout, width: c_uint, height: c_uint);
    pub fn gtk_layout_set_vadjustment(layout: *mut GtkLayout, adjustment: *mut GtkAdjustment);

    //=========================================================================
    // GtkLevelBar
    //=========================================================================
    pub fn gtk_level_bar_get_type() -> GType;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_new_for_interval(min_value: c_double, max_value: c_double) -> *mut GtkWidget;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_add_offset_value(self_: *mut GtkLevelBar, name: *const c_char, value: c_double);
    #[cfg(gtk_3_8)]
    pub fn gtk_level_bar_get_inverted(self_: *mut GtkLevelBar) -> gboolean;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_get_max_value(self_: *mut GtkLevelBar) -> c_double;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_get_min_value(self_: *mut GtkLevelBar) -> c_double;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_get_mode(self_: *mut GtkLevelBar) -> GtkLevelBarMode;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_get_offset_value(self_: *mut GtkLevelBar, name: *const c_char, value: *mut c_double) -> gboolean;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_get_value(self_: *mut GtkLevelBar) -> c_double;
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_remove_offset_value(self_: *mut GtkLevelBar, name: *const c_char);
    #[cfg(gtk_3_8)]
    pub fn gtk_level_bar_set_inverted(self_: *mut GtkLevelBar, inverted: gboolean);
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_set_max_value(self_: *mut GtkLevelBar, value: c_double);
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_set_min_value(self_: *mut GtkLevelBar, value: c_double);
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_set_mode(self_: *mut GtkLevelBar, mode: GtkLevelBarMode);
    #[cfg(gtk_3_6)]
    pub fn gtk_level_bar_set_value(self_: *mut GtkLevelBar, value: c_double);

    //=========================================================================
    // GtkLevelBarAccessible
    //=========================================================================
    pub fn gtk_level_bar_accessible_get_type() -> GType;

    //=========================================================================
    // GtkLinkButton
    //=========================================================================
    pub fn gtk_link_button_get_type() -> GType;
    pub fn gtk_link_button_new(uri: *const c_char) -> *mut GtkWidget;
    pub fn gtk_link_button_new_with_label(uri: *const c_char, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_link_button_get_uri(link_button: *mut GtkLinkButton) -> *const c_char;
    pub fn gtk_link_button_get_visited(link_button: *mut GtkLinkButton) -> gboolean;
    pub fn gtk_link_button_set_uri(link_button: *mut GtkLinkButton, uri: *const c_char);
    pub fn gtk_link_button_set_visited(link_button: *mut GtkLinkButton, visited: gboolean);

    //=========================================================================
    // GtkLinkButtonAccessible
    //=========================================================================
    pub fn gtk_link_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkListBox
    //=========================================================================
    pub fn gtk_list_box_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_new() -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_list_box_bind_model(box_: *mut GtkListBox, model: *mut gio::GListModel, create_widget_func: GtkListBoxCreateWidgetFunc, user_data: gpointer, user_data_free_func: glib::GDestroyNotify);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_drag_highlight_row(box_: *mut GtkListBox, row: *mut GtkListBoxRow);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_drag_unhighlight_row(box_: *mut GtkListBox);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_activate_on_single_click(box_: *mut GtkListBox) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_adjustment(box_: *mut GtkListBox) -> *mut GtkAdjustment;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_row_at_index(box_: *mut GtkListBox, index_: c_int) -> *mut GtkListBoxRow;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_row_at_y(box_: *mut GtkListBox, y: c_int) -> *mut GtkListBoxRow;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_selected_row(box_: *mut GtkListBox) -> *mut GtkListBoxRow;
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_get_selected_rows(box_: *mut GtkListBox) -> *mut glib::GList;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_get_selection_mode(box_: *mut GtkListBox) -> GtkSelectionMode;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_insert(box_: *mut GtkListBox, child: *mut GtkWidget, position: c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_invalidate_filter(box_: *mut GtkListBox);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_invalidate_headers(box_: *mut GtkListBox);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_invalidate_sort(box_: *mut GtkListBox);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_prepend(box_: *mut GtkListBox, child: *mut GtkWidget);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_select_all(box_: *mut GtkListBox);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_select_row(box_: *mut GtkListBox, row: *mut GtkListBoxRow);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_selected_foreach(box_: *mut GtkListBox, func: GtkListBoxForeachFunc, data: gpointer);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_activate_on_single_click(box_: *mut GtkListBox, single: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_adjustment(box_: *mut GtkListBox, adjustment: *mut GtkAdjustment);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_filter_func(box_: *mut GtkListBox, filter_func: GtkListBoxFilterFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_header_func(box_: *mut GtkListBox, update_header: GtkListBoxUpdateHeaderFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_placeholder(box_: *mut GtkListBox, placeholder: *mut GtkWidget);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_selection_mode(box_: *mut GtkListBox, mode: GtkSelectionMode);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_set_sort_func(box_: *mut GtkListBox, sort_func: GtkListBoxSortFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_unselect_all(box_: *mut GtkListBox);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_unselect_row(box_: *mut GtkListBox, row: *mut GtkListBoxRow);

    //=========================================================================
    // GtkListBoxAccessible
    //=========================================================================
    pub fn gtk_list_box_accessible_get_type() -> GType;

    //=========================================================================
    // GtkListBoxRow
    //=========================================================================
    pub fn gtk_list_box_row_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_row_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_row_changed(row: *mut GtkListBoxRow);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_row_get_activatable(row: *mut GtkListBoxRow) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_row_get_header(row: *mut GtkListBoxRow) -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_row_get_index(row: *mut GtkListBoxRow) -> c_int;
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_row_get_selectable(row: *mut GtkListBoxRow) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_row_is_selected(row: *mut GtkListBoxRow) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_row_set_activatable(row: *mut GtkListBoxRow, activatable: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_list_box_row_set_header(row: *mut GtkListBoxRow, header: *mut GtkWidget);
    #[cfg(gtk_3_14)]
    pub fn gtk_list_box_row_set_selectable(row: *mut GtkListBoxRow, selectable: gboolean);

    //=========================================================================
    // GtkListBoxRowAccessible
    //=========================================================================
    pub fn gtk_list_box_row_accessible_get_type() -> GType;

    //=========================================================================
    // GtkListStore
    //=========================================================================
    pub fn gtk_list_store_get_type() -> GType;
    pub fn gtk_list_store_new(n_columns: c_int, ...) -> *mut GtkListStore;
    pub fn gtk_list_store_newv(n_columns: c_int, types: *mut GType) -> *mut GtkListStore;
    pub fn gtk_list_store_append(list_store: *mut GtkListStore, iter: *mut GtkTreeIter);
    pub fn gtk_list_store_clear(list_store: *mut GtkListStore);
    pub fn gtk_list_store_insert(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, position: c_int);
    pub fn gtk_list_store_insert_after(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, sibling: *mut GtkTreeIter);
    pub fn gtk_list_store_insert_before(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, sibling: *mut GtkTreeIter);
    pub fn gtk_list_store_insert_with_values(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, position: c_int, ...);
    pub fn gtk_list_store_insert_with_valuesv(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, position: c_int, columns: *mut c_int, values: *mut gobject::GValue, n_values: c_int);
    pub fn gtk_list_store_iter_is_valid(list_store: *mut GtkListStore, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_list_store_move_after(store: *mut GtkListStore, iter: *mut GtkTreeIter, position: *mut GtkTreeIter);
    pub fn gtk_list_store_move_before(store: *mut GtkListStore, iter: *mut GtkTreeIter, position: *mut GtkTreeIter);
    pub fn gtk_list_store_prepend(list_store: *mut GtkListStore, iter: *mut GtkTreeIter);
    pub fn gtk_list_store_remove(list_store: *mut GtkListStore, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_list_store_reorder(store: *mut GtkListStore, new_order: *mut c_int);
    pub fn gtk_list_store_set(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, ...);
    pub fn gtk_list_store_set_column_types(list_store: *mut GtkListStore, n_columns: c_int, types: *mut GType);
    //pub fn gtk_list_store_set_valist(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, var_args: [Unsupported type va_list]);
    pub fn gtk_list_store_set_value(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, column: c_int, value: *mut gobject::GValue);
    pub fn gtk_list_store_set_valuesv(list_store: *mut GtkListStore, iter: *mut GtkTreeIter, columns: *mut c_int, values: *mut gobject::GValue, n_values: c_int);
    pub fn gtk_list_store_swap(store: *mut GtkListStore, a: *mut GtkTreeIter, b: *mut GtkTreeIter);

    //=========================================================================
    // GtkLockButton
    //=========================================================================
    pub fn gtk_lock_button_get_type() -> GType;
    pub fn gtk_lock_button_new(permission: *mut gio::GPermission) -> *mut GtkWidget;
    pub fn gtk_lock_button_get_permission(button: *mut GtkLockButton) -> *mut gio::GPermission;
    pub fn gtk_lock_button_set_permission(button: *mut GtkLockButton, permission: *mut gio::GPermission);

    //=========================================================================
    // GtkLockButtonAccessible
    //=========================================================================
    pub fn gtk_lock_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkMenu
    //=========================================================================
    pub fn gtk_menu_get_type() -> GType;
    pub fn gtk_menu_new() -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_menu_new_from_model(model: *mut gio::GMenuModel) -> *mut GtkWidget;
    pub fn gtk_menu_get_for_attach_widget(widget: *mut GtkWidget) -> *mut glib::GList;
    pub fn gtk_menu_attach(menu: *mut GtkMenu, child: *mut GtkWidget, left_attach: c_uint, right_attach: c_uint, top_attach: c_uint, bottom_attach: c_uint);
    pub fn gtk_menu_attach_to_widget(menu: *mut GtkMenu, attach_widget: *mut GtkWidget, detacher: GtkMenuDetachFunc);
    pub fn gtk_menu_detach(menu: *mut GtkMenu);
    pub fn gtk_menu_get_accel_group(menu: *mut GtkMenu) -> *mut GtkAccelGroup;
    pub fn gtk_menu_get_accel_path(menu: *mut GtkMenu) -> *const c_char;
    pub fn gtk_menu_get_active(menu: *mut GtkMenu) -> *mut GtkWidget;
    pub fn gtk_menu_get_attach_widget(menu: *mut GtkMenu) -> *mut GtkWidget;
    pub fn gtk_menu_get_monitor(menu: *mut GtkMenu) -> c_int;
    pub fn gtk_menu_get_reserve_toggle_size(menu: *mut GtkMenu) -> gboolean;
    pub fn gtk_menu_get_tearoff_state(menu: *mut GtkMenu) -> gboolean;
    pub fn gtk_menu_get_title(menu: *mut GtkMenu) -> *const c_char;
    pub fn gtk_menu_popdown(menu: *mut GtkMenu);
    pub fn gtk_menu_popup(menu: *mut GtkMenu, parent_menu_shell: *mut GtkWidget, parent_menu_item: *mut GtkWidget, func: GtkMenuPositionFunc, data: gpointer, button: c_uint, activate_time: u32);
    pub fn gtk_menu_popup_for_device(menu: *mut GtkMenu, device: *mut gdk::GdkDevice, parent_menu_shell: *mut GtkWidget, parent_menu_item: *mut GtkWidget, func: GtkMenuPositionFunc, data: gpointer, destroy: glib::GDestroyNotify, button: c_uint, activate_time: u32);
    pub fn gtk_menu_reorder_child(menu: *mut GtkMenu, child: *mut GtkWidget, position: c_int);
    pub fn gtk_menu_reposition(menu: *mut GtkMenu);
    pub fn gtk_menu_set_accel_group(menu: *mut GtkMenu, accel_group: *mut GtkAccelGroup);
    pub fn gtk_menu_set_accel_path(menu: *mut GtkMenu, accel_path: *const c_char);
    pub fn gtk_menu_set_active(menu: *mut GtkMenu, index: c_uint);
    pub fn gtk_menu_set_monitor(menu: *mut GtkMenu, monitor_num: c_int);
    pub fn gtk_menu_set_reserve_toggle_size(menu: *mut GtkMenu, reserve_toggle_size: gboolean);
    pub fn gtk_menu_set_screen(menu: *mut GtkMenu, screen: *mut gdk::GdkScreen);
    pub fn gtk_menu_set_tearoff_state(menu: *mut GtkMenu, torn_off: gboolean);
    pub fn gtk_menu_set_title(menu: *mut GtkMenu, title: *const c_char);

    //=========================================================================
    // GtkMenuAccessible
    //=========================================================================
    pub fn gtk_menu_accessible_get_type() -> GType;

    //=========================================================================
    // GtkMenuBar
    //=========================================================================
    pub fn gtk_menu_bar_get_type() -> GType;
    pub fn gtk_menu_bar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_menu_bar_new_from_model(model: *mut gio::GMenuModel) -> *mut GtkWidget;
    pub fn gtk_menu_bar_get_child_pack_direction(menubar: *mut GtkMenuBar) -> GtkPackDirection;
    pub fn gtk_menu_bar_get_pack_direction(menubar: *mut GtkMenuBar) -> GtkPackDirection;
    pub fn gtk_menu_bar_set_child_pack_direction(menubar: *mut GtkMenuBar, child_pack_dir: GtkPackDirection);
    pub fn gtk_menu_bar_set_pack_direction(menubar: *mut GtkMenuBar, pack_dir: GtkPackDirection);

    //=========================================================================
    // GtkMenuButton
    //=========================================================================
    pub fn gtk_menu_button_get_type() -> GType;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_new() -> *mut GtkWidget;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_get_align_widget(menu_button: *mut GtkMenuButton) -> *mut GtkWidget;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_get_direction(menu_button: *mut GtkMenuButton) -> GtkArrowType;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_get_menu_model(menu_button: *mut GtkMenuButton) -> *mut gio::GMenuModel;
    #[cfg(gtk_3_12)]
    pub fn gtk_menu_button_get_popover(menu_button: *mut GtkMenuButton) -> *mut GtkPopover;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_get_popup(menu_button: *mut GtkMenuButton) -> *mut GtkMenu;
    #[cfg(gtk_3_12)]
    pub fn gtk_menu_button_get_use_popover(menu_button: *mut GtkMenuButton) -> gboolean;
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_set_align_widget(menu_button: *mut GtkMenuButton, align_widget: *mut GtkWidget);
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_set_direction(menu_button: *mut GtkMenuButton, direction: GtkArrowType);
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_set_menu_model(menu_button: *mut GtkMenuButton, menu_model: *mut gio::GMenuModel);
    #[cfg(gtk_3_12)]
    pub fn gtk_menu_button_set_popover(menu_button: *mut GtkMenuButton, popover: *mut GtkWidget);
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_button_set_popup(menu_button: *mut GtkMenuButton, menu: *mut GtkWidget);
    #[cfg(gtk_3_12)]
    pub fn gtk_menu_button_set_use_popover(menu_button: *mut GtkMenuButton, use_popover: gboolean);

    //=========================================================================
    // GtkMenuButtonAccessible
    //=========================================================================
    pub fn gtk_menu_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkMenuItem
    //=========================================================================
    pub fn gtk_menu_item_get_type() -> GType;
    pub fn gtk_menu_item_new() -> *mut GtkWidget;
    pub fn gtk_menu_item_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_menu_item_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_menu_item_activate(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_deselect(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_get_accel_path(menu_item: *mut GtkMenuItem) -> *const c_char;
    pub fn gtk_menu_item_get_label(menu_item: *mut GtkMenuItem) -> *const c_char;
    pub fn gtk_menu_item_get_reserve_indicator(menu_item: *mut GtkMenuItem) -> gboolean;
    pub fn gtk_menu_item_get_right_justified(menu_item: *mut GtkMenuItem) -> gboolean;
    pub fn gtk_menu_item_get_submenu(menu_item: *mut GtkMenuItem) -> *mut GtkWidget;
    pub fn gtk_menu_item_get_use_underline(menu_item: *mut GtkMenuItem) -> gboolean;
    pub fn gtk_menu_item_select(menu_item: *mut GtkMenuItem);
    pub fn gtk_menu_item_set_accel_path(menu_item: *mut GtkMenuItem, accel_path: *const c_char);
    pub fn gtk_menu_item_set_label(menu_item: *mut GtkMenuItem, label: *const c_char);
    pub fn gtk_menu_item_set_reserve_indicator(menu_item: *mut GtkMenuItem, reserve: gboolean);
    pub fn gtk_menu_item_set_right_justified(menu_item: *mut GtkMenuItem, right_justified: gboolean);
    pub fn gtk_menu_item_set_submenu(menu_item: *mut GtkMenuItem, submenu: *mut GtkMenu);
    pub fn gtk_menu_item_set_use_underline(menu_item: *mut GtkMenuItem, setting: gboolean);
    pub fn gtk_menu_item_toggle_size_allocate(menu_item: *mut GtkMenuItem, allocation: c_int);
    pub fn gtk_menu_item_toggle_size_request(menu_item: *mut GtkMenuItem, requisition: *mut c_int);

    //=========================================================================
    // GtkMenuItemAccessible
    //=========================================================================
    pub fn gtk_menu_item_accessible_get_type() -> GType;

    //=========================================================================
    // GtkMenuShell
    //=========================================================================
    pub fn gtk_menu_shell_get_type() -> GType;
    pub fn gtk_menu_shell_activate_item(menu_shell: *mut GtkMenuShell, menu_item: *mut GtkWidget, force_deactivate: gboolean);
    pub fn gtk_menu_shell_append(menu_shell: *mut GtkMenuShell, child: *mut GtkMenuItem);
    #[cfg(gtk_3_6)]
    pub fn gtk_menu_shell_bind_model(menu_shell: *mut GtkMenuShell, model: *mut gio::GMenuModel, action_namespace: *const c_char, with_separators: gboolean);
    pub fn gtk_menu_shell_cancel(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_deactivate(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_deselect(menu_shell: *mut GtkMenuShell);
    pub fn gtk_menu_shell_get_parent_shell(menu_shell: *mut GtkMenuShell) -> *mut GtkWidget;
    pub fn gtk_menu_shell_get_selected_item(menu_shell: *mut GtkMenuShell) -> *mut GtkWidget;
    pub fn gtk_menu_shell_get_take_focus(menu_shell: *mut GtkMenuShell) -> gboolean;
    pub fn gtk_menu_shell_insert(menu_shell: *mut GtkMenuShell, child: *mut GtkWidget, position: c_int);
    pub fn gtk_menu_shell_prepend(menu_shell: *mut GtkMenuShell, child: *mut GtkWidget);
    pub fn gtk_menu_shell_select_first(menu_shell: *mut GtkMenuShell, search_sensitive: gboolean);
    pub fn gtk_menu_shell_select_item(menu_shell: *mut GtkMenuShell, menu_item: *mut GtkWidget);
    pub fn gtk_menu_shell_set_take_focus(menu_shell: *mut GtkMenuShell, take_focus: gboolean);

    //=========================================================================
    // GtkMenuShellAccessible
    //=========================================================================
    pub fn gtk_menu_shell_accessible_get_type() -> GType;

    //=========================================================================
    // GtkMenuToolButton
    //=========================================================================
    pub fn gtk_menu_tool_button_get_type() -> GType;
    pub fn gtk_menu_tool_button_new(icon_widget: *mut GtkWidget, label: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_menu_tool_button_new_from_stock(stock_id: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_menu_tool_button_get_menu(button: *mut GtkMenuToolButton) -> *mut GtkWidget;
    pub fn gtk_menu_tool_button_set_arrow_tooltip_markup(button: *mut GtkMenuToolButton, markup: *const c_char);
    pub fn gtk_menu_tool_button_set_arrow_tooltip_text(button: *mut GtkMenuToolButton, text: *const c_char);
    pub fn gtk_menu_tool_button_set_menu(button: *mut GtkMenuToolButton, menu: *mut GtkWidget);

    //=========================================================================
    // GtkMessageDialog
    //=========================================================================
    pub fn gtk_message_dialog_get_type() -> GType;
    pub fn gtk_message_dialog_new(parent: *mut GtkWindow, flags: GtkDialogFlags, type_: GtkMessageType, buttons: GtkButtonsType, message_format: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_message_dialog_new_with_markup(parent: *mut GtkWindow, flags: GtkDialogFlags, type_: GtkMessageType, buttons: GtkButtonsType, message_format: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_message_dialog_format_secondary_markup(message_dialog: *mut GtkMessageDialog, message_format: *const c_char, ...);
    pub fn gtk_message_dialog_format_secondary_text(message_dialog: *mut GtkMessageDialog, message_format: *const c_char, ...);
    pub fn gtk_message_dialog_get_image(dialog: *mut GtkMessageDialog) -> *mut GtkWidget;
    pub fn gtk_message_dialog_get_message_area(message_dialog: *mut GtkMessageDialog) -> *mut GtkWidget;
    pub fn gtk_message_dialog_set_image(dialog: *mut GtkMessageDialog, image: *mut GtkWidget);
    pub fn gtk_message_dialog_set_markup(message_dialog: *mut GtkMessageDialog, str: *const c_char);

    //=========================================================================
    // GtkMisc
    //=========================================================================
    pub fn gtk_misc_get_type() -> GType;
    pub fn gtk_misc_get_alignment(misc: *mut GtkMisc, xalign: *mut c_float, yalign: *mut c_float);
    pub fn gtk_misc_get_padding(misc: *mut GtkMisc, xpad: *mut c_int, ypad: *mut c_int);
    pub fn gtk_misc_set_alignment(misc: *mut GtkMisc, xalign: c_float, yalign: c_float);
    pub fn gtk_misc_set_padding(misc: *mut GtkMisc, xpad: c_int, ypad: c_int);

    //=========================================================================
    // GtkModelButton
    //=========================================================================
    pub fn gtk_model_button_get_type() -> GType;
    #[cfg(gtk_3_16)]
    pub fn gtk_model_button_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkMountOperation
    //=========================================================================
    pub fn gtk_mount_operation_get_type() -> GType;
    pub fn gtk_mount_operation_new(parent: *mut GtkWindow) -> *mut gio::GMountOperation;
    pub fn gtk_mount_operation_get_parent(op: *mut GtkMountOperation) -> *mut GtkWindow;
    pub fn gtk_mount_operation_get_screen(op: *mut GtkMountOperation) -> *mut gdk::GdkScreen;
    pub fn gtk_mount_operation_is_showing(op: *mut GtkMountOperation) -> gboolean;
    pub fn gtk_mount_operation_set_parent(op: *mut GtkMountOperation, parent: *mut GtkWindow);
    pub fn gtk_mount_operation_set_screen(op: *mut GtkMountOperation, screen: *mut gdk::GdkScreen);

    //=========================================================================
    // GtkNotebook
    //=========================================================================
    pub fn gtk_notebook_get_type() -> GType;
    pub fn gtk_notebook_new() -> *mut GtkWidget;
    pub fn gtk_notebook_append_page(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget) -> c_int;
    pub fn gtk_notebook_append_page_menu(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget, menu_label: *mut GtkWidget) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_notebook_detach_tab(notebook: *mut GtkNotebook, child: *mut GtkWidget);
    pub fn gtk_notebook_get_action_widget(notebook: *mut GtkNotebook, pack_type: GtkPackType) -> *mut GtkWidget;
    pub fn gtk_notebook_get_current_page(notebook: *mut GtkNotebook) -> c_int;
    pub fn gtk_notebook_get_group_name(notebook: *mut GtkNotebook) -> *const c_char;
    pub fn gtk_notebook_get_menu_label(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_notebook_get_menu_label_text(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> *const c_char;
    pub fn gtk_notebook_get_n_pages(notebook: *mut GtkNotebook) -> c_int;
    pub fn gtk_notebook_get_nth_page(notebook: *mut GtkNotebook, page_num: c_int) -> *mut GtkWidget;
    pub fn gtk_notebook_get_scrollable(notebook: *mut GtkNotebook) -> gboolean;
    pub fn gtk_notebook_get_show_border(notebook: *mut GtkNotebook) -> gboolean;
    pub fn gtk_notebook_get_show_tabs(notebook: *mut GtkNotebook) -> gboolean;
    pub fn gtk_notebook_get_tab_detachable(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> gboolean;
    pub fn gtk_notebook_get_tab_hborder(notebook: *mut GtkNotebook) -> u16;
    pub fn gtk_notebook_get_tab_label(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_notebook_get_tab_label_text(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> *const c_char;
    pub fn gtk_notebook_get_tab_pos(notebook: *mut GtkNotebook) -> GtkPositionType;
    pub fn gtk_notebook_get_tab_reorderable(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> gboolean;
    pub fn gtk_notebook_get_tab_vborder(notebook: *mut GtkNotebook) -> u16;
    pub fn gtk_notebook_insert_page(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget, position: c_int) -> c_int;
    pub fn gtk_notebook_insert_page_menu(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget, menu_label: *mut GtkWidget, position: c_int) -> c_int;
    pub fn gtk_notebook_next_page(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_page_num(notebook: *mut GtkNotebook, child: *mut GtkWidget) -> c_int;
    pub fn gtk_notebook_popup_disable(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_popup_enable(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_prepend_page(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget) -> c_int;
    pub fn gtk_notebook_prepend_page_menu(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget, menu_label: *mut GtkWidget) -> c_int;
    pub fn gtk_notebook_prev_page(notebook: *mut GtkNotebook);
    pub fn gtk_notebook_remove_page(notebook: *mut GtkNotebook, page_num: c_int);
    pub fn gtk_notebook_reorder_child(notebook: *mut GtkNotebook, child: *mut GtkWidget, position: c_int);
    pub fn gtk_notebook_set_action_widget(notebook: *mut GtkNotebook, widget: *mut GtkWidget, pack_type: GtkPackType);
    pub fn gtk_notebook_set_current_page(notebook: *mut GtkNotebook, page_num: c_int);
    pub fn gtk_notebook_set_group_name(notebook: *mut GtkNotebook, group_name: *const c_char);
    pub fn gtk_notebook_set_menu_label(notebook: *mut GtkNotebook, child: *mut GtkWidget, menu_label: *mut GtkWidget);
    pub fn gtk_notebook_set_menu_label_text(notebook: *mut GtkNotebook, child: *mut GtkWidget, menu_text: *const c_char);
    pub fn gtk_notebook_set_scrollable(notebook: *mut GtkNotebook, scrollable: gboolean);
    pub fn gtk_notebook_set_show_border(notebook: *mut GtkNotebook, show_border: gboolean);
    pub fn gtk_notebook_set_show_tabs(notebook: *mut GtkNotebook, show_tabs: gboolean);
    pub fn gtk_notebook_set_tab_detachable(notebook: *mut GtkNotebook, child: *mut GtkWidget, detachable: gboolean);
    pub fn gtk_notebook_set_tab_label(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_label: *mut GtkWidget);
    pub fn gtk_notebook_set_tab_label_text(notebook: *mut GtkNotebook, child: *mut GtkWidget, tab_text: *const c_char);
    pub fn gtk_notebook_set_tab_pos(notebook: *mut GtkNotebook, pos: GtkPositionType);
    pub fn gtk_notebook_set_tab_reorderable(notebook: *mut GtkNotebook, child: *mut GtkWidget, reorderable: gboolean);

    //=========================================================================
    // GtkNotebookAccessible
    //=========================================================================
    pub fn gtk_notebook_accessible_get_type() -> GType;

    //=========================================================================
    // GtkNotebookPageAccessible
    //=========================================================================
    pub fn gtk_notebook_page_accessible_get_type() -> GType;
    pub fn gtk_notebook_page_accessible_new(notebook: *mut GtkNotebookAccessible, child: *mut GtkWidget) -> *mut atk::AtkObject;
    pub fn gtk_notebook_page_accessible_invalidate(page: *mut GtkNotebookPageAccessible);

    //=========================================================================
    // GtkNumerableIcon
    //=========================================================================
    pub fn gtk_numerable_icon_get_type() -> GType;
    pub fn gtk_numerable_icon_new(base_icon: *mut gio::GIcon) -> *mut gio::GIcon;
    pub fn gtk_numerable_icon_new_with_style_context(base_icon: *mut gio::GIcon, context: *mut GtkStyleContext) -> *mut gio::GIcon;
    pub fn gtk_numerable_icon_get_background_gicon(self_: *mut GtkNumerableIcon) -> *mut gio::GIcon;
    pub fn gtk_numerable_icon_get_background_icon_name(self_: *mut GtkNumerableIcon) -> *const c_char;
    pub fn gtk_numerable_icon_get_count(self_: *mut GtkNumerableIcon) -> c_int;
    pub fn gtk_numerable_icon_get_label(self_: *mut GtkNumerableIcon) -> *const c_char;
    pub fn gtk_numerable_icon_get_style_context(self_: *mut GtkNumerableIcon) -> *mut GtkStyleContext;
    pub fn gtk_numerable_icon_set_background_gicon(self_: *mut GtkNumerableIcon, icon: *mut gio::GIcon);
    pub fn gtk_numerable_icon_set_background_icon_name(self_: *mut GtkNumerableIcon, icon_name: *const c_char);
    pub fn gtk_numerable_icon_set_count(self_: *mut GtkNumerableIcon, count: c_int);
    pub fn gtk_numerable_icon_set_label(self_: *mut GtkNumerableIcon, label: *const c_char);
    pub fn gtk_numerable_icon_set_style_context(self_: *mut GtkNumerableIcon, style: *mut GtkStyleContext);

    //=========================================================================
    // GtkOffscreenWindow
    //=========================================================================
    pub fn gtk_offscreen_window_get_type() -> GType;
    pub fn gtk_offscreen_window_new() -> *mut GtkWidget;
    pub fn gtk_offscreen_window_get_pixbuf(offscreen: *mut GtkOffscreenWindow) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_offscreen_window_get_surface(offscreen: *mut GtkOffscreenWindow) -> *mut cairo::cairo_surface_t;

    //=========================================================================
    // GtkOverlay
    //=========================================================================
    pub fn gtk_overlay_get_type() -> GType;
    pub fn gtk_overlay_new() -> *mut GtkWidget;
    pub fn gtk_overlay_add_overlay(overlay: *mut GtkOverlay, widget: *mut GtkWidget);

    //=========================================================================
    // GtkPageSetup
    //=========================================================================
    pub fn gtk_page_setup_get_type() -> GType;
    pub fn gtk_page_setup_new() -> *mut GtkPageSetup;
    pub fn gtk_page_setup_new_from_file(file_name: *mut c_char, error: *mut *mut glib::GError) -> *mut GtkPageSetup;
    pub fn gtk_page_setup_new_from_key_file(key_file: *mut glib::GKeyFile, group_name: *const c_char, error: *mut *mut glib::GError) -> *mut GtkPageSetup;
    pub fn gtk_page_setup_copy(other: *mut GtkPageSetup) -> *mut GtkPageSetup;
    pub fn gtk_page_setup_get_bottom_margin(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_left_margin(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_orientation(setup: *mut GtkPageSetup) -> GtkPageOrientation;
    pub fn gtk_page_setup_get_page_height(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_page_width(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_paper_height(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_paper_size(setup: *mut GtkPageSetup) -> *mut GtkPaperSize;
    pub fn gtk_page_setup_get_paper_width(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_right_margin(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_get_top_margin(setup: *mut GtkPageSetup, unit: GtkUnit) -> c_double;
    pub fn gtk_page_setup_load_file(setup: *mut GtkPageSetup, file_name: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_page_setup_load_key_file(setup: *mut GtkPageSetup, key_file: *mut glib::GKeyFile, group_name: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_page_setup_set_bottom_margin(setup: *mut GtkPageSetup, margin: c_double, unit: GtkUnit);
    pub fn gtk_page_setup_set_left_margin(setup: *mut GtkPageSetup, margin: c_double, unit: GtkUnit);
    pub fn gtk_page_setup_set_orientation(setup: *mut GtkPageSetup, orientation: GtkPageOrientation);
    pub fn gtk_page_setup_set_paper_size(setup: *mut GtkPageSetup, size: *mut GtkPaperSize);
    pub fn gtk_page_setup_set_paper_size_and_default_margins(setup: *mut GtkPageSetup, size: *mut GtkPaperSize);
    pub fn gtk_page_setup_set_right_margin(setup: *mut GtkPageSetup, margin: c_double, unit: GtkUnit);
    pub fn gtk_page_setup_set_top_margin(setup: *mut GtkPageSetup, margin: c_double, unit: GtkUnit);
    pub fn gtk_page_setup_to_file(setup: *mut GtkPageSetup, file_name: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_page_setup_to_key_file(setup: *mut GtkPageSetup, key_file: *mut glib::GKeyFile, group_name: *const c_char);

    //=========================================================================
    // GtkPaned
    //=========================================================================
    pub fn gtk_paned_get_type() -> GType;
    pub fn gtk_paned_new(orientation: GtkOrientation) -> *mut GtkWidget;
    pub fn gtk_paned_add1(paned: *mut GtkPaned, child: *mut GtkWidget);
    pub fn gtk_paned_add2(paned: *mut GtkPaned, child: *mut GtkWidget);
    pub fn gtk_paned_get_child1(paned: *mut GtkPaned) -> *mut GtkWidget;
    pub fn gtk_paned_get_child2(paned: *mut GtkPaned) -> *mut GtkWidget;
    pub fn gtk_paned_get_handle_window(paned: *mut GtkPaned) -> *mut gdk::GdkWindow;
    pub fn gtk_paned_get_position(paned: *mut GtkPaned) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_paned_get_wide_handle(paned: *mut GtkPaned) -> gboolean;
    pub fn gtk_paned_pack1(paned: *mut GtkPaned, child: *mut GtkWidget, resize: gboolean, shrink: gboolean);
    pub fn gtk_paned_pack2(paned: *mut GtkPaned, child: *mut GtkWidget, resize: gboolean, shrink: gboolean);
    pub fn gtk_paned_set_position(paned: *mut GtkPaned, position: c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_paned_set_wide_handle(paned: *mut GtkPaned, wide: gboolean);

    //=========================================================================
    // GtkPanedAccessible
    //=========================================================================
    pub fn gtk_paned_accessible_get_type() -> GType;

    //=========================================================================
    // GtkPlacesSidebar
    //=========================================================================
    pub fn gtk_places_sidebar_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_add_shortcut(sidebar: *mut GtkPlacesSidebar, location: *mut gio::GFile);
    #[cfg(gtk_3_12)]
    pub fn gtk_places_sidebar_get_local_only(sidebar: *mut GtkPlacesSidebar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_get_location(sidebar: *mut GtkPlacesSidebar) -> *mut gio::GFile;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_get_nth_bookmark(sidebar: *mut GtkPlacesSidebar, n: c_int) -> *mut gio::GFile;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_get_open_flags(sidebar: *mut GtkPlacesSidebar) -> GtkPlacesOpenFlags;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_get_show_connect_to_server(sidebar: *mut GtkPlacesSidebar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_get_show_desktop(sidebar: *mut GtkPlacesSidebar) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_places_sidebar_get_show_enter_location(sidebar: *mut GtkPlacesSidebar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_list_shortcuts(sidebar: *mut GtkPlacesSidebar) -> *mut glib::GSList;
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_remove_shortcut(sidebar: *mut GtkPlacesSidebar, location: *mut gio::GFile);
    #[cfg(gtk_3_12)]
    pub fn gtk_places_sidebar_set_local_only(sidebar: *mut GtkPlacesSidebar, local_only: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_set_location(sidebar: *mut GtkPlacesSidebar, location: *mut gio::GFile);
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_set_open_flags(sidebar: *mut GtkPlacesSidebar, flags: GtkPlacesOpenFlags);
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_set_show_connect_to_server(sidebar: *mut GtkPlacesSidebar, show_connect_to_server: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_places_sidebar_set_show_desktop(sidebar: *mut GtkPlacesSidebar, show_desktop: gboolean);
    #[cfg(gtk_3_14)]
    pub fn gtk_places_sidebar_set_show_enter_location(sidebar: *mut GtkPlacesSidebar, show_enter_location: gboolean);

    //=========================================================================
    // GtkPlug
    //=========================================================================
    pub fn gtk_plug_get_type() -> GType;
    //pub fn gtk_plug_new(socket_id: xlib::Window) -> *mut GtkWidget;
    //pub fn gtk_plug_new_for_display(display: *mut gdk::GdkDisplay, socket_id: xlib::Window) -> *mut GtkWidget;
    //pub fn gtk_plug_construct(plug: *mut GtkPlug, socket_id: xlib::Window);
    //pub fn gtk_plug_construct_for_display(plug: *mut GtkPlug, display: *mut gdk::GdkDisplay, socket_id: xlib::Window);
    pub fn gtk_plug_get_embedded(plug: *mut GtkPlug) -> gboolean;
    //pub fn gtk_plug_get_id(plug: *mut GtkPlug) -> xlib::Window;
    pub fn gtk_plug_get_socket_window(plug: *mut GtkPlug) -> *mut gdk::GdkWindow;

    //=========================================================================
    // GtkPopover
    //=========================================================================
    pub fn gtk_popover_get_type() -> GType;
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_new(relative_to: *mut GtkWidget) -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_new_from_model(relative_to: *mut GtkWidget, model: *mut gio::GMenuModel) -> *mut GtkWidget;
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_bind_model(popover: *mut GtkPopover, model: *mut gio::GMenuModel, action_namespace: *const c_char);
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_get_modal(popover: *mut GtkPopover) -> gboolean;
    pub fn gtk_popover_get_pointing_to(popover: *mut GtkPopover, rect: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gtk_popover_get_position(popover: *mut GtkPopover) -> GtkPositionType;
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_get_relative_to(popover: *mut GtkPopover) -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_popover_get_transitions_enabled(popover: *mut GtkPopover) -> gboolean;
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_set_modal(popover: *mut GtkPopover, modal: gboolean);
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_set_pointing_to(popover: *mut GtkPopover, rect: *const gdk::GdkRectangle);
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_set_position(popover: *mut GtkPopover, position: GtkPositionType);
    #[cfg(gtk_3_12)]
    pub fn gtk_popover_set_relative_to(popover: *mut GtkPopover, relative_to: *mut GtkWidget);
    #[cfg(gtk_3_16)]
    pub fn gtk_popover_set_transitions_enabled(popover: *mut GtkPopover, transitions_enabled: gboolean);

    //=========================================================================
    // GtkPopoverAccessible
    //=========================================================================
    pub fn gtk_popover_accessible_get_type() -> GType;

    //=========================================================================
    // GtkPopoverMenu
    //=========================================================================
    pub fn gtk_popover_menu_get_type() -> GType;
    #[cfg(gtk_3_16)]
    pub fn gtk_popover_menu_new() -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_popover_menu_open_submenu(popover: *mut GtkPopoverMenu, name: *const c_char);

    //=========================================================================
    // GtkPrintContext
    //=========================================================================
    pub fn gtk_print_context_get_type() -> GType;
    pub fn gtk_print_context_create_pango_context(context: *mut GtkPrintContext) -> *mut pango::PangoContext;
    pub fn gtk_print_context_create_pango_layout(context: *mut GtkPrintContext) -> *mut pango::PangoLayout;
    pub fn gtk_print_context_get_cairo_context(context: *mut GtkPrintContext) -> *mut cairo::cairo_t;
    pub fn gtk_print_context_get_dpi_x(context: *mut GtkPrintContext) -> c_double;
    pub fn gtk_print_context_get_dpi_y(context: *mut GtkPrintContext) -> c_double;
    pub fn gtk_print_context_get_hard_margins(context: *mut GtkPrintContext, top: *mut c_double, bottom: *mut c_double, left: *mut c_double, right: *mut c_double) -> gboolean;
    pub fn gtk_print_context_get_height(context: *mut GtkPrintContext) -> c_double;
    pub fn gtk_print_context_get_page_setup(context: *mut GtkPrintContext) -> *mut GtkPageSetup;
    pub fn gtk_print_context_get_pango_fontmap(context: *mut GtkPrintContext) -> *mut pango::PangoFontMap;
    pub fn gtk_print_context_get_width(context: *mut GtkPrintContext) -> c_double;
    pub fn gtk_print_context_set_cairo_context(context: *mut GtkPrintContext, cr: *mut cairo::cairo_t, dpi_x: c_double, dpi_y: c_double);

    //=========================================================================
    // GtkPrintOperation
    //=========================================================================
    pub fn gtk_print_operation_get_type() -> GType;
    pub fn gtk_print_operation_new() -> *mut GtkPrintOperation;
    pub fn gtk_print_operation_cancel(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_draw_page_finish(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_get_default_page_setup(op: *mut GtkPrintOperation) -> *mut GtkPageSetup;
    pub fn gtk_print_operation_get_embed_page_setup(op: *mut GtkPrintOperation) -> gboolean;
    pub fn gtk_print_operation_get_error(op: *mut GtkPrintOperation, error: *mut *mut glib::GError);
    pub fn gtk_print_operation_get_has_selection(op: *mut GtkPrintOperation) -> gboolean;
    pub fn gtk_print_operation_get_n_pages_to_print(op: *mut GtkPrintOperation) -> c_int;
    pub fn gtk_print_operation_get_print_settings(op: *mut GtkPrintOperation) -> *mut GtkPrintSettings;
    pub fn gtk_print_operation_get_status(op: *mut GtkPrintOperation) -> GtkPrintStatus;
    pub fn gtk_print_operation_get_status_string(op: *mut GtkPrintOperation) -> *const c_char;
    pub fn gtk_print_operation_get_support_selection(op: *mut GtkPrintOperation) -> gboolean;
    pub fn gtk_print_operation_is_finished(op: *mut GtkPrintOperation) -> gboolean;
    pub fn gtk_print_operation_run(op: *mut GtkPrintOperation, action: GtkPrintOperationAction, parent: *mut GtkWindow, error: *mut *mut glib::GError) -> GtkPrintOperationResult;
    pub fn gtk_print_operation_set_allow_async(op: *mut GtkPrintOperation, allow_async: gboolean);
    pub fn gtk_print_operation_set_current_page(op: *mut GtkPrintOperation, current_page: c_int);
    pub fn gtk_print_operation_set_custom_tab_label(op: *mut GtkPrintOperation, label: *const c_char);
    pub fn gtk_print_operation_set_default_page_setup(op: *mut GtkPrintOperation, default_page_setup: *mut GtkPageSetup);
    pub fn gtk_print_operation_set_defer_drawing(op: *mut GtkPrintOperation);
    pub fn gtk_print_operation_set_embed_page_setup(op: *mut GtkPrintOperation, embed: gboolean);
    pub fn gtk_print_operation_set_export_filename(op: *mut GtkPrintOperation, filename: *mut c_char);
    pub fn gtk_print_operation_set_has_selection(op: *mut GtkPrintOperation, has_selection: gboolean);
    pub fn gtk_print_operation_set_job_name(op: *mut GtkPrintOperation, job_name: *const c_char);
    pub fn gtk_print_operation_set_n_pages(op: *mut GtkPrintOperation, n_pages: c_int);
    pub fn gtk_print_operation_set_print_settings(op: *mut GtkPrintOperation, print_settings: *mut GtkPrintSettings);
    pub fn gtk_print_operation_set_show_progress(op: *mut GtkPrintOperation, show_progress: gboolean);
    pub fn gtk_print_operation_set_support_selection(op: *mut GtkPrintOperation, support_selection: gboolean);
    pub fn gtk_print_operation_set_track_print_status(op: *mut GtkPrintOperation, track_status: gboolean);
    pub fn gtk_print_operation_set_unit(op: *mut GtkPrintOperation, unit: GtkUnit);
    pub fn gtk_print_operation_set_use_full_page(op: *mut GtkPrintOperation, full_page: gboolean);

    //=========================================================================
    // GtkPrintSettings
    //=========================================================================
    pub fn gtk_print_settings_get_type() -> GType;
    pub fn gtk_print_settings_new() -> *mut GtkPrintSettings;
    pub fn gtk_print_settings_new_from_file(file_name: *mut c_char, error: *mut *mut glib::GError) -> *mut GtkPrintSettings;
    pub fn gtk_print_settings_new_from_key_file(key_file: *mut glib::GKeyFile, group_name: *const c_char, error: *mut *mut glib::GError) -> *mut GtkPrintSettings;
    pub fn gtk_print_settings_copy(other: *mut GtkPrintSettings) -> *mut GtkPrintSettings;
    pub fn gtk_print_settings_foreach(settings: *mut GtkPrintSettings, func: GtkPrintSettingsFunc, user_data: gpointer);
    pub fn gtk_print_settings_get(settings: *mut GtkPrintSettings, key: *const c_char) -> *const c_char;
    pub fn gtk_print_settings_get_bool(settings: *mut GtkPrintSettings, key: *const c_char) -> gboolean;
    pub fn gtk_print_settings_get_collate(settings: *mut GtkPrintSettings) -> gboolean;
    pub fn gtk_print_settings_get_default_source(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_dither(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_double(settings: *mut GtkPrintSettings, key: *const c_char) -> c_double;
    pub fn gtk_print_settings_get_double_with_default(settings: *mut GtkPrintSettings, key: *const c_char, def: c_double) -> c_double;
    pub fn gtk_print_settings_get_duplex(settings: *mut GtkPrintSettings) -> GtkPrintDuplex;
    pub fn gtk_print_settings_get_finishings(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_int(settings: *mut GtkPrintSettings, key: *const c_char) -> c_int;
    pub fn gtk_print_settings_get_int_with_default(settings: *mut GtkPrintSettings, key: *const c_char, def: c_int) -> c_int;
    pub fn gtk_print_settings_get_length(settings: *mut GtkPrintSettings, key: *const c_char, unit: GtkUnit) -> c_double;
    pub fn gtk_print_settings_get_media_type(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_n_copies(settings: *mut GtkPrintSettings) -> c_int;
    pub fn gtk_print_settings_get_number_up(settings: *mut GtkPrintSettings) -> c_int;
    pub fn gtk_print_settings_get_number_up_layout(settings: *mut GtkPrintSettings) -> GtkNumberUpLayout;
    pub fn gtk_print_settings_get_orientation(settings: *mut GtkPrintSettings) -> GtkPageOrientation;
    pub fn gtk_print_settings_get_output_bin(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_page_ranges(settings: *mut GtkPrintSettings, num_ranges: *mut c_int) -> *mut GtkPageRange;
    pub fn gtk_print_settings_get_page_set(settings: *mut GtkPrintSettings) -> GtkPageSet;
    pub fn gtk_print_settings_get_paper_height(settings: *mut GtkPrintSettings, unit: GtkUnit) -> c_double;
    pub fn gtk_print_settings_get_paper_size(settings: *mut GtkPrintSettings) -> *mut GtkPaperSize;
    pub fn gtk_print_settings_get_paper_width(settings: *mut GtkPrintSettings, unit: GtkUnit) -> c_double;
    pub fn gtk_print_settings_get_print_pages(settings: *mut GtkPrintSettings) -> GtkPrintPages;
    pub fn gtk_print_settings_get_printer(settings: *mut GtkPrintSettings) -> *const c_char;
    pub fn gtk_print_settings_get_printer_lpi(settings: *mut GtkPrintSettings) -> c_double;
    pub fn gtk_print_settings_get_quality(settings: *mut GtkPrintSettings) -> GtkPrintQuality;
    pub fn gtk_print_settings_get_resolution(settings: *mut GtkPrintSettings) -> c_int;
    pub fn gtk_print_settings_get_resolution_x(settings: *mut GtkPrintSettings) -> c_int;
    pub fn gtk_print_settings_get_resolution_y(settings: *mut GtkPrintSettings) -> c_int;
    pub fn gtk_print_settings_get_reverse(settings: *mut GtkPrintSettings) -> gboolean;
    pub fn gtk_print_settings_get_scale(settings: *mut GtkPrintSettings) -> c_double;
    pub fn gtk_print_settings_get_use_color(settings: *mut GtkPrintSettings) -> gboolean;
    pub fn gtk_print_settings_has_key(settings: *mut GtkPrintSettings, key: *const c_char) -> gboolean;
    pub fn gtk_print_settings_load_file(settings: *mut GtkPrintSettings, file_name: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_print_settings_load_key_file(settings: *mut GtkPrintSettings, key_file: *mut glib::GKeyFile, group_name: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_print_settings_set(settings: *mut GtkPrintSettings, key: *const c_char, value: *const c_char);
    pub fn gtk_print_settings_set_bool(settings: *mut GtkPrintSettings, key: *const c_char, value: gboolean);
    pub fn gtk_print_settings_set_collate(settings: *mut GtkPrintSettings, collate: gboolean);
    pub fn gtk_print_settings_set_default_source(settings: *mut GtkPrintSettings, default_source: *const c_char);
    pub fn gtk_print_settings_set_dither(settings: *mut GtkPrintSettings, dither: *const c_char);
    pub fn gtk_print_settings_set_double(settings: *mut GtkPrintSettings, key: *const c_char, value: c_double);
    pub fn gtk_print_settings_set_duplex(settings: *mut GtkPrintSettings, duplex: GtkPrintDuplex);
    pub fn gtk_print_settings_set_finishings(settings: *mut GtkPrintSettings, finishings: *const c_char);
    pub fn gtk_print_settings_set_int(settings: *mut GtkPrintSettings, key: *const c_char, value: c_int);
    pub fn gtk_print_settings_set_length(settings: *mut GtkPrintSettings, key: *const c_char, value: c_double, unit: GtkUnit);
    pub fn gtk_print_settings_set_media_type(settings: *mut GtkPrintSettings, media_type: *const c_char);
    pub fn gtk_print_settings_set_n_copies(settings: *mut GtkPrintSettings, num_copies: c_int);
    pub fn gtk_print_settings_set_number_up(settings: *mut GtkPrintSettings, number_up: c_int);
    pub fn gtk_print_settings_set_number_up_layout(settings: *mut GtkPrintSettings, number_up_layout: GtkNumberUpLayout);
    pub fn gtk_print_settings_set_orientation(settings: *mut GtkPrintSettings, orientation: GtkPageOrientation);
    pub fn gtk_print_settings_set_output_bin(settings: *mut GtkPrintSettings, output_bin: *const c_char);
    pub fn gtk_print_settings_set_page_ranges(settings: *mut GtkPrintSettings, page_ranges: *mut GtkPageRange, num_ranges: c_int);
    pub fn gtk_print_settings_set_page_set(settings: *mut GtkPrintSettings, page_set: GtkPageSet);
    pub fn gtk_print_settings_set_paper_height(settings: *mut GtkPrintSettings, height: c_double, unit: GtkUnit);
    pub fn gtk_print_settings_set_paper_size(settings: *mut GtkPrintSettings, paper_size: *mut GtkPaperSize);
    pub fn gtk_print_settings_set_paper_width(settings: *mut GtkPrintSettings, width: c_double, unit: GtkUnit);
    pub fn gtk_print_settings_set_print_pages(settings: *mut GtkPrintSettings, pages: GtkPrintPages);
    pub fn gtk_print_settings_set_printer(settings: *mut GtkPrintSettings, printer: *const c_char);
    pub fn gtk_print_settings_set_printer_lpi(settings: *mut GtkPrintSettings, lpi: c_double);
    pub fn gtk_print_settings_set_quality(settings: *mut GtkPrintSettings, quality: GtkPrintQuality);
    pub fn gtk_print_settings_set_resolution(settings: *mut GtkPrintSettings, resolution: c_int);
    pub fn gtk_print_settings_set_resolution_xy(settings: *mut GtkPrintSettings, resolution_x: c_int, resolution_y: c_int);
    pub fn gtk_print_settings_set_reverse(settings: *mut GtkPrintSettings, reverse: gboolean);
    pub fn gtk_print_settings_set_scale(settings: *mut GtkPrintSettings, scale: c_double);
    pub fn gtk_print_settings_set_use_color(settings: *mut GtkPrintSettings, use_color: gboolean);
    pub fn gtk_print_settings_to_file(settings: *mut GtkPrintSettings, file_name: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_print_settings_to_key_file(settings: *mut GtkPrintSettings, key_file: *mut glib::GKeyFile, group_name: *const c_char);
    pub fn gtk_print_settings_unset(settings: *mut GtkPrintSettings, key: *const c_char);

    //=========================================================================
    // GtkProgressBar
    //=========================================================================
    pub fn gtk_progress_bar_get_type() -> GType;
    pub fn gtk_progress_bar_new() -> *mut GtkWidget;
    pub fn gtk_progress_bar_get_ellipsize(pbar: *mut GtkProgressBar) -> pango::PangoEllipsizeMode;
    pub fn gtk_progress_bar_get_fraction(pbar: *mut GtkProgressBar) -> c_double;
    pub fn gtk_progress_bar_get_inverted(pbar: *mut GtkProgressBar) -> gboolean;
    pub fn gtk_progress_bar_get_pulse_step(pbar: *mut GtkProgressBar) -> c_double;
    pub fn gtk_progress_bar_get_show_text(pbar: *mut GtkProgressBar) -> gboolean;
    pub fn gtk_progress_bar_get_text(pbar: *mut GtkProgressBar) -> *const c_char;
    pub fn gtk_progress_bar_pulse(pbar: *mut GtkProgressBar);
    pub fn gtk_progress_bar_set_ellipsize(pbar: *mut GtkProgressBar, mode: pango::PangoEllipsizeMode);
    pub fn gtk_progress_bar_set_fraction(pbar: *mut GtkProgressBar, fraction: c_double);
    pub fn gtk_progress_bar_set_inverted(pbar: *mut GtkProgressBar, inverted: gboolean);
    pub fn gtk_progress_bar_set_pulse_step(pbar: *mut GtkProgressBar, fraction: c_double);
    pub fn gtk_progress_bar_set_show_text(pbar: *mut GtkProgressBar, show_text: gboolean);
    pub fn gtk_progress_bar_set_text(pbar: *mut GtkProgressBar, text: *const c_char);

    //=========================================================================
    // GtkProgressBarAccessible
    //=========================================================================
    pub fn gtk_progress_bar_accessible_get_type() -> GType;

    //=========================================================================
    // GtkRadioAction
    //=========================================================================
    pub fn gtk_radio_action_get_type() -> GType;
    pub fn gtk_radio_action_new(name: *const c_char, label: *const c_char, tooltip: *const c_char, stock_id: *const c_char, value: c_int) -> *mut GtkRadioAction;
    pub fn gtk_radio_action_get_current_value(action: *mut GtkRadioAction) -> c_int;
    pub fn gtk_radio_action_get_group(action: *mut GtkRadioAction) -> *mut glib::GSList;
    pub fn gtk_radio_action_join_group(action: *mut GtkRadioAction, group_source: *mut GtkRadioAction);
    pub fn gtk_radio_action_set_current_value(action: *mut GtkRadioAction, current_value: c_int);
    pub fn gtk_radio_action_set_group(action: *mut GtkRadioAction, group: *mut glib::GSList);

    //=========================================================================
    // GtkRadioButton
    //=========================================================================
    pub fn gtk_radio_button_get_type() -> GType;
    pub fn gtk_radio_button_new(group: *mut glib::GSList) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_from_widget(radio_group_member: *mut GtkRadioButton) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_with_label(group: *mut glib::GSList, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_with_label_from_widget(radio_group_member: *mut GtkRadioButton, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_with_mnemonic(group: *mut glib::GSList, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member: *mut GtkRadioButton, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_button_get_group(radio_button: *mut GtkRadioButton) -> *mut glib::GSList;
    pub fn gtk_radio_button_join_group(radio_button: *mut GtkRadioButton, group_source: *mut GtkRadioButton);
    pub fn gtk_radio_button_set_group(radio_button: *mut GtkRadioButton, group: *mut glib::GSList);

    //=========================================================================
    // GtkRadioButtonAccessible
    //=========================================================================
    pub fn gtk_radio_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkRadioMenuItem
    //=========================================================================
    pub fn gtk_radio_menu_item_get_type() -> GType;
    pub fn gtk_radio_menu_item_new(group: *mut glib::GSList) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_from_widget(group: *mut GtkRadioMenuItem) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_label(group: *mut glib::GSList, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_label_from_widget(group: *mut GtkRadioMenuItem, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_mnemonic(group: *mut glib::GSList, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_new_with_mnemonic_from_widget(group: *mut GtkRadioMenuItem, label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_radio_menu_item_get_group(radio_menu_item: *mut GtkRadioMenuItem) -> *mut glib::GSList;
    pub fn gtk_radio_menu_item_set_group(radio_menu_item: *mut GtkRadioMenuItem, group: *mut glib::GSList);

    //=========================================================================
    // GtkRadioMenuItemAccessible
    //=========================================================================
    pub fn gtk_radio_menu_item_accessible_get_type() -> GType;

    //=========================================================================
    // GtkRadioToolButton
    //=========================================================================
    pub fn gtk_radio_tool_button_get_type() -> GType;
    pub fn gtk_radio_tool_button_new(group: *mut glib::GSList) -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_from_stock(group: *mut glib::GSList, stock_id: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_from_widget(group: *mut GtkRadioToolButton) -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_new_with_stock_from_widget(group: *mut GtkRadioToolButton, stock_id: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_radio_tool_button_get_group(button: *mut GtkRadioToolButton) -> *mut glib::GSList;
    pub fn gtk_radio_tool_button_set_group(button: *mut GtkRadioToolButton, group: *mut glib::GSList);

    //=========================================================================
    // GtkRange
    //=========================================================================
    pub fn gtk_range_get_type() -> GType;
    pub fn gtk_range_get_adjustment(range: *mut GtkRange) -> *mut GtkAdjustment;
    pub fn gtk_range_get_fill_level(range: *mut GtkRange) -> c_double;
    pub fn gtk_range_get_flippable(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_get_inverted(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_get_lower_stepper_sensitivity(range: *mut GtkRange) -> GtkSensitivityType;
    pub fn gtk_range_get_min_slider_size(range: *mut GtkRange) -> c_int;
    pub fn gtk_range_get_range_rect(range: *mut GtkRange, range_rect: *mut gdk::GdkRectangle);
    pub fn gtk_range_get_restrict_to_fill_level(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_get_round_digits(range: *mut GtkRange) -> c_int;
    pub fn gtk_range_get_show_fill_level(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_get_slider_range(range: *mut GtkRange, slider_start: *mut c_int, slider_end: *mut c_int);
    pub fn gtk_range_get_slider_size_fixed(range: *mut GtkRange) -> gboolean;
    pub fn gtk_range_get_upper_stepper_sensitivity(range: *mut GtkRange) -> GtkSensitivityType;
    pub fn gtk_range_get_value(range: *mut GtkRange) -> c_double;
    pub fn gtk_range_set_adjustment(range: *mut GtkRange, adjustment: *mut GtkAdjustment);
    pub fn gtk_range_set_fill_level(range: *mut GtkRange, fill_level: c_double);
    pub fn gtk_range_set_flippable(range: *mut GtkRange, flippable: gboolean);
    pub fn gtk_range_set_increments(range: *mut GtkRange, step: c_double, page: c_double);
    pub fn gtk_range_set_inverted(range: *mut GtkRange, setting: gboolean);
    pub fn gtk_range_set_lower_stepper_sensitivity(range: *mut GtkRange, sensitivity: GtkSensitivityType);
    pub fn gtk_range_set_min_slider_size(range: *mut GtkRange, min_size: c_int);
    pub fn gtk_range_set_range(range: *mut GtkRange, min: c_double, max: c_double);
    pub fn gtk_range_set_restrict_to_fill_level(range: *mut GtkRange, restrict_to_fill_level: gboolean);
    pub fn gtk_range_set_round_digits(range: *mut GtkRange, round_digits: c_int);
    pub fn gtk_range_set_show_fill_level(range: *mut GtkRange, show_fill_level: gboolean);
    pub fn gtk_range_set_slider_size_fixed(range: *mut GtkRange, size_fixed: gboolean);
    pub fn gtk_range_set_upper_stepper_sensitivity(range: *mut GtkRange, sensitivity: GtkSensitivityType);
    pub fn gtk_range_set_value(range: *mut GtkRange, value: c_double);

    //=========================================================================
    // GtkRangeAccessible
    //=========================================================================
    pub fn gtk_range_accessible_get_type() -> GType;

    //=========================================================================
    // GtkRcStyle
    //=========================================================================
    pub fn gtk_rc_style_get_type() -> GType;
    pub fn gtk_rc_style_new() -> *mut GtkRcStyle;
    pub fn gtk_rc_style_copy(orig: *mut GtkRcStyle) -> *mut GtkRcStyle;

    //=========================================================================
    // GtkRecentAction
    //=========================================================================
    pub fn gtk_recent_action_get_type() -> GType;
    pub fn gtk_recent_action_new(name: *const c_char, label: *const c_char, tooltip: *const c_char, stock_id: *const c_char) -> *mut GtkAction;
    pub fn gtk_recent_action_new_for_manager(name: *const c_char, label: *const c_char, tooltip: *const c_char, stock_id: *const c_char, manager: *mut GtkRecentManager) -> *mut GtkAction;
    pub fn gtk_recent_action_get_show_numbers(action: *mut GtkRecentAction) -> gboolean;
    pub fn gtk_recent_action_set_show_numbers(action: *mut GtkRecentAction, show_numbers: gboolean);

    //=========================================================================
    // GtkRecentChooserDialog
    //=========================================================================
    pub fn gtk_recent_chooser_dialog_get_type() -> GType;
    pub fn gtk_recent_chooser_dialog_new(title: *const c_char, parent: *mut GtkWindow, first_button_text: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_recent_chooser_dialog_new_for_manager(title: *const c_char, parent: *mut GtkWindow, manager: *mut GtkRecentManager, first_button_text: *const c_char, ...) -> *mut GtkWidget;

    //=========================================================================
    // GtkRecentChooserMenu
    //=========================================================================
    pub fn gtk_recent_chooser_menu_get_type() -> GType;
    pub fn gtk_recent_chooser_menu_new() -> *mut GtkWidget;
    pub fn gtk_recent_chooser_menu_new_for_manager(manager: *mut GtkRecentManager) -> *mut GtkWidget;
    pub fn gtk_recent_chooser_menu_get_show_numbers(menu: *mut GtkRecentChooserMenu) -> gboolean;
    pub fn gtk_recent_chooser_menu_set_show_numbers(menu: *mut GtkRecentChooserMenu, show_numbers: gboolean);

    //=========================================================================
    // GtkRecentChooserWidget
    //=========================================================================
    pub fn gtk_recent_chooser_widget_get_type() -> GType;
    pub fn gtk_recent_chooser_widget_new() -> *mut GtkWidget;
    pub fn gtk_recent_chooser_widget_new_for_manager(manager: *mut GtkRecentManager) -> *mut GtkWidget;

    //=========================================================================
    // GtkRecentFilter
    //=========================================================================
    pub fn gtk_recent_filter_get_type() -> GType;
    pub fn gtk_recent_filter_new() -> *mut GtkRecentFilter;
    pub fn gtk_recent_filter_add_age(filter: *mut GtkRecentFilter, days: c_int);
    pub fn gtk_recent_filter_add_application(filter: *mut GtkRecentFilter, application: *const c_char);
    pub fn gtk_recent_filter_add_custom(filter: *mut GtkRecentFilter, needed: GtkRecentFilterFlags, func: GtkRecentFilterFunc, data: gpointer, data_destroy: glib::GDestroyNotify);
    pub fn gtk_recent_filter_add_group(filter: *mut GtkRecentFilter, group: *const c_char);
    pub fn gtk_recent_filter_add_mime_type(filter: *mut GtkRecentFilter, mime_type: *const c_char);
    pub fn gtk_recent_filter_add_pattern(filter: *mut GtkRecentFilter, pattern: *const c_char);
    pub fn gtk_recent_filter_add_pixbuf_formats(filter: *mut GtkRecentFilter);
    pub fn gtk_recent_filter_filter(filter: *mut GtkRecentFilter, filter_info: *const GtkRecentFilterInfo) -> gboolean;
    pub fn gtk_recent_filter_get_name(filter: *mut GtkRecentFilter) -> *const c_char;
    pub fn gtk_recent_filter_get_needed(filter: *mut GtkRecentFilter) -> GtkRecentFilterFlags;
    pub fn gtk_recent_filter_set_name(filter: *mut GtkRecentFilter, name: *const c_char);

    //=========================================================================
    // GtkRecentManager
    //=========================================================================
    pub fn gtk_recent_manager_get_type() -> GType;
    pub fn gtk_recent_manager_new() -> *mut GtkRecentManager;
    pub fn gtk_recent_manager_get_default() -> *mut GtkRecentManager;
    pub fn gtk_recent_manager_add_full(manager: *mut GtkRecentManager, uri: *const c_char, recent_data: *const GtkRecentData) -> gboolean;
    pub fn gtk_recent_manager_add_item(manager: *mut GtkRecentManager, uri: *const c_char) -> gboolean;
    pub fn gtk_recent_manager_get_items(manager: *mut GtkRecentManager) -> *mut glib::GList;
    pub fn gtk_recent_manager_has_item(manager: *mut GtkRecentManager, uri: *const c_char) -> gboolean;
    pub fn gtk_recent_manager_lookup_item(manager: *mut GtkRecentManager, uri: *const c_char, error: *mut *mut glib::GError) -> *mut GtkRecentInfo;
    pub fn gtk_recent_manager_move_item(manager: *mut GtkRecentManager, uri: *const c_char, new_uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_recent_manager_purge_items(manager: *mut GtkRecentManager, error: *mut *mut glib::GError) -> c_int;
    pub fn gtk_recent_manager_remove_item(manager: *mut GtkRecentManager, uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;

    //=========================================================================
    // GtkRendererCellAccessible
    //=========================================================================
    pub fn gtk_renderer_cell_accessible_get_type() -> GType;
    pub fn gtk_renderer_cell_accessible_new(renderer: *mut GtkCellRenderer) -> *mut atk::AtkObject;

    //=========================================================================
    // GtkRevealer
    //=========================================================================
    pub fn gtk_revealer_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_get_child_revealed(revealer: *mut GtkRevealer) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_get_reveal_child(revealer: *mut GtkRevealer) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_get_transition_duration(revealer: *mut GtkRevealer) -> c_uint;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_get_transition_type(revealer: *mut GtkRevealer) -> GtkRevealerTransitionType;
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_set_reveal_child(revealer: *mut GtkRevealer, reveal_child: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_set_transition_duration(revealer: *mut GtkRevealer, duration: c_uint);
    #[cfg(gtk_3_10)]
    pub fn gtk_revealer_set_transition_type(revealer: *mut GtkRevealer, transition: GtkRevealerTransitionType);

    //=========================================================================
    // GtkScale
    //=========================================================================
    pub fn gtk_scale_get_type() -> GType;
    pub fn gtk_scale_new(orientation: GtkOrientation, adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_scale_new_with_range(orientation: GtkOrientation, min: c_double, max: c_double, step: c_double) -> *mut GtkWidget;
    pub fn gtk_scale_add_mark(scale: *mut GtkScale, value: c_double, position: GtkPositionType, markup: *const c_char);
    pub fn gtk_scale_clear_marks(scale: *mut GtkScale);
    pub fn gtk_scale_get_digits(scale: *mut GtkScale) -> c_int;
    pub fn gtk_scale_get_draw_value(scale: *mut GtkScale) -> gboolean;
    #[cfg(gtk_3_4)]
    pub fn gtk_scale_get_has_origin(scale: *mut GtkScale) -> gboolean;
    pub fn gtk_scale_get_layout(scale: *mut GtkScale) -> *mut pango::PangoLayout;
    pub fn gtk_scale_get_layout_offsets(scale: *mut GtkScale, x: *mut c_int, y: *mut c_int);
    pub fn gtk_scale_get_value_pos(scale: *mut GtkScale) -> GtkPositionType;
    pub fn gtk_scale_set_digits(scale: *mut GtkScale, digits: c_int);
    pub fn gtk_scale_set_draw_value(scale: *mut GtkScale, draw_value: gboolean);
    #[cfg(gtk_3_4)]
    pub fn gtk_scale_set_has_origin(scale: *mut GtkScale, has_origin: gboolean);
    pub fn gtk_scale_set_value_pos(scale: *mut GtkScale, pos: GtkPositionType);

    //=========================================================================
    // GtkScaleAccessible
    //=========================================================================
    pub fn gtk_scale_accessible_get_type() -> GType;

    //=========================================================================
    // GtkScaleButton
    //=========================================================================
    pub fn gtk_scale_button_get_type() -> GType;
    pub fn gtk_scale_button_new(size: c_int, min: c_double, max: c_double, step: c_double, icons: *mut *mut c_char) -> *mut GtkWidget;
    pub fn gtk_scale_button_get_adjustment(button: *mut GtkScaleButton) -> *mut GtkAdjustment;
    pub fn gtk_scale_button_get_minus_button(button: *mut GtkScaleButton) -> *mut GtkWidget;
    pub fn gtk_scale_button_get_plus_button(button: *mut GtkScaleButton) -> *mut GtkWidget;
    pub fn gtk_scale_button_get_popup(button: *mut GtkScaleButton) -> *mut GtkWidget;
    pub fn gtk_scale_button_get_value(button: *mut GtkScaleButton) -> c_double;
    pub fn gtk_scale_button_set_adjustment(button: *mut GtkScaleButton, adjustment: *mut GtkAdjustment);
    pub fn gtk_scale_button_set_icons(button: *mut GtkScaleButton, icons: *mut *mut c_char);
    pub fn gtk_scale_button_set_value(button: *mut GtkScaleButton, value: c_double);

    //=========================================================================
    // GtkScaleButtonAccessible
    //=========================================================================
    pub fn gtk_scale_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkScrollbar
    //=========================================================================
    pub fn gtk_scrollbar_get_type() -> GType;
    pub fn gtk_scrollbar_new(orientation: GtkOrientation, adjustment: *mut GtkAdjustment) -> *mut GtkWidget;

    //=========================================================================
    // GtkScrolledWindow
    //=========================================================================
    pub fn gtk_scrolled_window_get_type() -> GType;
    pub fn gtk_scrolled_window_new(hadjustment: *mut GtkAdjustment, vadjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_scrolled_window_add_with_viewport(scrolled_window: *mut GtkScrolledWindow, child: *mut GtkWidget);
    #[cfg(gtk_3_4)]
    pub fn gtk_scrolled_window_get_capture_button_press(scrolled_window: *mut GtkScrolledWindow) -> gboolean;
    pub fn gtk_scrolled_window_get_hadjustment(scrolled_window: *mut GtkScrolledWindow) -> *mut GtkAdjustment;
    pub fn gtk_scrolled_window_get_hscrollbar(scrolled_window: *mut GtkScrolledWindow) -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_scrolled_window_get_kinetic_scrolling(scrolled_window: *mut GtkScrolledWindow) -> gboolean;
    pub fn gtk_scrolled_window_get_min_content_height(scrolled_window: *mut GtkScrolledWindow) -> c_int;
    pub fn gtk_scrolled_window_get_min_content_width(scrolled_window: *mut GtkScrolledWindow) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_scrolled_window_get_overlay_scrolling(scrolled_window: *mut GtkScrolledWindow) -> gboolean;
    pub fn gtk_scrolled_window_get_placement(scrolled_window: *mut GtkScrolledWindow) -> GtkCornerType;
    pub fn gtk_scrolled_window_get_policy(scrolled_window: *mut GtkScrolledWindow, hscrollbar_policy: *mut GtkPolicyType, vscrollbar_policy: *mut GtkPolicyType);
    pub fn gtk_scrolled_window_get_shadow_type(scrolled_window: *mut GtkScrolledWindow) -> GtkShadowType;
    pub fn gtk_scrolled_window_get_vadjustment(scrolled_window: *mut GtkScrolledWindow) -> *mut GtkAdjustment;
    pub fn gtk_scrolled_window_get_vscrollbar(scrolled_window: *mut GtkScrolledWindow) -> *mut GtkWidget;
    #[cfg(gtk_3_4)]
    pub fn gtk_scrolled_window_set_capture_button_press(scrolled_window: *mut GtkScrolledWindow, capture_button_press: gboolean);
    pub fn gtk_scrolled_window_set_hadjustment(scrolled_window: *mut GtkScrolledWindow, hadjustment: *mut GtkAdjustment);
    #[cfg(gtk_3_4)]
    pub fn gtk_scrolled_window_set_kinetic_scrolling(scrolled_window: *mut GtkScrolledWindow, kinetic_scrolling: gboolean);
    pub fn gtk_scrolled_window_set_min_content_height(scrolled_window: *mut GtkScrolledWindow, height: c_int);
    pub fn gtk_scrolled_window_set_min_content_width(scrolled_window: *mut GtkScrolledWindow, width: c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_scrolled_window_set_overlay_scrolling(scrolled_window: *mut GtkScrolledWindow, overlay_scrolling: gboolean);
    pub fn gtk_scrolled_window_set_placement(scrolled_window: *mut GtkScrolledWindow, window_placement: GtkCornerType);
    pub fn gtk_scrolled_window_set_policy(scrolled_window: *mut GtkScrolledWindow, hscrollbar_policy: GtkPolicyType, vscrollbar_policy: GtkPolicyType);
    pub fn gtk_scrolled_window_set_shadow_type(scrolled_window: *mut GtkScrolledWindow, type_: GtkShadowType);
    pub fn gtk_scrolled_window_set_vadjustment(scrolled_window: *mut GtkScrolledWindow, vadjustment: *mut GtkAdjustment);
    pub fn gtk_scrolled_window_unset_placement(scrolled_window: *mut GtkScrolledWindow);

    //=========================================================================
    // GtkScrolledWindowAccessible
    //=========================================================================
    pub fn gtk_scrolled_window_accessible_get_type() -> GType;

    //=========================================================================
    // GtkSearchBar
    //=========================================================================
    pub fn gtk_search_bar_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_connect_entry(bar: *mut GtkSearchBar, entry: *mut GtkEntry);
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_get_search_mode(bar: *mut GtkSearchBar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_get_show_close_button(bar: *mut GtkSearchBar) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_handle_event(bar: *mut GtkSearchBar, event: *mut gdk::GdkEvent) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_set_search_mode(bar: *mut GtkSearchBar, search_mode: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_search_bar_set_show_close_button(bar: *mut GtkSearchBar, visible: gboolean);

    //=========================================================================
    // GtkSearchEntry
    //=========================================================================
    pub fn gtk_search_entry_get_type() -> GType;
    #[cfg(gtk_3_6)]
    pub fn gtk_search_entry_new() -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_search_entry_handle_event(entry: *mut GtkSearchEntry, event: *mut gdk::GdkEvent) -> gboolean;

    //=========================================================================
    // GtkSeparator
    //=========================================================================
    pub fn gtk_separator_get_type() -> GType;
    pub fn gtk_separator_new(orientation: GtkOrientation) -> *mut GtkWidget;

    //=========================================================================
    // GtkSeparatorMenuItem
    //=========================================================================
    pub fn gtk_separator_menu_item_get_type() -> GType;
    pub fn gtk_separator_menu_item_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkSeparatorToolItem
    //=========================================================================
    pub fn gtk_separator_tool_item_get_type() -> GType;
    pub fn gtk_separator_tool_item_new() -> *mut GtkToolItem;
    pub fn gtk_separator_tool_item_get_draw(item: *mut GtkSeparatorToolItem) -> gboolean;
    pub fn gtk_separator_tool_item_set_draw(item: *mut GtkSeparatorToolItem, draw: gboolean);

    //=========================================================================
    // GtkSettings
    //=========================================================================
    pub fn gtk_settings_get_type() -> GType;
    pub fn gtk_settings_get_default() -> *mut GtkSettings;
    pub fn gtk_settings_get_for_screen(screen: *mut gdk::GdkScreen) -> *mut GtkSettings;
    pub fn gtk_settings_install_property(pspec: *mut gobject::GParamSpec);
    pub fn gtk_settings_install_property_parser(pspec: *mut gobject::GParamSpec, parser: GtkRcPropertyParser);
    pub fn gtk_settings_set_double_property(settings: *mut GtkSettings, name: *const c_char, v_double: c_double, origin: *const c_char);
    pub fn gtk_settings_set_long_property(settings: *mut GtkSettings, name: *const c_char, v_long: c_long, origin: *const c_char);
    pub fn gtk_settings_set_property_value(settings: *mut GtkSettings, name: *const c_char, svalue: *const GtkSettingsValue);
    pub fn gtk_settings_set_string_property(settings: *mut GtkSettings, name: *const c_char, v_string: *const c_char, origin: *const c_char);

    //=========================================================================
    // GtkSizeGroup
    //=========================================================================
    pub fn gtk_size_group_get_type() -> GType;
    pub fn gtk_size_group_new(mode: GtkSizeGroupMode) -> *mut GtkSizeGroup;
    pub fn gtk_size_group_add_widget(size_group: *mut GtkSizeGroup, widget: *mut GtkWidget);
    pub fn gtk_size_group_get_ignore_hidden(size_group: *mut GtkSizeGroup) -> gboolean;
    pub fn gtk_size_group_get_mode(size_group: *mut GtkSizeGroup) -> GtkSizeGroupMode;
    pub fn gtk_size_group_get_widgets(size_group: *mut GtkSizeGroup) -> *mut glib::GSList;
    pub fn gtk_size_group_remove_widget(size_group: *mut GtkSizeGroup, widget: *mut GtkWidget);
    pub fn gtk_size_group_set_ignore_hidden(size_group: *mut GtkSizeGroup, ignore_hidden: gboolean);
    pub fn gtk_size_group_set_mode(size_group: *mut GtkSizeGroup, mode: GtkSizeGroupMode);

    //=========================================================================
    // GtkSocket
    //=========================================================================
    pub fn gtk_socket_get_type() -> GType;
    pub fn gtk_socket_new() -> *mut GtkWidget;
    //pub fn gtk_socket_add_id(socket_: *mut GtkSocket, window: xlib::Window);
    //pub fn gtk_socket_get_id(socket_: *mut GtkSocket) -> xlib::Window;
    pub fn gtk_socket_get_plug_window(socket_: *mut GtkSocket) -> *mut gdk::GdkWindow;

    //=========================================================================
    // GtkSpinButton
    //=========================================================================
    pub fn gtk_spin_button_get_type() -> GType;
    pub fn gtk_spin_button_new(adjustment: *mut GtkAdjustment, climb_rate: c_double, digits: c_uint) -> *mut GtkWidget;
    pub fn gtk_spin_button_new_with_range(min: c_double, max: c_double, step: c_double) -> *mut GtkWidget;
    pub fn gtk_spin_button_configure(spin_button: *mut GtkSpinButton, adjustment: *mut GtkAdjustment, climb_rate: c_double, digits: c_uint);
    pub fn gtk_spin_button_get_adjustment(spin_button: *mut GtkSpinButton) -> *mut GtkAdjustment;
    pub fn gtk_spin_button_get_digits(spin_button: *mut GtkSpinButton) -> c_uint;
    pub fn gtk_spin_button_get_increments(spin_button: *mut GtkSpinButton, step: *mut c_double, page: *mut c_double);
    pub fn gtk_spin_button_get_numeric(spin_button: *mut GtkSpinButton) -> gboolean;
    pub fn gtk_spin_button_get_range(spin_button: *mut GtkSpinButton, min: *mut c_double, max: *mut c_double);
    pub fn gtk_spin_button_get_snap_to_ticks(spin_button: *mut GtkSpinButton) -> gboolean;
    pub fn gtk_spin_button_get_update_policy(spin_button: *mut GtkSpinButton) -> GtkSpinButtonUpdatePolicy;
    pub fn gtk_spin_button_get_value(spin_button: *mut GtkSpinButton) -> c_double;
    pub fn gtk_spin_button_get_value_as_int(spin_button: *mut GtkSpinButton) -> c_int;
    pub fn gtk_spin_button_get_wrap(spin_button: *mut GtkSpinButton) -> gboolean;
    pub fn gtk_spin_button_set_adjustment(spin_button: *mut GtkSpinButton, adjustment: *mut GtkAdjustment);
    pub fn gtk_spin_button_set_digits(spin_button: *mut GtkSpinButton, digits: c_uint);
    pub fn gtk_spin_button_set_increments(spin_button: *mut GtkSpinButton, step: c_double, page: c_double);
    pub fn gtk_spin_button_set_numeric(spin_button: *mut GtkSpinButton, numeric: gboolean);
    pub fn gtk_spin_button_set_range(spin_button: *mut GtkSpinButton, min: c_double, max: c_double);
    pub fn gtk_spin_button_set_snap_to_ticks(spin_button: *mut GtkSpinButton, snap_to_ticks: gboolean);
    pub fn gtk_spin_button_set_update_policy(spin_button: *mut GtkSpinButton, policy: GtkSpinButtonUpdatePolicy);
    pub fn gtk_spin_button_set_value(spin_button: *mut GtkSpinButton, value: c_double);
    pub fn gtk_spin_button_set_wrap(spin_button: *mut GtkSpinButton, wrap: gboolean);
    pub fn gtk_spin_button_spin(spin_button: *mut GtkSpinButton, direction: GtkSpinType, increment: c_double);
    pub fn gtk_spin_button_update(spin_button: *mut GtkSpinButton);

    //=========================================================================
    // GtkSpinButtonAccessible
    //=========================================================================
    pub fn gtk_spin_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkSpinner
    //=========================================================================
    pub fn gtk_spinner_get_type() -> GType;
    pub fn gtk_spinner_new() -> *mut GtkWidget;
    pub fn gtk_spinner_start(spinner: *mut GtkSpinner);
    pub fn gtk_spinner_stop(spinner: *mut GtkSpinner);

    //=========================================================================
    // GtkSpinnerAccessible
    //=========================================================================
    pub fn gtk_spinner_accessible_get_type() -> GType;

    //=========================================================================
    // GtkStack
    //=========================================================================
    pub fn gtk_stack_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_add_named(stack: *mut GtkStack, child: *mut GtkWidget, name: *const c_char);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_add_titled(stack: *mut GtkStack, child: *mut GtkWidget, name: *const c_char, title: *const c_char);
    #[cfg(gtk_3_12)]
    pub fn gtk_stack_get_child_by_name(stack: *mut GtkStack, name: *const c_char) -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_get_hhomogeneous(stack: *mut GtkStack) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_get_homogeneous(stack: *mut GtkStack) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_get_transition_duration(stack: *mut GtkStack) -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_stack_get_transition_running(stack: *mut GtkStack) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_get_transition_type(stack: *mut GtkStack) -> GtkStackTransitionType;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_get_vhomogeneous(stack: *mut GtkStack) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_get_visible_child(stack: *mut GtkStack) -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_get_visible_child_name(stack: *mut GtkStack) -> *const c_char;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_set_hhomogeneous(stack: *mut GtkStack, hhomogeneous: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_homogeneous(stack: *mut GtkStack, homogeneous: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_transition_duration(stack: *mut GtkStack, duration: c_uint);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_transition_type(stack: *mut GtkStack, transition: GtkStackTransitionType);
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_set_vhomogeneous(stack: *mut GtkStack, vhomogeneous: gboolean);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_visible_child(stack: *mut GtkStack, child: *mut GtkWidget);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_visible_child_full(stack: *mut GtkStack, name: *const c_char, transition: GtkStackTransitionType);
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_set_visible_child_name(stack: *mut GtkStack, name: *const c_char);

    //=========================================================================
    // GtkStackSidebar
    //=========================================================================
    pub fn gtk_stack_sidebar_get_type() -> GType;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_sidebar_new() -> *mut GtkWidget;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_sidebar_get_stack(sidebar: *mut GtkStackSidebar) -> *mut GtkStack;
    #[cfg(gtk_3_16)]
    pub fn gtk_stack_sidebar_set_stack(sidebar: *mut GtkStackSidebar, stack: *mut GtkStack);

    //=========================================================================
    // GtkStackSwitcher
    //=========================================================================
    pub fn gtk_stack_switcher_get_type() -> GType;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_switcher_new() -> *mut GtkWidget;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_switcher_get_stack(switcher: *mut GtkStackSwitcher) -> *mut GtkStack;
    #[cfg(gtk_3_10)]
    pub fn gtk_stack_switcher_set_stack(switcher: *mut GtkStackSwitcher, stack: *mut GtkStack);

    //=========================================================================
    // GtkStatusIcon
    //=========================================================================
    pub fn gtk_status_icon_get_type() -> GType;
    pub fn gtk_status_icon_new() -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_file(filename: *mut c_char) -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_gicon(icon: *mut gio::GIcon) -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_icon_name(icon_name: *const c_char) -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_pixbuf(pixbuf: *mut gdk_pixbuf::GdkPixbuf) -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_new_from_stock(stock_id: *const c_char) -> *mut GtkStatusIcon;
    pub fn gtk_status_icon_position_menu(menu: *mut GtkMenu, x: *mut c_int, y: *mut c_int, push_in: *mut gboolean, user_data: *mut GtkStatusIcon);
    pub fn gtk_status_icon_get_geometry(status_icon: *mut GtkStatusIcon, screen: *mut *mut gdk::GdkScreen, area: *mut gdk::GdkRectangle, orientation: *mut GtkOrientation) -> gboolean;
    pub fn gtk_status_icon_get_gicon(status_icon: *mut GtkStatusIcon) -> *mut gio::GIcon;
    pub fn gtk_status_icon_get_has_tooltip(status_icon: *mut GtkStatusIcon) -> gboolean;
    pub fn gtk_status_icon_get_icon_name(status_icon: *mut GtkStatusIcon) -> *const c_char;
    pub fn gtk_status_icon_get_pixbuf(status_icon: *mut GtkStatusIcon) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_status_icon_get_screen(status_icon: *mut GtkStatusIcon) -> *mut gdk::GdkScreen;
    pub fn gtk_status_icon_get_size(status_icon: *mut GtkStatusIcon) -> c_int;
    pub fn gtk_status_icon_get_stock(status_icon: *mut GtkStatusIcon) -> *const c_char;
    pub fn gtk_status_icon_get_storage_type(status_icon: *mut GtkStatusIcon) -> GtkImageType;
    pub fn gtk_status_icon_get_title(status_icon: *mut GtkStatusIcon) -> *const c_char;
    pub fn gtk_status_icon_get_tooltip_markup(status_icon: *mut GtkStatusIcon) -> *mut c_char;
    pub fn gtk_status_icon_get_tooltip_text(status_icon: *mut GtkStatusIcon) -> *mut c_char;
    pub fn gtk_status_icon_get_visible(status_icon: *mut GtkStatusIcon) -> gboolean;
    pub fn gtk_status_icon_get_x11_window_id(status_icon: *mut GtkStatusIcon) -> u32;
    pub fn gtk_status_icon_is_embedded(status_icon: *mut GtkStatusIcon) -> gboolean;
    pub fn gtk_status_icon_set_from_file(status_icon: *mut GtkStatusIcon, filename: *mut c_char);
    pub fn gtk_status_icon_set_from_gicon(status_icon: *mut GtkStatusIcon, icon: *mut gio::GIcon);
    pub fn gtk_status_icon_set_from_icon_name(status_icon: *mut GtkStatusIcon, icon_name: *const c_char);
    pub fn gtk_status_icon_set_from_pixbuf(status_icon: *mut GtkStatusIcon, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_status_icon_set_from_stock(status_icon: *mut GtkStatusIcon, stock_id: *const c_char);
    pub fn gtk_status_icon_set_has_tooltip(status_icon: *mut GtkStatusIcon, has_tooltip: gboolean);
    pub fn gtk_status_icon_set_name(status_icon: *mut GtkStatusIcon, name: *const c_char);
    pub fn gtk_status_icon_set_screen(status_icon: *mut GtkStatusIcon, screen: *mut gdk::GdkScreen);
    pub fn gtk_status_icon_set_title(status_icon: *mut GtkStatusIcon, title: *const c_char);
    pub fn gtk_status_icon_set_tooltip_markup(status_icon: *mut GtkStatusIcon, markup: *const c_char);
    pub fn gtk_status_icon_set_tooltip_text(status_icon: *mut GtkStatusIcon, text: *const c_char);
    pub fn gtk_status_icon_set_visible(status_icon: *mut GtkStatusIcon, visible: gboolean);

    //=========================================================================
    // GtkStatusbar
    //=========================================================================
    pub fn gtk_statusbar_get_type() -> GType;
    pub fn gtk_statusbar_new() -> *mut GtkWidget;
    pub fn gtk_statusbar_get_context_id(statusbar: *mut GtkStatusbar, context_description: *const c_char) -> c_uint;
    pub fn gtk_statusbar_get_message_area(statusbar: *mut GtkStatusbar) -> *mut GtkBox;
    pub fn gtk_statusbar_pop(statusbar: *mut GtkStatusbar, context_id: c_uint);
    pub fn gtk_statusbar_push(statusbar: *mut GtkStatusbar, context_id: c_uint, text: *const c_char) -> c_uint;
    pub fn gtk_statusbar_remove(statusbar: *mut GtkStatusbar, context_id: c_uint, message_id: c_uint);
    pub fn gtk_statusbar_remove_all(statusbar: *mut GtkStatusbar, context_id: c_uint);

    //=========================================================================
    // GtkStatusbarAccessible
    //=========================================================================
    pub fn gtk_statusbar_accessible_get_type() -> GType;

    //=========================================================================
    // GtkStyle
    //=========================================================================
    pub fn gtk_style_get_type() -> GType;
    pub fn gtk_style_new() -> *mut GtkStyle;
    pub fn gtk_style_apply_default_background(style: *mut GtkStyle, cr: *mut cairo::cairo_t, window: *mut gdk::GdkWindow, state_type: GtkStateType, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_style_attach(style: *mut GtkStyle, window: *mut gdk::GdkWindow) -> *mut GtkStyle;
    pub fn gtk_style_copy(style: *mut GtkStyle) -> *mut GtkStyle;
    pub fn gtk_style_detach(style: *mut GtkStyle);
    pub fn gtk_style_get(style: *mut GtkStyle, widget_type: GType, first_property_name: *const c_char, ...);
    pub fn gtk_style_get_style_property(style: *mut GtkStyle, widget_type: GType, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_style_get_valist(style: *mut GtkStyle, widget_type: GType, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_style_has_context(style: *mut GtkStyle) -> gboolean;
    pub fn gtk_style_lookup_color(style: *mut GtkStyle, color_name: *const c_char, color: *mut gdk::GdkColor) -> gboolean;
    pub fn gtk_style_lookup_icon_set(style: *mut GtkStyle, stock_id: *const c_char) -> *mut GtkIconSet;
    pub fn gtk_style_render_icon(style: *mut GtkStyle, source: *const GtkIconSource, direction: GtkTextDirection, state: GtkStateType, size: c_int, widget: *mut GtkWidget, detail: *const c_char) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_style_set_background(style: *mut GtkStyle, window: *mut gdk::GdkWindow, state_type: GtkStateType);

    //=========================================================================
    // GtkStyleContext
    //=========================================================================
    pub fn gtk_style_context_get_type() -> GType;
    pub fn gtk_style_context_new() -> *mut GtkStyleContext;
    pub fn gtk_style_context_add_provider_for_screen(screen: *mut gdk::GdkScreen, provider: *mut GtkStyleProvider, priority: c_uint);
    pub fn gtk_style_context_remove_provider_for_screen(screen: *mut gdk::GdkScreen, provider: *mut GtkStyleProvider);
    pub fn gtk_style_context_reset_widgets(screen: *mut gdk::GdkScreen);
    pub fn gtk_style_context_add_class(context: *mut GtkStyleContext, class_name: *const c_char);
    pub fn gtk_style_context_add_provider(context: *mut GtkStyleContext, provider: *mut GtkStyleProvider, priority: c_uint);
    pub fn gtk_style_context_add_region(context: *mut GtkStyleContext, region_name: *const c_char, flags: GtkRegionFlags);
    pub fn gtk_style_context_cancel_animations(context: *mut GtkStyleContext, region_id: gpointer);
    pub fn gtk_style_context_get(context: *mut GtkStyleContext, state: GtkStateFlags, ...);
    pub fn gtk_style_context_get_background_color(context: *mut GtkStyleContext, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_style_context_get_border(context: *mut GtkStyleContext, state: GtkStateFlags, border: *mut GtkBorder);
    pub fn gtk_style_context_get_border_color(context: *mut GtkStyleContext, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_style_context_get_color(context: *mut GtkStyleContext, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_style_context_get_direction(context: *mut GtkStyleContext) -> GtkTextDirection;
    pub fn gtk_style_context_get_font(context: *mut GtkStyleContext, state: GtkStateFlags) -> *const pango::PangoFontDescription;
    #[cfg(gtk_3_8)]
    pub fn gtk_style_context_get_frame_clock(context: *mut GtkStyleContext) -> *mut gdk::GdkFrameClock;
    pub fn gtk_style_context_get_junction_sides(context: *mut GtkStyleContext) -> GtkJunctionSides;
    pub fn gtk_style_context_get_margin(context: *mut GtkStyleContext, state: GtkStateFlags, margin: *mut GtkBorder);
    pub fn gtk_style_context_get_padding(context: *mut GtkStyleContext, state: GtkStateFlags, padding: *mut GtkBorder);
    #[cfg(gtk_3_4)]
    pub fn gtk_style_context_get_parent(context: *mut GtkStyleContext) -> *mut GtkStyleContext;
    pub fn gtk_style_context_get_path(context: *mut GtkStyleContext) -> *const GtkWidgetPath;
    pub fn gtk_style_context_get_property(context: *mut GtkStyleContext, property: *const c_char, state: GtkStateFlags, value: *mut gobject::GValue);
    #[cfg(gtk_3_10)]
    pub fn gtk_style_context_get_scale(context: *mut GtkStyleContext) -> c_int;
    pub fn gtk_style_context_get_screen(context: *mut GtkStyleContext) -> *mut gdk::GdkScreen;
    pub fn gtk_style_context_get_section(context: *mut GtkStyleContext, property: *const c_char) -> *mut GtkCssSection;
    pub fn gtk_style_context_get_state(context: *mut GtkStyleContext) -> GtkStateFlags;
    pub fn gtk_style_context_get_style(context: *mut GtkStyleContext, ...);
    pub fn gtk_style_context_get_style_property(context: *mut GtkStyleContext, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_style_context_get_style_valist(context: *mut GtkStyleContext, args: [Unsupported type va_list]);
    //pub fn gtk_style_context_get_valist(context: *mut GtkStyleContext, state: GtkStateFlags, args: [Unsupported type va_list]);
    pub fn gtk_style_context_has_class(context: *mut GtkStyleContext, class_name: *const c_char) -> gboolean;
    pub fn gtk_style_context_has_region(context: *mut GtkStyleContext, region_name: *const c_char, flags_return: *mut GtkRegionFlags) -> gboolean;
    pub fn gtk_style_context_invalidate(context: *mut GtkStyleContext);
    pub fn gtk_style_context_list_classes(context: *mut GtkStyleContext) -> *mut glib::GList;
    pub fn gtk_style_context_list_regions(context: *mut GtkStyleContext) -> *mut glib::GList;
    pub fn gtk_style_context_lookup_color(context: *mut GtkStyleContext, color_name: *const c_char, color: *mut gdk::GdkRGBA) -> gboolean;
    pub fn gtk_style_context_lookup_icon_set(context: *mut GtkStyleContext, stock_id: *const c_char) -> *mut GtkIconSet;
    pub fn gtk_style_context_notify_state_change(context: *mut GtkStyleContext, window: *mut gdk::GdkWindow, region_id: gpointer, state: GtkStateType, state_value: gboolean);
    pub fn gtk_style_context_pop_animatable_region(context: *mut GtkStyleContext);
    pub fn gtk_style_context_push_animatable_region(context: *mut GtkStyleContext, region_id: gpointer);
    pub fn gtk_style_context_remove_class(context: *mut GtkStyleContext, class_name: *const c_char);
    pub fn gtk_style_context_remove_provider(context: *mut GtkStyleContext, provider: *mut GtkStyleProvider);
    pub fn gtk_style_context_remove_region(context: *mut GtkStyleContext, region_name: *const c_char);
    pub fn gtk_style_context_restore(context: *mut GtkStyleContext);
    pub fn gtk_style_context_save(context: *mut GtkStyleContext);
    pub fn gtk_style_context_scroll_animations(context: *mut GtkStyleContext, window: *mut gdk::GdkWindow, dx: c_int, dy: c_int);
    pub fn gtk_style_context_set_background(context: *mut GtkStyleContext, window: *mut gdk::GdkWindow);
    pub fn gtk_style_context_set_direction(context: *mut GtkStyleContext, direction: GtkTextDirection);
    #[cfg(gtk_3_8)]
    pub fn gtk_style_context_set_frame_clock(context: *mut GtkStyleContext, frame_clock: *mut gdk::GdkFrameClock);
    pub fn gtk_style_context_set_junction_sides(context: *mut GtkStyleContext, sides: GtkJunctionSides);
    #[cfg(gtk_3_4)]
    pub fn gtk_style_context_set_parent(context: *mut GtkStyleContext, parent: *mut GtkStyleContext);
    pub fn gtk_style_context_set_path(context: *mut GtkStyleContext, path: *mut GtkWidgetPath);
    #[cfg(gtk_3_10)]
    pub fn gtk_style_context_set_scale(context: *mut GtkStyleContext, scale: c_int);
    pub fn gtk_style_context_set_screen(context: *mut GtkStyleContext, screen: *mut gdk::GdkScreen);
    pub fn gtk_style_context_set_state(context: *mut GtkStyleContext, flags: GtkStateFlags);
    pub fn gtk_style_context_state_is_running(context: *mut GtkStyleContext, state: GtkStateType, progress: *mut c_double) -> gboolean;

    //=========================================================================
    // GtkStyleProperties
    //=========================================================================
    pub fn gtk_style_properties_get_type() -> GType;
    pub fn gtk_style_properties_new() -> *mut GtkStyleProperties;
    pub fn gtk_style_properties_lookup_property(property_name: *const c_char, parse_func: *mut GtkStylePropertyParser, pspec: *mut *mut gobject::GParamSpec) -> gboolean;
    pub fn gtk_style_properties_register_property(parse_func: GtkStylePropertyParser, pspec: *mut gobject::GParamSpec);
    pub fn gtk_style_properties_clear(props: *mut GtkStyleProperties);
    pub fn gtk_style_properties_get(props: *mut GtkStyleProperties, state: GtkStateFlags, ...);
    pub fn gtk_style_properties_get_property(props: *mut GtkStyleProperties, property: *const c_char, state: GtkStateFlags, value: *mut gobject::GValue) -> gboolean;
    //pub fn gtk_style_properties_get_valist(props: *mut GtkStyleProperties, state: GtkStateFlags, args: [Unsupported type va_list]);
    pub fn gtk_style_properties_lookup_color(props: *mut GtkStyleProperties, name: *const c_char) -> *mut GtkSymbolicColor;
    pub fn gtk_style_properties_map_color(props: *mut GtkStyleProperties, name: *const c_char, color: *mut GtkSymbolicColor);
    pub fn gtk_style_properties_merge(props: *mut GtkStyleProperties, props_to_merge: *const GtkStyleProperties, replace: gboolean);
    pub fn gtk_style_properties_set(props: *mut GtkStyleProperties, state: GtkStateFlags, ...);
    pub fn gtk_style_properties_set_property(props: *mut GtkStyleProperties, property: *const c_char, state: GtkStateFlags, value: *const gobject::GValue);
    //pub fn gtk_style_properties_set_valist(props: *mut GtkStyleProperties, state: GtkStateFlags, args: [Unsupported type va_list]);
    pub fn gtk_style_properties_unset_property(props: *mut GtkStyleProperties, property: *const c_char, state: GtkStateFlags);

    //=========================================================================
    // GtkSwitch
    //=========================================================================
    pub fn gtk_switch_get_type() -> GType;
    pub fn gtk_switch_new() -> *mut GtkWidget;
    pub fn gtk_switch_get_active(sw: *mut GtkSwitch) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_switch_get_state(sw: *mut GtkSwitch) -> gboolean;
    pub fn gtk_switch_set_active(sw: *mut GtkSwitch, is_active: gboolean);
    #[cfg(gtk_3_14)]
    pub fn gtk_switch_set_state(sw: *mut GtkSwitch, state: gboolean);

    //=========================================================================
    // GtkSwitchAccessible
    //=========================================================================
    pub fn gtk_switch_accessible_get_type() -> GType;

    //=========================================================================
    // GtkTable
    //=========================================================================
    pub fn gtk_table_get_type() -> GType;
    pub fn gtk_table_new(rows: c_uint, columns: c_uint, homogeneous: gboolean) -> *mut GtkWidget;
    pub fn gtk_table_attach(table: *mut GtkTable, child: *mut GtkWidget, left_attach: c_uint, right_attach: c_uint, top_attach: c_uint, bottom_attach: c_uint, xoptions: GtkAttachOptions, yoptions: GtkAttachOptions, xpadding: c_uint, ypadding: c_uint);
    pub fn gtk_table_attach_defaults(table: *mut GtkTable, widget: *mut GtkWidget, left_attach: c_uint, right_attach: c_uint, top_attach: c_uint, bottom_attach: c_uint);
    pub fn gtk_table_get_col_spacing(table: *mut GtkTable, column: c_uint) -> c_uint;
    pub fn gtk_table_get_default_col_spacing(table: *mut GtkTable) -> c_uint;
    pub fn gtk_table_get_default_row_spacing(table: *mut GtkTable) -> c_uint;
    pub fn gtk_table_get_homogeneous(table: *mut GtkTable) -> gboolean;
    pub fn gtk_table_get_row_spacing(table: *mut GtkTable, row: c_uint) -> c_uint;
    pub fn gtk_table_get_size(table: *mut GtkTable, rows: *mut c_uint, columns: *mut c_uint);
    pub fn gtk_table_resize(table: *mut GtkTable, rows: c_uint, columns: c_uint);
    pub fn gtk_table_set_col_spacing(table: *mut GtkTable, column: c_uint, spacing: c_uint);
    pub fn gtk_table_set_col_spacings(table: *mut GtkTable, spacing: c_uint);
    pub fn gtk_table_set_homogeneous(table: *mut GtkTable, homogeneous: gboolean);
    pub fn gtk_table_set_row_spacing(table: *mut GtkTable, row: c_uint, spacing: c_uint);
    pub fn gtk_table_set_row_spacings(table: *mut GtkTable, spacing: c_uint);

    //=========================================================================
    // GtkTearoffMenuItem
    //=========================================================================
    pub fn gtk_tearoff_menu_item_get_type() -> GType;
    pub fn gtk_tearoff_menu_item_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkTextBuffer
    //=========================================================================
    pub fn gtk_text_buffer_get_type() -> GType;
    pub fn gtk_text_buffer_new(table: *mut GtkTextTagTable) -> *mut GtkTextBuffer;
    pub fn gtk_text_buffer_add_mark(buffer: *mut GtkTextBuffer, mark: *mut GtkTextMark, where_: *const GtkTextIter);
    pub fn gtk_text_buffer_add_selection_clipboard(buffer: *mut GtkTextBuffer, clipboard: *mut GtkClipboard);
    pub fn gtk_text_buffer_apply_tag(buffer: *mut GtkTextBuffer, tag: *mut GtkTextTag, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_apply_tag_by_name(buffer: *mut GtkTextBuffer, name: *const c_char, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_backspace(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, interactive: gboolean, default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_begin_user_action(buffer: *mut GtkTextBuffer);
    pub fn gtk_text_buffer_copy_clipboard(buffer: *mut GtkTextBuffer, clipboard: *mut GtkClipboard);
    pub fn gtk_text_buffer_create_child_anchor(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter) -> *mut GtkTextChildAnchor;
    pub fn gtk_text_buffer_create_mark(buffer: *mut GtkTextBuffer, mark_name: *const c_char, where_: *const GtkTextIter, left_gravity: gboolean) -> *mut GtkTextMark;
    pub fn gtk_text_buffer_create_tag(buffer: *mut GtkTextBuffer, tag_name: *const c_char, first_property_name: *const c_char, ...) -> *mut GtkTextTag;
    pub fn gtk_text_buffer_cut_clipboard(buffer: *mut GtkTextBuffer, clipboard: *mut GtkClipboard, default_editable: gboolean);
    pub fn gtk_text_buffer_delete(buffer: *mut GtkTextBuffer, start: *mut GtkTextIter, end: *mut GtkTextIter);
    pub fn gtk_text_buffer_delete_interactive(buffer: *mut GtkTextBuffer, start_iter: *mut GtkTextIter, end_iter: *mut GtkTextIter, default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_delete_mark(buffer: *mut GtkTextBuffer, mark: *mut GtkTextMark);
    pub fn gtk_text_buffer_delete_mark_by_name(buffer: *mut GtkTextBuffer, name: *const c_char);
    pub fn gtk_text_buffer_delete_selection(buffer: *mut GtkTextBuffer, interactive: gboolean, default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_deserialize(register_buffer: *mut GtkTextBuffer, content_buffer: *mut GtkTextBuffer, format: gdk::GdkAtom, iter: *mut GtkTextIter, data: *mut u8, length: size_t, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_text_buffer_deserialize_get_can_create_tags(buffer: *mut GtkTextBuffer, format: gdk::GdkAtom) -> gboolean;
    pub fn gtk_text_buffer_deserialize_set_can_create_tags(buffer: *mut GtkTextBuffer, format: gdk::GdkAtom, can_create_tags: gboolean);
    pub fn gtk_text_buffer_end_user_action(buffer: *mut GtkTextBuffer);
    pub fn gtk_text_buffer_get_bounds(buffer: *mut GtkTextBuffer, start: *mut GtkTextIter, end: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_char_count(buffer: *mut GtkTextBuffer) -> c_int;
    pub fn gtk_text_buffer_get_copy_target_list(buffer: *mut GtkTextBuffer) -> *mut GtkTargetList;
    pub fn gtk_text_buffer_get_deserialize_formats(buffer: *mut GtkTextBuffer, n_formats: *mut c_int) -> *mut gdk::GdkAtom;
    pub fn gtk_text_buffer_get_end_iter(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_has_selection(buffer: *mut GtkTextBuffer) -> gboolean;
    pub fn gtk_text_buffer_get_insert(buffer: *mut GtkTextBuffer) -> *mut GtkTextMark;
    pub fn gtk_text_buffer_get_iter_at_child_anchor(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, anchor: *mut GtkTextChildAnchor);
    pub fn gtk_text_buffer_get_iter_at_line(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, line_number: c_int);
    pub fn gtk_text_buffer_get_iter_at_line_index(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, line_number: c_int, byte_index: c_int);
    pub fn gtk_text_buffer_get_iter_at_line_offset(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, line_number: c_int, char_offset: c_int);
    pub fn gtk_text_buffer_get_iter_at_mark(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, mark: *mut GtkTextMark);
    pub fn gtk_text_buffer_get_iter_at_offset(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, char_offset: c_int);
    pub fn gtk_text_buffer_get_line_count(buffer: *mut GtkTextBuffer) -> c_int;
    pub fn gtk_text_buffer_get_mark(buffer: *mut GtkTextBuffer, name: *const c_char) -> *mut GtkTextMark;
    pub fn gtk_text_buffer_get_modified(buffer: *mut GtkTextBuffer) -> gboolean;
    pub fn gtk_text_buffer_get_paste_target_list(buffer: *mut GtkTextBuffer) -> *mut GtkTargetList;
    pub fn gtk_text_buffer_get_selection_bound(buffer: *mut GtkTextBuffer) -> *mut GtkTextMark;
    pub fn gtk_text_buffer_get_selection_bounds(buffer: *mut GtkTextBuffer, start: *mut GtkTextIter, end: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_buffer_get_serialize_formats(buffer: *mut GtkTextBuffer, n_formats: *mut c_int) -> *mut gdk::GdkAtom;
    pub fn gtk_text_buffer_get_slice(buffer: *mut GtkTextBuffer, start: *const GtkTextIter, end: *const GtkTextIter, include_hidden_chars: gboolean) -> *mut c_char;
    pub fn gtk_text_buffer_get_start_iter(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter);
    pub fn gtk_text_buffer_get_tag_table(buffer: *mut GtkTextBuffer) -> *mut GtkTextTagTable;
    pub fn gtk_text_buffer_get_text(buffer: *mut GtkTextBuffer, start: *const GtkTextIter, end: *const GtkTextIter, include_hidden_chars: gboolean) -> *mut c_char;
    pub fn gtk_text_buffer_insert(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, text: *const c_char, len: c_int);
    pub fn gtk_text_buffer_insert_at_cursor(buffer: *mut GtkTextBuffer, text: *const c_char, len: c_int);
    pub fn gtk_text_buffer_insert_child_anchor(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, anchor: *mut GtkTextChildAnchor);
    pub fn gtk_text_buffer_insert_interactive(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, text: *const c_char, len: c_int, default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_insert_interactive_at_cursor(buffer: *mut GtkTextBuffer, text: *const c_char, len: c_int, default_editable: gboolean) -> gboolean;
    #[cfg(gtk_3_16)]
    pub fn gtk_text_buffer_insert_markup(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, markup: *const c_char, len: c_int);
    pub fn gtk_text_buffer_insert_pixbuf(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_text_buffer_insert_range(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_insert_range_interactive(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, start: *const GtkTextIter, end: *const GtkTextIter, default_editable: gboolean) -> gboolean;
    pub fn gtk_text_buffer_insert_with_tags(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, text: *const c_char, len: c_int, first_tag: *mut GtkTextTag, ...);
    pub fn gtk_text_buffer_insert_with_tags_by_name(buffer: *mut GtkTextBuffer, iter: *mut GtkTextIter, text: *const c_char, len: c_int, first_tag_name: *const c_char, ...);
    pub fn gtk_text_buffer_move_mark(buffer: *mut GtkTextBuffer, mark: *mut GtkTextMark, where_: *const GtkTextIter);
    pub fn gtk_text_buffer_move_mark_by_name(buffer: *mut GtkTextBuffer, name: *const c_char, where_: *const GtkTextIter);
    pub fn gtk_text_buffer_paste_clipboard(buffer: *mut GtkTextBuffer, clipboard: *mut GtkClipboard, override_location: *mut GtkTextIter, default_editable: gboolean);
    pub fn gtk_text_buffer_place_cursor(buffer: *mut GtkTextBuffer, where_: *const GtkTextIter);
    pub fn gtk_text_buffer_register_deserialize_format(buffer: *mut GtkTextBuffer, mime_type: *const c_char, function: GtkTextBufferDeserializeFunc, user_data: gpointer, user_data_destroy: glib::GDestroyNotify) -> gdk::GdkAtom;
    pub fn gtk_text_buffer_register_deserialize_tagset(buffer: *mut GtkTextBuffer, tagset_name: *const c_char) -> gdk::GdkAtom;
    pub fn gtk_text_buffer_register_serialize_format(buffer: *mut GtkTextBuffer, mime_type: *const c_char, function: GtkTextBufferSerializeFunc, user_data: gpointer, user_data_destroy: glib::GDestroyNotify) -> gdk::GdkAtom;
    pub fn gtk_text_buffer_register_serialize_tagset(buffer: *mut GtkTextBuffer, tagset_name: *const c_char) -> gdk::GdkAtom;
    pub fn gtk_text_buffer_remove_all_tags(buffer: *mut GtkTextBuffer, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_remove_selection_clipboard(buffer: *mut GtkTextBuffer, clipboard: *mut GtkClipboard);
    pub fn gtk_text_buffer_remove_tag(buffer: *mut GtkTextBuffer, tag: *mut GtkTextTag, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_remove_tag_by_name(buffer: *mut GtkTextBuffer, name: *const c_char, start: *const GtkTextIter, end: *const GtkTextIter);
    pub fn gtk_text_buffer_select_range(buffer: *mut GtkTextBuffer, ins: *const GtkTextIter, bound: *const GtkTextIter);
    pub fn gtk_text_buffer_serialize(register_buffer: *mut GtkTextBuffer, content_buffer: *mut GtkTextBuffer, format: gdk::GdkAtom, start: *const GtkTextIter, end: *const GtkTextIter, length: *mut size_t) -> *mut u8;
    pub fn gtk_text_buffer_set_modified(buffer: *mut GtkTextBuffer, setting: gboolean);
    pub fn gtk_text_buffer_set_text(buffer: *mut GtkTextBuffer, text: *const c_char, len: c_int);
    pub fn gtk_text_buffer_unregister_deserialize_format(buffer: *mut GtkTextBuffer, format: gdk::GdkAtom);
    pub fn gtk_text_buffer_unregister_serialize_format(buffer: *mut GtkTextBuffer, format: gdk::GdkAtom);

    //=========================================================================
    // GtkTextCellAccessible
    //=========================================================================
    pub fn gtk_text_cell_accessible_get_type() -> GType;

    //=========================================================================
    // GtkTextChildAnchor
    //=========================================================================
    pub fn gtk_text_child_anchor_get_type() -> GType;
    pub fn gtk_text_child_anchor_new() -> *mut GtkTextChildAnchor;
    pub fn gtk_text_child_anchor_get_deleted(anchor: *mut GtkTextChildAnchor) -> gboolean;
    pub fn gtk_text_child_anchor_get_widgets(anchor: *mut GtkTextChildAnchor) -> *mut glib::GList;

    //=========================================================================
    // GtkTextMark
    //=========================================================================
    pub fn gtk_text_mark_get_type() -> GType;
    pub fn gtk_text_mark_new(name: *const c_char, left_gravity: gboolean) -> *mut GtkTextMark;
    pub fn gtk_text_mark_get_buffer(mark: *mut GtkTextMark) -> *mut GtkTextBuffer;
    pub fn gtk_text_mark_get_deleted(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_mark_get_left_gravity(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_mark_get_name(mark: *mut GtkTextMark) -> *const c_char;
    pub fn gtk_text_mark_get_visible(mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_mark_set_visible(mark: *mut GtkTextMark, setting: gboolean);

    //=========================================================================
    // GtkTextTag
    //=========================================================================
    pub fn gtk_text_tag_get_type() -> GType;
    pub fn gtk_text_tag_new(name: *const c_char) -> *mut GtkTextTag;
    pub fn gtk_text_tag_event(tag: *mut GtkTextTag, event_object: *mut gobject::GObject, event: *mut gdk::GdkEvent, iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_tag_get_priority(tag: *mut GtkTextTag) -> c_int;
    pub fn gtk_text_tag_set_priority(tag: *mut GtkTextTag, priority: c_int);

    //=========================================================================
    // GtkTextTagTable
    //=========================================================================
    pub fn gtk_text_tag_table_get_type() -> GType;
    pub fn gtk_text_tag_table_new() -> *mut GtkTextTagTable;
    pub fn gtk_text_tag_table_add(table: *mut GtkTextTagTable, tag: *mut GtkTextTag) -> gboolean;
    pub fn gtk_text_tag_table_foreach(table: *mut GtkTextTagTable, func: GtkTextTagTableForeach, data: gpointer);
    pub fn gtk_text_tag_table_get_size(table: *mut GtkTextTagTable) -> c_int;
    pub fn gtk_text_tag_table_lookup(table: *mut GtkTextTagTable, name: *const c_char) -> *mut GtkTextTag;
    pub fn gtk_text_tag_table_remove(table: *mut GtkTextTagTable, tag: *mut GtkTextTag);

    //=========================================================================
    // GtkTextView
    //=========================================================================
    pub fn gtk_text_view_get_type() -> GType;
    pub fn gtk_text_view_new() -> *mut GtkWidget;
    pub fn gtk_text_view_new_with_buffer(buffer: *mut GtkTextBuffer) -> *mut GtkWidget;
    pub fn gtk_text_view_add_child_at_anchor(text_view: *mut GtkTextView, child: *mut GtkWidget, anchor: *mut GtkTextChildAnchor);
    pub fn gtk_text_view_add_child_in_window(text_view: *mut GtkTextView, child: *mut GtkWidget, which_window: GtkTextWindowType, xpos: c_int, ypos: c_int);
    pub fn gtk_text_view_backward_display_line(text_view: *mut GtkTextView, iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_view_backward_display_line_start(text_view: *mut GtkTextView, iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_view_buffer_to_window_coords(text_view: *mut GtkTextView, win: GtkTextWindowType, buffer_x: c_int, buffer_y: c_int, window_x: *mut c_int, window_y: *mut c_int);
    pub fn gtk_text_view_forward_display_line(text_view: *mut GtkTextView, iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_view_forward_display_line_end(text_view: *mut GtkTextView, iter: *mut GtkTextIter) -> gboolean;
    pub fn gtk_text_view_get_accepts_tab(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_get_border_window_size(text_view: *mut GtkTextView, type_: GtkTextWindowType) -> c_int;
    pub fn gtk_text_view_get_buffer(text_view: *mut GtkTextView) -> *mut GtkTextBuffer;
    pub fn gtk_text_view_get_cursor_locations(text_view: *mut GtkTextView, iter: *const GtkTextIter, strong: *mut gdk::GdkRectangle, weak: *mut gdk::GdkRectangle);
    pub fn gtk_text_view_get_cursor_visible(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_get_default_attributes(text_view: *mut GtkTextView) -> *mut GtkTextAttributes;
    pub fn gtk_text_view_get_editable(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_get_hadjustment(text_view: *mut GtkTextView) -> *mut GtkAdjustment;
    pub fn gtk_text_view_get_indent(text_view: *mut GtkTextView) -> c_int;
    #[cfg(gtk_3_6)]
    pub fn gtk_text_view_get_input_hints(text_view: *mut GtkTextView) -> GtkInputHints;
    #[cfg(gtk_3_6)]
    pub fn gtk_text_view_get_input_purpose(text_view: *mut GtkTextView) -> GtkInputPurpose;
    pub fn gtk_text_view_get_iter_at_location(text_view: *mut GtkTextView, iter: *mut GtkTextIter, x: c_int, y: c_int);
    pub fn gtk_text_view_get_iter_at_position(text_view: *mut GtkTextView, iter: *mut GtkTextIter, trailing: *mut c_int, x: c_int, y: c_int);
    pub fn gtk_text_view_get_iter_location(text_view: *mut GtkTextView, iter: *const GtkTextIter, location: *mut gdk::GdkRectangle);
    pub fn gtk_text_view_get_justification(text_view: *mut GtkTextView) -> GtkJustification;
    pub fn gtk_text_view_get_left_margin(text_view: *mut GtkTextView) -> c_int;
    pub fn gtk_text_view_get_line_at_y(text_view: *mut GtkTextView, target_iter: *mut GtkTextIter, y: c_int, line_top: *mut c_int);
    pub fn gtk_text_view_get_line_yrange(text_view: *mut GtkTextView, iter: *const GtkTextIter, y: *mut c_int, height: *mut c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_text_view_get_monospace(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_get_overwrite(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_get_pixels_above_lines(text_view: *mut GtkTextView) -> c_int;
    pub fn gtk_text_view_get_pixels_below_lines(text_view: *mut GtkTextView) -> c_int;
    pub fn gtk_text_view_get_pixels_inside_wrap(text_view: *mut GtkTextView) -> c_int;
    pub fn gtk_text_view_get_right_margin(text_view: *mut GtkTextView) -> c_int;
    pub fn gtk_text_view_get_tabs(text_view: *mut GtkTextView) -> *mut pango::PangoTabArray;
    pub fn gtk_text_view_get_vadjustment(text_view: *mut GtkTextView) -> *mut GtkAdjustment;
    pub fn gtk_text_view_get_visible_rect(text_view: *mut GtkTextView, visible_rect: *mut gdk::GdkRectangle);
    pub fn gtk_text_view_get_window(text_view: *mut GtkTextView, win: GtkTextWindowType) -> *mut gdk::GdkWindow;
    pub fn gtk_text_view_get_window_type(text_view: *mut GtkTextView, window: *mut gdk::GdkWindow) -> GtkTextWindowType;
    pub fn gtk_text_view_get_wrap_mode(text_view: *mut GtkTextView) -> GtkWrapMode;
    pub fn gtk_text_view_im_context_filter_keypress(text_view: *mut GtkTextView, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_text_view_move_child(text_view: *mut GtkTextView, child: *mut GtkWidget, xpos: c_int, ypos: c_int);
    pub fn gtk_text_view_move_mark_onscreen(text_view: *mut GtkTextView, mark: *mut GtkTextMark) -> gboolean;
    pub fn gtk_text_view_move_visually(text_view: *mut GtkTextView, iter: *mut GtkTextIter, count: c_int) -> gboolean;
    pub fn gtk_text_view_place_cursor_onscreen(text_view: *mut GtkTextView) -> gboolean;
    pub fn gtk_text_view_reset_im_context(text_view: *mut GtkTextView);
    pub fn gtk_text_view_scroll_mark_onscreen(text_view: *mut GtkTextView, mark: *mut GtkTextMark);
    pub fn gtk_text_view_scroll_to_iter(text_view: *mut GtkTextView, iter: *mut GtkTextIter, within_margin: c_double, use_align: gboolean, xalign: c_double, yalign: c_double) -> gboolean;
    pub fn gtk_text_view_scroll_to_mark(text_view: *mut GtkTextView, mark: *mut GtkTextMark, within_margin: c_double, use_align: gboolean, xalign: c_double, yalign: c_double);
    pub fn gtk_text_view_set_accepts_tab(text_view: *mut GtkTextView, accepts_tab: gboolean);
    pub fn gtk_text_view_set_border_window_size(text_view: *mut GtkTextView, type_: GtkTextWindowType, size: c_int);
    pub fn gtk_text_view_set_buffer(text_view: *mut GtkTextView, buffer: *mut GtkTextBuffer);
    pub fn gtk_text_view_set_cursor_visible(text_view: *mut GtkTextView, setting: gboolean);
    pub fn gtk_text_view_set_editable(text_view: *mut GtkTextView, setting: gboolean);
    pub fn gtk_text_view_set_indent(text_view: *mut GtkTextView, indent: c_int);
    #[cfg(gtk_3_6)]
    pub fn gtk_text_view_set_input_hints(text_view: *mut GtkTextView, hints: GtkInputHints);
    #[cfg(gtk_3_6)]
    pub fn gtk_text_view_set_input_purpose(text_view: *mut GtkTextView, purpose: GtkInputPurpose);
    pub fn gtk_text_view_set_justification(text_view: *mut GtkTextView, justification: GtkJustification);
    pub fn gtk_text_view_set_left_margin(text_view: *mut GtkTextView, left_margin: c_int);
    #[cfg(gtk_3_16)]
    pub fn gtk_text_view_set_monospace(text_view: *mut GtkTextView, monospace: gboolean);
    pub fn gtk_text_view_set_overwrite(text_view: *mut GtkTextView, overwrite: gboolean);
    pub fn gtk_text_view_set_pixels_above_lines(text_view: *mut GtkTextView, pixels_above_lines: c_int);
    pub fn gtk_text_view_set_pixels_below_lines(text_view: *mut GtkTextView, pixels_below_lines: c_int);
    pub fn gtk_text_view_set_pixels_inside_wrap(text_view: *mut GtkTextView, pixels_inside_wrap: c_int);
    pub fn gtk_text_view_set_right_margin(text_view: *mut GtkTextView, right_margin: c_int);
    pub fn gtk_text_view_set_tabs(text_view: *mut GtkTextView, tabs: *mut pango::PangoTabArray);
    pub fn gtk_text_view_set_wrap_mode(text_view: *mut GtkTextView, wrap_mode: GtkWrapMode);
    pub fn gtk_text_view_starts_display_line(text_view: *mut GtkTextView, iter: *const GtkTextIter) -> gboolean;
    pub fn gtk_text_view_window_to_buffer_coords(text_view: *mut GtkTextView, win: GtkTextWindowType, window_x: c_int, window_y: c_int, buffer_x: *mut c_int, buffer_y: *mut c_int);

    //=========================================================================
    // GtkTextViewAccessible
    //=========================================================================
    pub fn gtk_text_view_accessible_get_type() -> GType;

    //=========================================================================
    // GtkThemingEngine
    //=========================================================================
    pub fn gtk_theming_engine_get_type() -> GType;
    pub fn gtk_theming_engine_load(name: *const c_char) -> *mut GtkThemingEngine;
    pub fn gtk_theming_engine_register_property(name_space: *const c_char, parse_func: GtkStylePropertyParser, pspec: *mut gobject::GParamSpec);
    pub fn gtk_theming_engine_get(engine: *mut GtkThemingEngine, state: GtkStateFlags, ...);
    pub fn gtk_theming_engine_get_background_color(engine: *mut GtkThemingEngine, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_theming_engine_get_border(engine: *mut GtkThemingEngine, state: GtkStateFlags, border: *mut GtkBorder);
    pub fn gtk_theming_engine_get_border_color(engine: *mut GtkThemingEngine, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_theming_engine_get_color(engine: *mut GtkThemingEngine, state: GtkStateFlags, color: *mut gdk::GdkRGBA);
    pub fn gtk_theming_engine_get_direction(engine: *mut GtkThemingEngine) -> GtkTextDirection;
    pub fn gtk_theming_engine_get_font(engine: *mut GtkThemingEngine, state: GtkStateFlags) -> *const pango::PangoFontDescription;
    pub fn gtk_theming_engine_get_junction_sides(engine: *mut GtkThemingEngine) -> GtkJunctionSides;
    pub fn gtk_theming_engine_get_margin(engine: *mut GtkThemingEngine, state: GtkStateFlags, margin: *mut GtkBorder);
    pub fn gtk_theming_engine_get_padding(engine: *mut GtkThemingEngine, state: GtkStateFlags, padding: *mut GtkBorder);
    pub fn gtk_theming_engine_get_path(engine: *mut GtkThemingEngine) -> *const GtkWidgetPath;
    pub fn gtk_theming_engine_get_property(engine: *mut GtkThemingEngine, property: *const c_char, state: GtkStateFlags, value: *mut gobject::GValue);
    pub fn gtk_theming_engine_get_screen(engine: *mut GtkThemingEngine) -> *mut gdk::GdkScreen;
    pub fn gtk_theming_engine_get_state(engine: *mut GtkThemingEngine) -> GtkStateFlags;
    pub fn gtk_theming_engine_get_style(engine: *mut GtkThemingEngine, ...);
    pub fn gtk_theming_engine_get_style_property(engine: *mut GtkThemingEngine, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_theming_engine_get_style_valist(engine: *mut GtkThemingEngine, args: [Unsupported type va_list]);
    //pub fn gtk_theming_engine_get_valist(engine: *mut GtkThemingEngine, state: GtkStateFlags, args: [Unsupported type va_list]);
    pub fn gtk_theming_engine_has_class(engine: *mut GtkThemingEngine, style_class: *const c_char) -> gboolean;
    pub fn gtk_theming_engine_has_region(engine: *mut GtkThemingEngine, style_region: *const c_char, flags: *mut GtkRegionFlags) -> gboolean;
    pub fn gtk_theming_engine_lookup_color(engine: *mut GtkThemingEngine, color_name: *const c_char, color: *mut gdk::GdkRGBA) -> gboolean;
    pub fn gtk_theming_engine_state_is_running(engine: *mut GtkThemingEngine, state: GtkStateType, progress: *mut c_double) -> gboolean;

    //=========================================================================
    // GtkToggleAction
    //=========================================================================
    pub fn gtk_toggle_action_get_type() -> GType;
    pub fn gtk_toggle_action_new(name: *const c_char, label: *const c_char, tooltip: *const c_char, stock_id: *const c_char) -> *mut GtkToggleAction;
    pub fn gtk_toggle_action_get_active(action: *mut GtkToggleAction) -> gboolean;
    pub fn gtk_toggle_action_get_draw_as_radio(action: *mut GtkToggleAction) -> gboolean;
    pub fn gtk_toggle_action_set_active(action: *mut GtkToggleAction, is_active: gboolean);
    pub fn gtk_toggle_action_set_draw_as_radio(action: *mut GtkToggleAction, draw_as_radio: gboolean);
    pub fn gtk_toggle_action_toggled(action: *mut GtkToggleAction);

    //=========================================================================
    // GtkToggleButton
    //=========================================================================
    pub fn gtk_toggle_button_get_type() -> GType;
    pub fn gtk_toggle_button_new() -> *mut GtkWidget;
    pub fn gtk_toggle_button_new_with_label(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_toggle_button_new_with_mnemonic(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_toggle_button_get_active(toggle_button: *mut GtkToggleButton) -> gboolean;
    pub fn gtk_toggle_button_get_inconsistent(toggle_button: *mut GtkToggleButton) -> gboolean;
    pub fn gtk_toggle_button_get_mode(toggle_button: *mut GtkToggleButton) -> gboolean;
    pub fn gtk_toggle_button_set_active(toggle_button: *mut GtkToggleButton, is_active: gboolean);
    pub fn gtk_toggle_button_set_inconsistent(toggle_button: *mut GtkToggleButton, setting: gboolean);
    pub fn gtk_toggle_button_set_mode(toggle_button: *mut GtkToggleButton, draw_indicator: gboolean);
    pub fn gtk_toggle_button_toggled(toggle_button: *mut GtkToggleButton);

    //=========================================================================
    // GtkToggleButtonAccessible
    //=========================================================================
    pub fn gtk_toggle_button_accessible_get_type() -> GType;

    //=========================================================================
    // GtkToggleToolButton
    //=========================================================================
    pub fn gtk_toggle_tool_button_get_type() -> GType;
    pub fn gtk_toggle_tool_button_new() -> *mut GtkToolItem;
    pub fn gtk_toggle_tool_button_new_from_stock(stock_id: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_toggle_tool_button_get_active(button: *mut GtkToggleToolButton) -> gboolean;
    pub fn gtk_toggle_tool_button_set_active(button: *mut GtkToggleToolButton, is_active: gboolean);

    //=========================================================================
    // GtkToolButton
    //=========================================================================
    pub fn gtk_tool_button_get_type() -> GType;
    pub fn gtk_tool_button_new(icon_widget: *mut GtkWidget, label: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_tool_button_new_from_stock(stock_id: *const c_char) -> *mut GtkToolItem;
    pub fn gtk_tool_button_get_icon_name(button: *mut GtkToolButton) -> *const c_char;
    pub fn gtk_tool_button_get_icon_widget(button: *mut GtkToolButton) -> *mut GtkWidget;
    pub fn gtk_tool_button_get_label(button: *mut GtkToolButton) -> *const c_char;
    pub fn gtk_tool_button_get_label_widget(button: *mut GtkToolButton) -> *mut GtkWidget;
    pub fn gtk_tool_button_get_stock_id(button: *mut GtkToolButton) -> *const c_char;
    pub fn gtk_tool_button_get_use_underline(button: *mut GtkToolButton) -> gboolean;
    pub fn gtk_tool_button_set_icon_name(button: *mut GtkToolButton, icon_name: *const c_char);
    pub fn gtk_tool_button_set_icon_widget(button: *mut GtkToolButton, icon_widget: *mut GtkWidget);
    pub fn gtk_tool_button_set_label(button: *mut GtkToolButton, label: *const c_char);
    pub fn gtk_tool_button_set_label_widget(button: *mut GtkToolButton, label_widget: *mut GtkWidget);
    pub fn gtk_tool_button_set_stock_id(button: *mut GtkToolButton, stock_id: *const c_char);
    pub fn gtk_tool_button_set_use_underline(button: *mut GtkToolButton, use_underline: gboolean);

    //=========================================================================
    // GtkToolItem
    //=========================================================================
    pub fn gtk_tool_item_get_type() -> GType;
    pub fn gtk_tool_item_new() -> *mut GtkToolItem;
    pub fn gtk_tool_item_get_ellipsize_mode(tool_item: *mut GtkToolItem) -> pango::PangoEllipsizeMode;
    pub fn gtk_tool_item_get_expand(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_get_homogeneous(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_get_icon_size(tool_item: *mut GtkToolItem) -> c_int;
    pub fn gtk_tool_item_get_is_important(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_get_orientation(tool_item: *mut GtkToolItem) -> GtkOrientation;
    pub fn gtk_tool_item_get_proxy_menu_item(tool_item: *mut GtkToolItem, menu_item_id: *const c_char) -> *mut GtkWidget;
    pub fn gtk_tool_item_get_relief_style(tool_item: *mut GtkToolItem) -> GtkReliefStyle;
    pub fn gtk_tool_item_get_text_alignment(tool_item: *mut GtkToolItem) -> c_float;
    pub fn gtk_tool_item_get_text_orientation(tool_item: *mut GtkToolItem) -> GtkOrientation;
    pub fn gtk_tool_item_get_text_size_group(tool_item: *mut GtkToolItem) -> *mut GtkSizeGroup;
    pub fn gtk_tool_item_get_toolbar_style(tool_item: *mut GtkToolItem) -> GtkToolbarStyle;
    pub fn gtk_tool_item_get_use_drag_window(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_get_visible_horizontal(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_get_visible_vertical(tool_item: *mut GtkToolItem) -> gboolean;
    pub fn gtk_tool_item_rebuild_menu(tool_item: *mut GtkToolItem);
    pub fn gtk_tool_item_retrieve_proxy_menu_item(tool_item: *mut GtkToolItem) -> *mut GtkWidget;
    pub fn gtk_tool_item_set_expand(tool_item: *mut GtkToolItem, expand: gboolean);
    pub fn gtk_tool_item_set_homogeneous(tool_item: *mut GtkToolItem, homogeneous: gboolean);
    pub fn gtk_tool_item_set_is_important(tool_item: *mut GtkToolItem, is_important: gboolean);
    pub fn gtk_tool_item_set_proxy_menu_item(tool_item: *mut GtkToolItem, menu_item_id: *const c_char, menu_item: *mut GtkWidget);
    pub fn gtk_tool_item_set_tooltip_markup(tool_item: *mut GtkToolItem, markup: *const c_char);
    pub fn gtk_tool_item_set_tooltip_text(tool_item: *mut GtkToolItem, text: *const c_char);
    pub fn gtk_tool_item_set_use_drag_window(tool_item: *mut GtkToolItem, use_drag_window: gboolean);
    pub fn gtk_tool_item_set_visible_horizontal(tool_item: *mut GtkToolItem, visible_horizontal: gboolean);
    pub fn gtk_tool_item_set_visible_vertical(tool_item: *mut GtkToolItem, visible_vertical: gboolean);
    pub fn gtk_tool_item_toolbar_reconfigured(tool_item: *mut GtkToolItem);

    //=========================================================================
    // GtkToolItemGroup
    //=========================================================================
    pub fn gtk_tool_item_group_get_type() -> GType;
    pub fn gtk_tool_item_group_new(label: *const c_char) -> *mut GtkWidget;
    pub fn gtk_tool_item_group_get_collapsed(group: *mut GtkToolItemGroup) -> gboolean;
    pub fn gtk_tool_item_group_get_drop_item(group: *mut GtkToolItemGroup, x: c_int, y: c_int) -> *mut GtkToolItem;
    pub fn gtk_tool_item_group_get_ellipsize(group: *mut GtkToolItemGroup) -> pango::PangoEllipsizeMode;
    pub fn gtk_tool_item_group_get_header_relief(group: *mut GtkToolItemGroup) -> GtkReliefStyle;
    pub fn gtk_tool_item_group_get_item_position(group: *mut GtkToolItemGroup, item: *mut GtkToolItem) -> c_int;
    pub fn gtk_tool_item_group_get_label(group: *mut GtkToolItemGroup) -> *const c_char;
    pub fn gtk_tool_item_group_get_label_widget(group: *mut GtkToolItemGroup) -> *mut GtkWidget;
    pub fn gtk_tool_item_group_get_n_items(group: *mut GtkToolItemGroup) -> c_uint;
    pub fn gtk_tool_item_group_get_nth_item(group: *mut GtkToolItemGroup, index: c_uint) -> *mut GtkToolItem;
    pub fn gtk_tool_item_group_insert(group: *mut GtkToolItemGroup, item: *mut GtkToolItem, position: c_int);
    pub fn gtk_tool_item_group_set_collapsed(group: *mut GtkToolItemGroup, collapsed: gboolean);
    pub fn gtk_tool_item_group_set_ellipsize(group: *mut GtkToolItemGroup, ellipsize: pango::PangoEllipsizeMode);
    pub fn gtk_tool_item_group_set_header_relief(group: *mut GtkToolItemGroup, style: GtkReliefStyle);
    pub fn gtk_tool_item_group_set_item_position(group: *mut GtkToolItemGroup, item: *mut GtkToolItem, position: c_int);
    pub fn gtk_tool_item_group_set_label(group: *mut GtkToolItemGroup, label: *const c_char);
    pub fn gtk_tool_item_group_set_label_widget(group: *mut GtkToolItemGroup, label_widget: *mut GtkWidget);

    //=========================================================================
    // GtkToolPalette
    //=========================================================================
    pub fn gtk_tool_palette_get_type() -> GType;
    pub fn gtk_tool_palette_new() -> *mut GtkWidget;
    pub fn gtk_tool_palette_get_drag_target_group() -> *const GtkTargetEntry;
    pub fn gtk_tool_palette_get_drag_target_item() -> *const GtkTargetEntry;
    pub fn gtk_tool_palette_add_drag_dest(palette: *mut GtkToolPalette, widget: *mut GtkWidget, flags: GtkDestDefaults, targets: GtkToolPaletteDragTargets, actions: gdk::GdkDragAction);
    pub fn gtk_tool_palette_get_drag_item(palette: *mut GtkToolPalette, selection: *const GtkSelectionData) -> *mut GtkWidget;
    pub fn gtk_tool_palette_get_drop_group(palette: *mut GtkToolPalette, x: c_int, y: c_int) -> *mut GtkToolItemGroup;
    pub fn gtk_tool_palette_get_drop_item(palette: *mut GtkToolPalette, x: c_int, y: c_int) -> *mut GtkToolItem;
    pub fn gtk_tool_palette_get_exclusive(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup) -> gboolean;
    pub fn gtk_tool_palette_get_expand(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup) -> gboolean;
    pub fn gtk_tool_palette_get_group_position(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup) -> c_int;
    pub fn gtk_tool_palette_get_hadjustment(palette: *mut GtkToolPalette) -> *mut GtkAdjustment;
    pub fn gtk_tool_palette_get_icon_size(palette: *mut GtkToolPalette) -> c_int;
    pub fn gtk_tool_palette_get_style(palette: *mut GtkToolPalette) -> GtkToolbarStyle;
    pub fn gtk_tool_palette_get_vadjustment(palette: *mut GtkToolPalette) -> *mut GtkAdjustment;
    pub fn gtk_tool_palette_set_drag_source(palette: *mut GtkToolPalette, targets: GtkToolPaletteDragTargets);
    pub fn gtk_tool_palette_set_exclusive(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup, exclusive: gboolean);
    pub fn gtk_tool_palette_set_expand(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup, expand: gboolean);
    pub fn gtk_tool_palette_set_group_position(palette: *mut GtkToolPalette, group: *mut GtkToolItemGroup, position: c_int);
    pub fn gtk_tool_palette_set_icon_size(palette: *mut GtkToolPalette, icon_size: c_int);
    pub fn gtk_tool_palette_set_style(palette: *mut GtkToolPalette, style: GtkToolbarStyle);
    pub fn gtk_tool_palette_unset_icon_size(palette: *mut GtkToolPalette);
    pub fn gtk_tool_palette_unset_style(palette: *mut GtkToolPalette);

    //=========================================================================
    // GtkToolbar
    //=========================================================================
    pub fn gtk_toolbar_get_type() -> GType;
    pub fn gtk_toolbar_new() -> *mut GtkWidget;
    pub fn gtk_toolbar_get_drop_index(toolbar: *mut GtkToolbar, x: c_int, y: c_int) -> c_int;
    pub fn gtk_toolbar_get_icon_size(toolbar: *mut GtkToolbar) -> GtkIconSize;
    pub fn gtk_toolbar_get_item_index(toolbar: *mut GtkToolbar, item: *mut GtkToolItem) -> c_int;
    pub fn gtk_toolbar_get_n_items(toolbar: *mut GtkToolbar) -> c_int;
    pub fn gtk_toolbar_get_nth_item(toolbar: *mut GtkToolbar, n: c_int) -> *mut GtkToolItem;
    pub fn gtk_toolbar_get_relief_style(toolbar: *mut GtkToolbar) -> GtkReliefStyle;
    pub fn gtk_toolbar_get_show_arrow(toolbar: *mut GtkToolbar) -> gboolean;
    pub fn gtk_toolbar_get_style(toolbar: *mut GtkToolbar) -> GtkToolbarStyle;
    pub fn gtk_toolbar_insert(toolbar: *mut GtkToolbar, item: *mut GtkToolItem, pos: c_int);
    pub fn gtk_toolbar_set_drop_highlight_item(toolbar: *mut GtkToolbar, tool_item: *mut GtkToolItem, index_: c_int);
    pub fn gtk_toolbar_set_icon_size(toolbar: *mut GtkToolbar, icon_size: GtkIconSize);
    pub fn gtk_toolbar_set_show_arrow(toolbar: *mut GtkToolbar, show_arrow: gboolean);
    pub fn gtk_toolbar_set_style(toolbar: *mut GtkToolbar, style: GtkToolbarStyle);
    pub fn gtk_toolbar_unset_icon_size(toolbar: *mut GtkToolbar);
    pub fn gtk_toolbar_unset_style(toolbar: *mut GtkToolbar);

    //=========================================================================
    // GtkTooltip
    //=========================================================================
    pub fn gtk_tooltip_get_type() -> GType;
    pub fn gtk_tooltip_trigger_tooltip_query(display: *mut gdk::GdkDisplay);
    pub fn gtk_tooltip_set_custom(tooltip: *mut GtkTooltip, custom_widget: *mut GtkWidget);
    pub fn gtk_tooltip_set_icon(tooltip: *mut GtkTooltip, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_tooltip_set_icon_from_gicon(tooltip: *mut GtkTooltip, gicon: *mut gio::GIcon, size: c_int);
    pub fn gtk_tooltip_set_icon_from_icon_name(tooltip: *mut GtkTooltip, icon_name: *const c_char, size: c_int);
    pub fn gtk_tooltip_set_icon_from_stock(tooltip: *mut GtkTooltip, stock_id: *const c_char, size: c_int);
    pub fn gtk_tooltip_set_markup(tooltip: *mut GtkTooltip, markup: *const c_char);
    pub fn gtk_tooltip_set_text(tooltip: *mut GtkTooltip, text: *const c_char);
    pub fn gtk_tooltip_set_tip_area(tooltip: *mut GtkTooltip, rect: *const gdk::GdkRectangle);

    //=========================================================================
    // GtkToplevelAccessible
    //=========================================================================
    pub fn gtk_toplevel_accessible_get_type() -> GType;
    pub fn gtk_toplevel_accessible_get_children(accessible: *mut GtkToplevelAccessible) -> *mut glib::GList;

    //=========================================================================
    // GtkTreeModelFilter
    //=========================================================================
    pub fn gtk_tree_model_filter_get_type() -> GType;
    pub fn gtk_tree_model_filter_clear_cache(filter: *mut GtkTreeModelFilter);
    pub fn gtk_tree_model_filter_convert_child_iter_to_iter(filter: *mut GtkTreeModelFilter, filter_iter: *mut GtkTreeIter, child_iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_filter_convert_child_path_to_path(filter: *mut GtkTreeModelFilter, child_path: *mut GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_model_filter_convert_iter_to_child_iter(filter: *mut GtkTreeModelFilter, child_iter: *mut GtkTreeIter, filter_iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_filter_convert_path_to_child_path(filter: *mut GtkTreeModelFilter, filter_path: *mut GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_model_filter_get_model(filter: *mut GtkTreeModelFilter) -> *mut GtkTreeModel;
    pub fn gtk_tree_model_filter_refilter(filter: *mut GtkTreeModelFilter);
    pub fn gtk_tree_model_filter_set_modify_func(filter: *mut GtkTreeModelFilter, n_columns: c_int, types: *mut GType, func: GtkTreeModelFilterModifyFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_model_filter_set_visible_column(filter: *mut GtkTreeModelFilter, column: c_int);
    pub fn gtk_tree_model_filter_set_visible_func(filter: *mut GtkTreeModelFilter, func: GtkTreeModelFilterVisibleFunc, data: gpointer, destroy: glib::GDestroyNotify);

    //=========================================================================
    // GtkTreeModelSort
    //=========================================================================
    pub fn gtk_tree_model_sort_get_type() -> GType;
    pub fn gtk_tree_model_sort_clear_cache(tree_model_sort: *mut GtkTreeModelSort);
    pub fn gtk_tree_model_sort_convert_child_iter_to_iter(tree_model_sort: *mut GtkTreeModelSort, sort_iter: *mut GtkTreeIter, child_iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_sort_convert_child_path_to_path(tree_model_sort: *mut GtkTreeModelSort, child_path: *mut GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_model_sort_convert_iter_to_child_iter(tree_model_sort: *mut GtkTreeModelSort, child_iter: *mut GtkTreeIter, sorted_iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_sort_convert_path_to_child_path(tree_model_sort: *mut GtkTreeModelSort, sorted_path: *mut GtkTreePath) -> *mut GtkTreePath;
    pub fn gtk_tree_model_sort_get_model(tree_model: *mut GtkTreeModelSort) -> *mut GtkTreeModel;
    pub fn gtk_tree_model_sort_iter_is_valid(tree_model_sort: *mut GtkTreeModelSort, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_sort_reset_default_sort_func(tree_model_sort: *mut GtkTreeModelSort);

    //=========================================================================
    // GtkTreeSelection
    //=========================================================================
    pub fn gtk_tree_selection_get_type() -> GType;
    pub fn gtk_tree_selection_count_selected_rows(selection: *mut GtkTreeSelection) -> c_int;
    pub fn gtk_tree_selection_get_mode(selection: *mut GtkTreeSelection) -> GtkSelectionMode;
    pub fn gtk_tree_selection_get_select_function(selection: *mut GtkTreeSelection) -> GtkTreeSelectionFunc;
    pub fn gtk_tree_selection_get_selected(selection: *mut GtkTreeSelection, model: *mut *mut GtkTreeModel, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_selection_get_selected_rows(selection: *mut GtkTreeSelection, model: *mut *mut GtkTreeModel) -> *mut glib::GList;
    pub fn gtk_tree_selection_get_tree_view(selection: *mut GtkTreeSelection) -> *mut GtkTreeView;
    pub fn gtk_tree_selection_get_user_data(selection: *mut GtkTreeSelection) -> gpointer;
    pub fn gtk_tree_selection_iter_is_selected(selection: *mut GtkTreeSelection, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_selection_path_is_selected(selection: *mut GtkTreeSelection, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_selection_select_all(selection: *mut GtkTreeSelection);
    pub fn gtk_tree_selection_select_iter(selection: *mut GtkTreeSelection, iter: *mut GtkTreeIter);
    pub fn gtk_tree_selection_select_path(selection: *mut GtkTreeSelection, path: *mut GtkTreePath);
    pub fn gtk_tree_selection_select_range(selection: *mut GtkTreeSelection, start_path: *mut GtkTreePath, end_path: *mut GtkTreePath);
    pub fn gtk_tree_selection_selected_foreach(selection: *mut GtkTreeSelection, func: GtkTreeSelectionForeachFunc, data: gpointer);
    pub fn gtk_tree_selection_set_mode(selection: *mut GtkTreeSelection, type_: GtkSelectionMode);
    pub fn gtk_tree_selection_set_select_function(selection: *mut GtkTreeSelection, func: GtkTreeSelectionFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_selection_unselect_all(selection: *mut GtkTreeSelection);
    pub fn gtk_tree_selection_unselect_iter(selection: *mut GtkTreeSelection, iter: *mut GtkTreeIter);
    pub fn gtk_tree_selection_unselect_path(selection: *mut GtkTreeSelection, path: *mut GtkTreePath);
    pub fn gtk_tree_selection_unselect_range(selection: *mut GtkTreeSelection, start_path: *mut GtkTreePath, end_path: *mut GtkTreePath);

    //=========================================================================
    // GtkTreeStore
    //=========================================================================
    pub fn gtk_tree_store_get_type() -> GType;
    pub fn gtk_tree_store_new(n_columns: c_int, ...) -> *mut GtkTreeStore;
    pub fn gtk_tree_store_newv(n_columns: c_int, types: *mut GType) -> *mut GtkTreeStore;
    pub fn gtk_tree_store_append(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter);
    pub fn gtk_tree_store_clear(tree_store: *mut GtkTreeStore);
    pub fn gtk_tree_store_insert(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, position: c_int);
    pub fn gtk_tree_store_insert_after(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, sibling: *mut GtkTreeIter);
    pub fn gtk_tree_store_insert_before(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, sibling: *mut GtkTreeIter);
    pub fn gtk_tree_store_insert_with_values(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, position: c_int, ...);
    pub fn gtk_tree_store_insert_with_valuesv(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, position: c_int, columns: *mut c_int, values: *mut gobject::GValue, n_values: c_int);
    pub fn gtk_tree_store_is_ancestor(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, descendant: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_store_iter_depth(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter) -> c_int;
    pub fn gtk_tree_store_iter_is_valid(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_store_move_after(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, position: *mut GtkTreeIter);
    pub fn gtk_tree_store_move_before(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, position: *mut GtkTreeIter);
    pub fn gtk_tree_store_prepend(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter);
    pub fn gtk_tree_store_remove(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_store_reorder(tree_store: *mut GtkTreeStore, parent: *mut GtkTreeIter, new_order: *mut c_int);
    pub fn gtk_tree_store_set(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, ...);
    pub fn gtk_tree_store_set_column_types(tree_store: *mut GtkTreeStore, n_columns: c_int, types: *mut GType);
    //pub fn gtk_tree_store_set_valist(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, var_args: [Unsupported type va_list]);
    pub fn gtk_tree_store_set_value(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, column: c_int, value: *mut gobject::GValue);
    pub fn gtk_tree_store_set_valuesv(tree_store: *mut GtkTreeStore, iter: *mut GtkTreeIter, columns: *mut c_int, values: *mut gobject::GValue, n_values: c_int);
    pub fn gtk_tree_store_swap(tree_store: *mut GtkTreeStore, a: *mut GtkTreeIter, b: *mut GtkTreeIter);

    //=========================================================================
    // GtkTreeView
    //=========================================================================
    pub fn gtk_tree_view_get_type() -> GType;
    pub fn gtk_tree_view_new() -> *mut GtkWidget;
    pub fn gtk_tree_view_new_with_model(model: *mut GtkTreeModel) -> *mut GtkWidget;
    pub fn gtk_tree_view_append_column(tree_view: *mut GtkTreeView, column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_collapse_all(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_collapse_row(tree_view: *mut GtkTreeView, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_view_columns_autosize(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_convert_bin_window_to_tree_coords(tree_view: *mut GtkTreeView, bx: c_int, by: c_int, tx: *mut c_int, ty: *mut c_int);
    pub fn gtk_tree_view_convert_bin_window_to_widget_coords(tree_view: *mut GtkTreeView, bx: c_int, by: c_int, wx: *mut c_int, wy: *mut c_int);
    pub fn gtk_tree_view_convert_tree_to_bin_window_coords(tree_view: *mut GtkTreeView, tx: c_int, ty: c_int, bx: *mut c_int, by: *mut c_int);
    pub fn gtk_tree_view_convert_tree_to_widget_coords(tree_view: *mut GtkTreeView, tx: c_int, ty: c_int, wx: *mut c_int, wy: *mut c_int);
    pub fn gtk_tree_view_convert_widget_to_bin_window_coords(tree_view: *mut GtkTreeView, wx: c_int, wy: c_int, bx: *mut c_int, by: *mut c_int);
    pub fn gtk_tree_view_convert_widget_to_tree_coords(tree_view: *mut GtkTreeView, wx: c_int, wy: c_int, tx: *mut c_int, ty: *mut c_int);
    pub fn gtk_tree_view_create_row_drag_icon(tree_view: *mut GtkTreeView, path: *mut GtkTreePath) -> *mut cairo::cairo_surface_t;
    pub fn gtk_tree_view_enable_model_drag_dest(tree_view: *mut GtkTreeView, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    pub fn gtk_tree_view_enable_model_drag_source(tree_view: *mut GtkTreeView, start_button_mask: gdk::GdkModifierType, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    pub fn gtk_tree_view_expand_all(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_expand_row(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, open_all: gboolean) -> gboolean;
    pub fn gtk_tree_view_expand_to_path(tree_view: *mut GtkTreeView, path: *mut GtkTreePath);
    #[cfg(gtk_3_8)]
    pub fn gtk_tree_view_get_activate_on_single_click(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_background_area(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, column: *mut GtkTreeViewColumn, rect: *mut gdk::GdkRectangle);
    pub fn gtk_tree_view_get_bin_window(tree_view: *mut GtkTreeView) -> *mut gdk::GdkWindow;
    pub fn gtk_tree_view_get_cell_area(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, column: *mut GtkTreeViewColumn, rect: *mut gdk::GdkRectangle);
    pub fn gtk_tree_view_get_column(tree_view: *mut GtkTreeView, n: c_int) -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_get_columns(tree_view: *mut GtkTreeView) -> *mut glib::GList;
    pub fn gtk_tree_view_get_cursor(tree_view: *mut GtkTreeView, path: *mut *mut GtkTreePath, focus_column: *mut *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_get_dest_row_at_pos(tree_view: *mut GtkTreeView, drag_x: c_int, drag_y: c_int, path: *mut *mut GtkTreePath, pos: *mut GtkTreeViewDropPosition) -> gboolean;
    pub fn gtk_tree_view_get_drag_dest_row(tree_view: *mut GtkTreeView, path: *mut *mut GtkTreePath, pos: *mut GtkTreeViewDropPosition);
    pub fn gtk_tree_view_get_enable_search(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_enable_tree_lines(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_expander_column(tree_view: *mut GtkTreeView) -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_get_fixed_height_mode(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_grid_lines(tree_view: *mut GtkTreeView) -> GtkTreeViewGridLines;
    pub fn gtk_tree_view_get_hadjustment(tree_view: *mut GtkTreeView) -> *mut GtkAdjustment;
    pub fn gtk_tree_view_get_headers_clickable(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_headers_visible(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_hover_expand(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_hover_selection(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_level_indentation(tree_view: *mut GtkTreeView) -> c_int;
    pub fn gtk_tree_view_get_model(tree_view: *mut GtkTreeView) -> *mut GtkTreeModel;
    #[cfg(gtk_3_4)]
    pub fn gtk_tree_view_get_n_columns(tree_view: *mut GtkTreeView) -> c_uint;
    pub fn gtk_tree_view_get_path_at_pos(tree_view: *mut GtkTreeView, x: c_int, y: c_int, path: *mut *mut GtkTreePath, column: *mut *mut GtkTreeViewColumn, cell_x: *mut c_int, cell_y: *mut c_int) -> gboolean;
    pub fn gtk_tree_view_get_reorderable(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_row_separator_func(tree_view: *mut GtkTreeView) -> GtkTreeViewRowSeparatorFunc;
    pub fn gtk_tree_view_get_rubber_banding(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_rules_hint(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_search_column(tree_view: *mut GtkTreeView) -> c_int;
    pub fn gtk_tree_view_get_search_entry(tree_view: *mut GtkTreeView) -> *mut GtkEntry;
    pub fn gtk_tree_view_get_search_equal_func(tree_view: *mut GtkTreeView) -> GtkTreeViewSearchEqualFunc;
    pub fn gtk_tree_view_get_search_position_func(tree_view: *mut GtkTreeView) -> GtkTreeViewSearchPositionFunc;
    pub fn gtk_tree_view_get_selection(tree_view: *mut GtkTreeView) -> *mut GtkTreeSelection;
    pub fn gtk_tree_view_get_show_expanders(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_get_tooltip_column(tree_view: *mut GtkTreeView) -> c_int;
    pub fn gtk_tree_view_get_tooltip_context(tree_view: *mut GtkTreeView, x: *mut c_int, y: *mut c_int, keyboard_tip: gboolean, model: *mut *mut GtkTreeModel, path: *mut *mut GtkTreePath, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_view_get_vadjustment(tree_view: *mut GtkTreeView) -> *mut GtkAdjustment;
    pub fn gtk_tree_view_get_visible_range(tree_view: *mut GtkTreeView, start_path: *mut *mut GtkTreePath, end_path: *mut *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_view_get_visible_rect(tree_view: *mut GtkTreeView, visible_rect: *mut gdk::GdkRectangle);
    pub fn gtk_tree_view_insert_column(tree_view: *mut GtkTreeView, column: *mut GtkTreeViewColumn, position: c_int) -> c_int;
    pub fn gtk_tree_view_insert_column_with_attributes(tree_view: *mut GtkTreeView, position: c_int, title: *const c_char, cell: *mut GtkCellRenderer, ...) -> c_int;
    pub fn gtk_tree_view_insert_column_with_data_func(tree_view: *mut GtkTreeView, position: c_int, title: *const c_char, cell: *mut GtkCellRenderer, func: GtkTreeCellDataFunc, data: gpointer, dnotify: glib::GDestroyNotify) -> c_int;
    pub fn gtk_tree_view_is_blank_at_pos(tree_view: *mut GtkTreeView, x: c_int, y: c_int, path: *mut *mut GtkTreePath, column: *mut *mut GtkTreeViewColumn, cell_x: *mut c_int, cell_y: *mut c_int) -> gboolean;
    pub fn gtk_tree_view_is_rubber_banding_active(tree_view: *mut GtkTreeView) -> gboolean;
    pub fn gtk_tree_view_map_expanded_rows(tree_view: *mut GtkTreeView, func: GtkTreeViewMappingFunc, data: gpointer);
    pub fn gtk_tree_view_move_column_after(tree_view: *mut GtkTreeView, column: *mut GtkTreeViewColumn, base_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_remove_column(tree_view: *mut GtkTreeView, column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_row_activated(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_row_expanded(tree_view: *mut GtkTreeView, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_view_scroll_to_cell(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, column: *mut GtkTreeViewColumn, use_align: gboolean, row_align: c_float, col_align: c_float);
    pub fn gtk_tree_view_scroll_to_point(tree_view: *mut GtkTreeView, tree_x: c_int, tree_y: c_int);
    #[cfg(gtk_3_8)]
    pub fn gtk_tree_view_set_activate_on_single_click(tree_view: *mut GtkTreeView, single: gboolean);
    pub fn gtk_tree_view_set_column_drag_function(tree_view: *mut GtkTreeView, func: GtkTreeViewColumnDropFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_set_cursor(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, focus_column: *mut GtkTreeViewColumn, start_editing: gboolean);
    pub fn gtk_tree_view_set_cursor_on_cell(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, focus_column: *mut GtkTreeViewColumn, focus_cell: *mut GtkCellRenderer, start_editing: gboolean);
    pub fn gtk_tree_view_set_destroy_count_func(tree_view: *mut GtkTreeView, func: GtkTreeDestroyCountFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_set_drag_dest_row(tree_view: *mut GtkTreeView, path: *mut GtkTreePath, pos: GtkTreeViewDropPosition);
    pub fn gtk_tree_view_set_enable_search(tree_view: *mut GtkTreeView, enable_search: gboolean);
    pub fn gtk_tree_view_set_enable_tree_lines(tree_view: *mut GtkTreeView, enabled: gboolean);
    pub fn gtk_tree_view_set_expander_column(tree_view: *mut GtkTreeView, column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_set_fixed_height_mode(tree_view: *mut GtkTreeView, enable: gboolean);
    pub fn gtk_tree_view_set_grid_lines(tree_view: *mut GtkTreeView, grid_lines: GtkTreeViewGridLines);
    pub fn gtk_tree_view_set_hadjustment(tree_view: *mut GtkTreeView, adjustment: *mut GtkAdjustment);
    pub fn gtk_tree_view_set_headers_clickable(tree_view: *mut GtkTreeView, setting: gboolean);
    pub fn gtk_tree_view_set_headers_visible(tree_view: *mut GtkTreeView, headers_visible: gboolean);
    pub fn gtk_tree_view_set_hover_expand(tree_view: *mut GtkTreeView, expand: gboolean);
    pub fn gtk_tree_view_set_hover_selection(tree_view: *mut GtkTreeView, hover: gboolean);
    pub fn gtk_tree_view_set_level_indentation(tree_view: *mut GtkTreeView, indentation: c_int);
    pub fn gtk_tree_view_set_model(tree_view: *mut GtkTreeView, model: *mut GtkTreeModel);
    pub fn gtk_tree_view_set_reorderable(tree_view: *mut GtkTreeView, reorderable: gboolean);
    pub fn gtk_tree_view_set_row_separator_func(tree_view: *mut GtkTreeView, func: GtkTreeViewRowSeparatorFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_set_rubber_banding(tree_view: *mut GtkTreeView, enable: gboolean);
    pub fn gtk_tree_view_set_rules_hint(tree_view: *mut GtkTreeView, setting: gboolean);
    pub fn gtk_tree_view_set_search_column(tree_view: *mut GtkTreeView, column: c_int);
    pub fn gtk_tree_view_set_search_entry(tree_view: *mut GtkTreeView, entry: *mut GtkEntry);
    pub fn gtk_tree_view_set_search_equal_func(tree_view: *mut GtkTreeView, search_equal_func: GtkTreeViewSearchEqualFunc, search_user_data: gpointer, search_destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_set_search_position_func(tree_view: *mut GtkTreeView, func: GtkTreeViewSearchPositionFunc, data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_set_show_expanders(tree_view: *mut GtkTreeView, enabled: gboolean);
    pub fn gtk_tree_view_set_tooltip_cell(tree_view: *mut GtkTreeView, tooltip: *mut GtkTooltip, path: *mut GtkTreePath, column: *mut GtkTreeViewColumn, cell: *mut GtkCellRenderer);
    pub fn gtk_tree_view_set_tooltip_column(tree_view: *mut GtkTreeView, column: c_int);
    pub fn gtk_tree_view_set_tooltip_row(tree_view: *mut GtkTreeView, tooltip: *mut GtkTooltip, path: *mut GtkTreePath);
    pub fn gtk_tree_view_set_vadjustment(tree_view: *mut GtkTreeView, adjustment: *mut GtkAdjustment);
    pub fn gtk_tree_view_unset_rows_drag_dest(tree_view: *mut GtkTreeView);
    pub fn gtk_tree_view_unset_rows_drag_source(tree_view: *mut GtkTreeView);

    //=========================================================================
    // GtkTreeViewAccessible
    //=========================================================================
    pub fn gtk_tree_view_accessible_get_type() -> GType;

    //=========================================================================
    // GtkTreeViewColumn
    //=========================================================================
    pub fn gtk_tree_view_column_get_type() -> GType;
    pub fn gtk_tree_view_column_new() -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_new_with_area(area: *mut GtkCellArea) -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_new_with_attributes(title: *const c_char, cell: *mut GtkCellRenderer, ...) -> *mut GtkTreeViewColumn;
    pub fn gtk_tree_view_column_add_attribute(tree_column: *mut GtkTreeViewColumn, cell_renderer: *mut GtkCellRenderer, attribute: *const c_char, column: c_int);
    pub fn gtk_tree_view_column_cell_get_position(tree_column: *mut GtkTreeViewColumn, cell_renderer: *mut GtkCellRenderer, x_offset: *mut c_int, width: *mut c_int) -> gboolean;
    pub fn gtk_tree_view_column_cell_get_size(tree_column: *mut GtkTreeViewColumn, cell_area: *const gdk::GdkRectangle, x_offset: *mut c_int, y_offset: *mut c_int, width: *mut c_int, height: *mut c_int);
    pub fn gtk_tree_view_column_cell_is_visible(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_cell_set_cell_data(tree_column: *mut GtkTreeViewColumn, tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, is_expander: gboolean, is_expanded: gboolean);
    pub fn gtk_tree_view_column_clear(tree_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_clear_attributes(tree_column: *mut GtkTreeViewColumn, cell_renderer: *mut GtkCellRenderer);
    pub fn gtk_tree_view_column_clicked(tree_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_focus_cell(tree_column: *mut GtkTreeViewColumn, cell: *mut GtkCellRenderer);
    pub fn gtk_tree_view_column_get_alignment(tree_column: *mut GtkTreeViewColumn) -> c_float;
    pub fn gtk_tree_view_column_get_button(tree_column: *mut GtkTreeViewColumn) -> *mut GtkWidget;
    pub fn gtk_tree_view_column_get_clickable(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_expand(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_fixed_width(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_max_width(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_min_width(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_reorderable(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_resizable(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_sizing(tree_column: *mut GtkTreeViewColumn) -> GtkTreeViewColumnSizing;
    pub fn gtk_tree_view_column_get_sort_column_id(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_sort_indicator(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_sort_order(tree_column: *mut GtkTreeViewColumn) -> GtkSortType;
    pub fn gtk_tree_view_column_get_spacing(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_title(tree_column: *mut GtkTreeViewColumn) -> *const c_char;
    pub fn gtk_tree_view_column_get_tree_view(tree_column: *mut GtkTreeViewColumn) -> *mut GtkWidget;
    pub fn gtk_tree_view_column_get_visible(tree_column: *mut GtkTreeViewColumn) -> gboolean;
    pub fn gtk_tree_view_column_get_widget(tree_column: *mut GtkTreeViewColumn) -> *mut GtkWidget;
    pub fn gtk_tree_view_column_get_width(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_get_x_offset(tree_column: *mut GtkTreeViewColumn) -> c_int;
    pub fn gtk_tree_view_column_pack_end(tree_column: *mut GtkTreeViewColumn, cell: *mut GtkCellRenderer, expand: gboolean);
    pub fn gtk_tree_view_column_pack_start(tree_column: *mut GtkTreeViewColumn, cell: *mut GtkCellRenderer, expand: gboolean);
    pub fn gtk_tree_view_column_queue_resize(tree_column: *mut GtkTreeViewColumn);
    pub fn gtk_tree_view_column_set_alignment(tree_column: *mut GtkTreeViewColumn, xalign: c_float);
    pub fn gtk_tree_view_column_set_attributes(tree_column: *mut GtkTreeViewColumn, cell_renderer: *mut GtkCellRenderer, ...);
    pub fn gtk_tree_view_column_set_cell_data_func(tree_column: *mut GtkTreeViewColumn, cell_renderer: *mut GtkCellRenderer, func: GtkTreeCellDataFunc, func_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_view_column_set_clickable(tree_column: *mut GtkTreeViewColumn, clickable: gboolean);
    pub fn gtk_tree_view_column_set_expand(tree_column: *mut GtkTreeViewColumn, expand: gboolean);
    pub fn gtk_tree_view_column_set_fixed_width(tree_column: *mut GtkTreeViewColumn, fixed_width: c_int);
    pub fn gtk_tree_view_column_set_max_width(tree_column: *mut GtkTreeViewColumn, max_width: c_int);
    pub fn gtk_tree_view_column_set_min_width(tree_column: *mut GtkTreeViewColumn, min_width: c_int);
    pub fn gtk_tree_view_column_set_reorderable(tree_column: *mut GtkTreeViewColumn, reorderable: gboolean);
    pub fn gtk_tree_view_column_set_resizable(tree_column: *mut GtkTreeViewColumn, resizable: gboolean);
    pub fn gtk_tree_view_column_set_sizing(tree_column: *mut GtkTreeViewColumn, type_: GtkTreeViewColumnSizing);
    pub fn gtk_tree_view_column_set_sort_column_id(tree_column: *mut GtkTreeViewColumn, sort_column_id: c_int);
    pub fn gtk_tree_view_column_set_sort_indicator(tree_column: *mut GtkTreeViewColumn, setting: gboolean);
    pub fn gtk_tree_view_column_set_sort_order(tree_column: *mut GtkTreeViewColumn, order: GtkSortType);
    pub fn gtk_tree_view_column_set_spacing(tree_column: *mut GtkTreeViewColumn, spacing: c_int);
    pub fn gtk_tree_view_column_set_title(tree_column: *mut GtkTreeViewColumn, title: *const c_char);
    pub fn gtk_tree_view_column_set_visible(tree_column: *mut GtkTreeViewColumn, visible: gboolean);
    pub fn gtk_tree_view_column_set_widget(tree_column: *mut GtkTreeViewColumn, widget: *mut GtkWidget);

    //=========================================================================
    // GtkUIManager
    //=========================================================================
    pub fn gtk_ui_manager_get_type() -> GType;
    pub fn gtk_ui_manager_new() -> *mut GtkUIManager;
    pub fn gtk_ui_manager_add_ui(manager: *mut GtkUIManager, merge_id: c_uint, path: *const c_char, name: *const c_char, action: *const c_char, type_: GtkUIManagerItemType, top: gboolean);
    pub fn gtk_ui_manager_add_ui_from_file(manager: *mut GtkUIManager, filename: *mut c_char, error: *mut *mut glib::GError) -> c_uint;
    #[cfg(gtk_3_4)]
    pub fn gtk_ui_manager_add_ui_from_resource(manager: *mut GtkUIManager, resource_path: *const c_char, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_ui_manager_add_ui_from_string(manager: *mut GtkUIManager, buffer: *const c_char, length: ssize_t, error: *mut *mut glib::GError) -> c_uint;
    pub fn gtk_ui_manager_ensure_update(manager: *mut GtkUIManager);
    pub fn gtk_ui_manager_get_accel_group(manager: *mut GtkUIManager) -> *mut GtkAccelGroup;
    pub fn gtk_ui_manager_get_action(manager: *mut GtkUIManager, path: *const c_char) -> *mut GtkAction;
    pub fn gtk_ui_manager_get_action_groups(manager: *mut GtkUIManager) -> *mut glib::GList;
    pub fn gtk_ui_manager_get_add_tearoffs(manager: *mut GtkUIManager) -> gboolean;
    pub fn gtk_ui_manager_get_toplevels(manager: *mut GtkUIManager, types: GtkUIManagerItemType) -> *mut glib::GSList;
    pub fn gtk_ui_manager_get_ui(manager: *mut GtkUIManager) -> *mut c_char;
    pub fn gtk_ui_manager_get_widget(manager: *mut GtkUIManager, path: *const c_char) -> *mut GtkWidget;
    pub fn gtk_ui_manager_insert_action_group(manager: *mut GtkUIManager, action_group: *mut GtkActionGroup, pos: c_int);
    pub fn gtk_ui_manager_new_merge_id(manager: *mut GtkUIManager) -> c_uint;
    pub fn gtk_ui_manager_remove_action_group(manager: *mut GtkUIManager, action_group: *mut GtkActionGroup);
    pub fn gtk_ui_manager_remove_ui(manager: *mut GtkUIManager, merge_id: c_uint);
    pub fn gtk_ui_manager_set_add_tearoffs(manager: *mut GtkUIManager, add_tearoffs: gboolean);

    //=========================================================================
    // GtkVBox
    //=========================================================================
    pub fn gtk_vbox_get_type() -> GType;
    pub fn gtk_vbox_new(homogeneous: gboolean, spacing: c_int) -> *mut GtkWidget;

    //=========================================================================
    // GtkVButtonBox
    //=========================================================================
    pub fn gtk_vbutton_box_get_type() -> GType;
    pub fn gtk_vbutton_box_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkVPaned
    //=========================================================================
    pub fn gtk_vpaned_get_type() -> GType;
    pub fn gtk_vpaned_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkVScale
    //=========================================================================
    pub fn gtk_vscale_get_type() -> GType;
    pub fn gtk_vscale_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_vscale_new_with_range(min: c_double, max: c_double, step: c_double) -> *mut GtkWidget;

    //=========================================================================
    // GtkVScrollbar
    //=========================================================================
    pub fn gtk_vscrollbar_get_type() -> GType;
    pub fn gtk_vscrollbar_new(adjustment: *mut GtkAdjustment) -> *mut GtkWidget;

    //=========================================================================
    // GtkVSeparator
    //=========================================================================
    pub fn gtk_vseparator_get_type() -> GType;
    pub fn gtk_vseparator_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkViewport
    //=========================================================================
    pub fn gtk_viewport_get_type() -> GType;
    pub fn gtk_viewport_new(hadjustment: *mut GtkAdjustment, vadjustment: *mut GtkAdjustment) -> *mut GtkWidget;
    pub fn gtk_viewport_get_bin_window(viewport: *mut GtkViewport) -> *mut gdk::GdkWindow;
    pub fn gtk_viewport_get_hadjustment(viewport: *mut GtkViewport) -> *mut GtkAdjustment;
    pub fn gtk_viewport_get_shadow_type(viewport: *mut GtkViewport) -> GtkShadowType;
    pub fn gtk_viewport_get_vadjustment(viewport: *mut GtkViewport) -> *mut GtkAdjustment;
    pub fn gtk_viewport_get_view_window(viewport: *mut GtkViewport) -> *mut gdk::GdkWindow;
    pub fn gtk_viewport_set_hadjustment(viewport: *mut GtkViewport, adjustment: *mut GtkAdjustment);
    pub fn gtk_viewport_set_shadow_type(viewport: *mut GtkViewport, type_: GtkShadowType);
    pub fn gtk_viewport_set_vadjustment(viewport: *mut GtkViewport, adjustment: *mut GtkAdjustment);

    //=========================================================================
    // GtkVolumeButton
    //=========================================================================
    pub fn gtk_volume_button_get_type() -> GType;
    pub fn gtk_volume_button_new() -> *mut GtkWidget;

    //=========================================================================
    // GtkWidget
    //=========================================================================
    pub fn gtk_widget_get_type() -> GType;
    pub fn gtk_widget_new(type_: GType, first_property_name: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_widget_get_default_direction() -> GtkTextDirection;
    pub fn gtk_widget_get_default_style() -> *mut GtkStyle;
    pub fn gtk_widget_pop_composite_child();
    pub fn gtk_widget_push_composite_child();
    pub fn gtk_widget_set_default_direction(dir: GtkTextDirection);
    pub fn gtk_widget_activate(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_add_accelerator(widget: *mut GtkWidget, accel_signal: *const c_char, accel_group: *mut GtkAccelGroup, accel_key: c_uint, accel_mods: gdk::GdkModifierType, accel_flags: GtkAccelFlags);
    pub fn gtk_widget_add_device_events(widget: *mut GtkWidget, device: *mut gdk::GdkDevice, events: gdk::GdkEventMask);
    pub fn gtk_widget_add_events(widget: *mut GtkWidget, events: c_int);
    pub fn gtk_widget_add_mnemonic_label(widget: *mut GtkWidget, label: *mut GtkWidget);
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_add_tick_callback(widget: *mut GtkWidget, callback: GtkTickCallback, user_data: gpointer, notify: glib::GDestroyNotify) -> c_uint;
    pub fn gtk_widget_can_activate_accel(widget: *mut GtkWidget, signal_id: c_uint) -> gboolean;
    pub fn gtk_widget_child_focus(widget: *mut GtkWidget, direction: GtkDirectionType) -> gboolean;
    pub fn gtk_widget_child_notify(widget: *mut GtkWidget, child_property: *const c_char);
    pub fn gtk_widget_class_path(widget: *mut GtkWidget, path_length: *mut c_uint, path: *mut *mut c_char, path_reversed: *mut *mut c_char);
    pub fn gtk_widget_compute_expand(widget: *mut GtkWidget, orientation: GtkOrientation) -> gboolean;
    pub fn gtk_widget_create_pango_context(widget: *mut GtkWidget) -> *mut pango::PangoContext;
    pub fn gtk_widget_create_pango_layout(widget: *mut GtkWidget, text: *const c_char) -> *mut pango::PangoLayout;
    pub fn gtk_widget_destroy(widget: *mut GtkWidget);
    pub fn gtk_widget_destroyed(widget: *mut GtkWidget, widget_pointer: *mut *mut GtkWidget);
    pub fn gtk_widget_device_is_shadowed(widget: *mut GtkWidget, device: *mut gdk::GdkDevice) -> gboolean;
    pub fn gtk_drag_begin(widget: *mut GtkWidget, targets: *mut GtkTargetList, actions: gdk::GdkDragAction, button: c_int, event: *mut gdk::GdkEvent) -> *mut gdk::GdkDragContext;
    #[cfg(gtk_3_10)]
    pub fn gtk_drag_begin_with_coordinates(widget: *mut GtkWidget, targets: *mut GtkTargetList, actions: gdk::GdkDragAction, button: c_int, event: *mut gdk::GdkEvent, x: c_int, y: c_int) -> *mut gdk::GdkDragContext;
    pub fn gtk_drag_check_threshold(widget: *mut GtkWidget, start_x: c_int, start_y: c_int, current_x: c_int, current_y: c_int) -> gboolean;
    pub fn gtk_drag_dest_add_image_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_add_text_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_add_uri_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_dest_find_target(widget: *mut GtkWidget, context: *mut gdk::GdkDragContext, target_list: *mut GtkTargetList) -> gdk::GdkAtom;
    pub fn gtk_drag_dest_get_target_list(widget: *mut GtkWidget) -> *mut GtkTargetList;
    pub fn gtk_drag_dest_get_track_motion(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_drag_dest_set(widget: *mut GtkWidget, flags: GtkDestDefaults, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    pub fn gtk_drag_dest_set_proxy(widget: *mut GtkWidget, proxy_window: *mut gdk::GdkWindow, protocol: gdk::GdkDragProtocol, use_coordinates: gboolean);
    pub fn gtk_drag_dest_set_target_list(widget: *mut GtkWidget, target_list: *mut GtkTargetList);
    pub fn gtk_drag_dest_set_track_motion(widget: *mut GtkWidget, track_motion: gboolean);
    pub fn gtk_drag_dest_unset(widget: *mut GtkWidget);
    pub fn gtk_drag_get_data(widget: *mut GtkWidget, context: *mut gdk::GdkDragContext, target: gdk::GdkAtom, time_: u32);
    pub fn gtk_drag_highlight(widget: *mut GtkWidget);
    pub fn gtk_drag_source_add_image_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_add_text_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_add_uri_targets(widget: *mut GtkWidget);
    pub fn gtk_drag_source_get_target_list(widget: *mut GtkWidget) -> *mut GtkTargetList;
    pub fn gtk_drag_source_set(widget: *mut GtkWidget, start_button_mask: gdk::GdkModifierType, targets: *mut GtkTargetEntry, n_targets: c_int, actions: gdk::GdkDragAction);
    pub fn gtk_drag_source_set_icon_gicon(widget: *mut GtkWidget, icon: *mut gio::GIcon);
    pub fn gtk_drag_source_set_icon_name(widget: *mut GtkWidget, icon_name: *const c_char);
    pub fn gtk_drag_source_set_icon_pixbuf(widget: *mut GtkWidget, pixbuf: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_drag_source_set_icon_stock(widget: *mut GtkWidget, stock_id: *const c_char);
    pub fn gtk_drag_source_set_target_list(widget: *mut GtkWidget, target_list: *mut GtkTargetList);
    pub fn gtk_drag_source_unset(widget: *mut GtkWidget);
    pub fn gtk_drag_unhighlight(widget: *mut GtkWidget);
    pub fn gtk_widget_draw(widget: *mut GtkWidget, cr: *mut cairo::cairo_t);
    pub fn gtk_widget_ensure_style(widget: *mut GtkWidget);
    pub fn gtk_widget_error_bell(widget: *mut GtkWidget);
    pub fn gtk_widget_event(widget: *mut GtkWidget, event: *mut gdk::GdkEvent) -> gboolean;
    pub fn gtk_widget_freeze_child_notify(widget: *mut GtkWidget);
    pub fn gtk_widget_get_accessible(widget: *mut GtkWidget) -> *mut atk::AtkObject;
    #[cfg(gtk_3_16)]
    pub fn gtk_widget_get_action_group(widget: *mut GtkWidget, prefix: *const c_char) -> *mut gio::GActionGroup;
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_get_allocated_baseline(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocated_height(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocated_width(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_allocation(widget: *mut GtkWidget, allocation: *mut GtkAllocation);
    pub fn gtk_widget_get_ancestor(widget: *mut GtkWidget, widget_type: GType) -> *mut GtkWidget;
    pub fn gtk_widget_get_app_paintable(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_can_default(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_can_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_child_requisition(widget: *mut GtkWidget, requisition: *mut GtkRequisition);
    pub fn gtk_widget_get_child_visible(widget: *mut GtkWidget) -> gboolean;
    #[cfg(gtk_3_14)]
    pub fn gtk_widget_get_clip(widget: *mut GtkWidget, clip: *mut GtkAllocation);
    pub fn gtk_widget_get_clipboard(widget: *mut GtkWidget, selection: gdk::GdkAtom) -> *mut GtkClipboard;
    pub fn gtk_widget_get_composite_name(widget: *mut GtkWidget) -> *mut c_char;
    pub fn gtk_widget_get_device_enabled(widget: *mut GtkWidget, device: *mut gdk::GdkDevice) -> gboolean;
    pub fn gtk_widget_get_device_events(widget: *mut GtkWidget, device: *mut gdk::GdkDevice) -> gdk::GdkEventMask;
    pub fn gtk_widget_get_direction(widget: *mut GtkWidget) -> GtkTextDirection;
    pub fn gtk_widget_get_display(widget: *mut GtkWidget) -> *mut gdk::GdkDisplay;
    pub fn gtk_widget_get_double_buffered(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_events(widget: *mut GtkWidget) -> c_int;
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_get_frame_clock(widget: *mut GtkWidget) -> *mut gdk::GdkFrameClock;
    pub fn gtk_widget_get_halign(widget: *mut GtkWidget) -> GtkAlign;
    pub fn gtk_widget_get_has_tooltip(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_has_window(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_hexpand(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_hexpand_set(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_mapped(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_margin_bottom(widget: *mut GtkWidget) -> c_int;
    #[cfg(gtk_3_12)]
    pub fn gtk_widget_get_margin_end(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_margin_left(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_margin_right(widget: *mut GtkWidget) -> c_int;
    #[cfg(gtk_3_12)]
    pub fn gtk_widget_get_margin_start(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_margin_top(widget: *mut GtkWidget) -> c_int;
    #[cfg(gtk_3_4)]
    pub fn gtk_widget_get_modifier_mask(widget: *mut GtkWidget, intent: gdk::GdkModifierIntent) -> gdk::GdkModifierType;
    pub fn gtk_widget_get_modifier_style(widget: *mut GtkWidget) -> *mut GtkRcStyle;
    pub fn gtk_widget_get_name(widget: *mut GtkWidget) -> *const c_char;
    pub fn gtk_widget_get_no_show_all(widget: *mut GtkWidget) -> gboolean;
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_get_opacity(widget: *mut GtkWidget) -> c_double;
    pub fn gtk_widget_get_pango_context(widget: *mut GtkWidget) -> *mut pango::PangoContext;
    pub fn gtk_widget_get_parent(widget: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_widget_get_parent_window(widget: *mut GtkWidget) -> *mut gdk::GdkWindow;
    pub fn gtk_widget_get_path(widget: *mut GtkWidget) -> *mut GtkWidgetPath;
    pub fn gtk_widget_get_pointer(widget: *mut GtkWidget, x: *mut c_int, y: *mut c_int);
    pub fn gtk_widget_get_preferred_height(widget: *mut GtkWidget, minimum_height: *mut c_int, natural_height: *mut c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_get_preferred_height_and_baseline_for_width(widget: *mut GtkWidget, width: c_int, minimum_height: *mut c_int, natural_height: *mut c_int, minimum_baseline: *mut c_int, natural_baseline: *mut c_int);
    pub fn gtk_widget_get_preferred_height_for_width(widget: *mut GtkWidget, width: c_int, minimum_height: *mut c_int, natural_height: *mut c_int);
    pub fn gtk_widget_get_preferred_size(widget: *mut GtkWidget, minimum_size: *mut GtkRequisition, natural_size: *mut GtkRequisition);
    pub fn gtk_widget_get_preferred_width(widget: *mut GtkWidget, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_widget_get_preferred_width_for_height(widget: *mut GtkWidget, height: c_int, minimum_width: *mut c_int, natural_width: *mut c_int);
    pub fn gtk_widget_get_realized(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_receives_default(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_request_mode(widget: *mut GtkWidget) -> GtkSizeRequestMode;
    pub fn gtk_widget_get_requisition(widget: *mut GtkWidget, requisition: *mut GtkRequisition);
    pub fn gtk_widget_get_root_window(widget: *mut GtkWidget) -> *mut gdk::GdkWindow;
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_get_scale_factor(widget: *mut GtkWidget) -> c_int;
    pub fn gtk_widget_get_screen(widget: *mut GtkWidget) -> *mut gdk::GdkScreen;
    pub fn gtk_widget_get_sensitive(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_settings(widget: *mut GtkWidget) -> *mut GtkSettings;
    pub fn gtk_widget_get_size_request(widget: *mut GtkWidget, width: *mut c_int, height: *mut c_int);
    pub fn gtk_widget_get_state(widget: *mut GtkWidget) -> GtkStateType;
    pub fn gtk_widget_get_state_flags(widget: *mut GtkWidget) -> GtkStateFlags;
    pub fn gtk_widget_get_style(widget: *mut GtkWidget) -> *mut GtkStyle;
    pub fn gtk_widget_get_style_context(widget: *mut GtkWidget) -> *mut GtkStyleContext;
    pub fn gtk_widget_get_support_multidevice(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_template_child(widget: *mut GtkWidget, widget_type: GType, name: *const c_char) -> *mut gobject::GObject;
    pub fn gtk_widget_get_tooltip_markup(widget: *mut GtkWidget) -> *mut c_char;
    pub fn gtk_widget_get_tooltip_text(widget: *mut GtkWidget) -> *mut c_char;
    pub fn gtk_widget_get_tooltip_window(widget: *mut GtkWidget) -> *mut GtkWindow;
    pub fn gtk_widget_get_toplevel(widget: *mut GtkWidget) -> *mut GtkWidget;
    pub fn gtk_widget_get_valign(widget: *mut GtkWidget) -> GtkAlign;
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_get_valign_with_baseline(widget: *mut GtkWidget) -> GtkAlign;
    pub fn gtk_widget_get_vexpand(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_vexpand_set(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_visible(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_get_visual(widget: *mut GtkWidget) -> *mut gdk::GdkVisual;
    pub fn gtk_widget_get_window(widget: *mut GtkWidget) -> *mut gdk::GdkWindow;
    pub fn gtk_grab_add(widget: *mut GtkWidget);
    pub fn gtk_widget_grab_default(widget: *mut GtkWidget);
    pub fn gtk_widget_grab_focus(widget: *mut GtkWidget);
    pub fn gtk_grab_remove(widget: *mut GtkWidget);
    pub fn gtk_widget_has_default(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_grab(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_rc_style(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_screen(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_has_visible_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_hide(widget: *mut GtkWidget);
    pub fn gtk_widget_hide_on_delete(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_in_destruction(widget: *mut GtkWidget) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_init_template(widget: *mut GtkWidget);
    pub fn gtk_widget_input_shape_combine_region(widget: *mut GtkWidget, region: *mut cairo::cairo_region_t);
    #[cfg(gtk_3_6)]
    pub fn gtk_widget_insert_action_group(widget: *mut GtkWidget, name: *const c_char, group: *mut gio::GActionGroup);
    pub fn gtk_widget_intersect(widget: *mut GtkWidget, area: *const gdk::GdkRectangle, intersection: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gtk_widget_is_ancestor(widget: *mut GtkWidget, ancestor: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_composited(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_drawable(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_focus(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_sensitive(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_is_toplevel(widget: *mut GtkWidget) -> gboolean;
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_is_visible(widget: *mut GtkWidget) -> gboolean;
    pub fn gtk_widget_keynav_failed(widget: *mut GtkWidget, direction: GtkDirectionType) -> gboolean;
    pub fn gtk_widget_list_accel_closures(widget: *mut GtkWidget) -> *mut glib::GList;
    #[cfg(gtk_3_16)]
    pub fn gtk_widget_list_action_prefixes(widget: *mut GtkWidget) -> *mut *const c_char;
    pub fn gtk_widget_list_mnemonic_labels(widget: *mut GtkWidget) -> *mut glib::GList;
    pub fn gtk_widget_map(widget: *mut GtkWidget);
    pub fn gtk_widget_mnemonic_activate(widget: *mut GtkWidget, group_cycling: gboolean) -> gboolean;
    pub fn gtk_widget_modify_base(widget: *mut GtkWidget, state: GtkStateType, color: *const gdk::GdkColor);
    pub fn gtk_widget_modify_bg(widget: *mut GtkWidget, state: GtkStateType, color: *const gdk::GdkColor);
    pub fn gtk_widget_modify_cursor(widget: *mut GtkWidget, primary: *const gdk::GdkColor, secondary: *const gdk::GdkColor);
    pub fn gtk_widget_modify_fg(widget: *mut GtkWidget, state: GtkStateType, color: *const gdk::GdkColor);
    pub fn gtk_widget_modify_font(widget: *mut GtkWidget, font_desc: *mut pango::PangoFontDescription);
    pub fn gtk_widget_modify_style(widget: *mut GtkWidget, style: *mut GtkRcStyle);
    pub fn gtk_widget_modify_text(widget: *mut GtkWidget, state: GtkStateType, color: *const gdk::GdkColor);
    pub fn gtk_widget_override_background_color(widget: *mut GtkWidget, state: GtkStateFlags, color: *const gdk::GdkRGBA);
    pub fn gtk_widget_override_color(widget: *mut GtkWidget, state: GtkStateFlags, color: *const gdk::GdkRGBA);
    pub fn gtk_widget_override_cursor(widget: *mut GtkWidget, cursor: *const gdk::GdkRGBA, secondary_cursor: *const gdk::GdkRGBA);
    pub fn gtk_widget_override_font(widget: *mut GtkWidget, font_desc: *const pango::PangoFontDescription);
    pub fn gtk_widget_override_symbolic_color(widget: *mut GtkWidget, name: *const c_char, color: *const gdk::GdkRGBA);
    pub fn gtk_widget_path(widget: *mut GtkWidget, path_length: *mut c_uint, path: *mut *mut c_char, path_reversed: *mut *mut c_char);
    pub fn gtk_widget_queue_compute_expand(widget: *mut GtkWidget);
    pub fn gtk_widget_queue_draw(widget: *mut GtkWidget);
    pub fn gtk_widget_queue_draw_area(widget: *mut GtkWidget, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_widget_queue_draw_region(widget: *mut GtkWidget, region: *const cairo::cairo_region_t);
    pub fn gtk_widget_queue_resize(widget: *mut GtkWidget);
    pub fn gtk_widget_queue_resize_no_redraw(widget: *mut GtkWidget);
    pub fn gtk_widget_realize(widget: *mut GtkWidget);
    pub fn gtk_widget_region_intersect(widget: *mut GtkWidget, region: *const cairo::cairo_region_t) -> *mut cairo::cairo_region_t;
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_register_window(widget: *mut GtkWidget, window: *mut gdk::GdkWindow);
    pub fn gtk_widget_remove_accelerator(widget: *mut GtkWidget, accel_group: *mut GtkAccelGroup, accel_key: c_uint, accel_mods: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_widget_remove_mnemonic_label(widget: *mut GtkWidget, label: *mut GtkWidget);
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_remove_tick_callback(widget: *mut GtkWidget, id: c_uint);
    pub fn gtk_widget_render_icon(widget: *mut GtkWidget, stock_id: *const c_char, size: c_int, detail: *const c_char) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_widget_render_icon_pixbuf(widget: *mut GtkWidget, stock_id: *const c_char, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_widget_reparent(widget: *mut GtkWidget, new_parent: *mut GtkWidget);
    pub fn gtk_widget_reset_rc_styles(widget: *mut GtkWidget);
    pub fn gtk_widget_reset_style(widget: *mut GtkWidget);
    pub fn gtk_widget_send_expose(widget: *mut GtkWidget, event: *mut gdk::GdkEvent) -> c_int;
    pub fn gtk_widget_send_focus_change(widget: *mut GtkWidget, event: *mut gdk::GdkEvent) -> gboolean;
    pub fn gtk_widget_set_accel_path(widget: *mut GtkWidget, accel_path: *const c_char, accel_group: *mut GtkAccelGroup);
    pub fn gtk_widget_set_allocation(widget: *mut GtkWidget, allocation: *const GtkAllocation);
    pub fn gtk_widget_set_app_paintable(widget: *mut GtkWidget, app_paintable: gboolean);
    pub fn gtk_widget_set_can_default(widget: *mut GtkWidget, can_default: gboolean);
    pub fn gtk_widget_set_can_focus(widget: *mut GtkWidget, can_focus: gboolean);
    pub fn gtk_widget_set_child_visible(widget: *mut GtkWidget, is_visible: gboolean);
    #[cfg(gtk_3_14)]
    pub fn gtk_widget_set_clip(widget: *mut GtkWidget, clip: *const GtkAllocation);
    pub fn gtk_widget_set_composite_name(widget: *mut GtkWidget, name: *const c_char);
    pub fn gtk_widget_set_device_enabled(widget: *mut GtkWidget, device: *mut gdk::GdkDevice, enabled: gboolean);
    pub fn gtk_widget_set_device_events(widget: *mut GtkWidget, device: *mut gdk::GdkDevice, events: gdk::GdkEventMask);
    pub fn gtk_widget_set_direction(widget: *mut GtkWidget, dir: GtkTextDirection);
    pub fn gtk_widget_set_double_buffered(widget: *mut GtkWidget, double_buffered: gboolean);
    pub fn gtk_widget_set_events(widget: *mut GtkWidget, events: c_int);
    pub fn gtk_widget_set_halign(widget: *mut GtkWidget, align: GtkAlign);
    pub fn gtk_widget_set_has_tooltip(widget: *mut GtkWidget, has_tooltip: gboolean);
    pub fn gtk_widget_set_has_window(widget: *mut GtkWidget, has_window: gboolean);
    pub fn gtk_widget_set_hexpand(widget: *mut GtkWidget, expand: gboolean);
    pub fn gtk_widget_set_hexpand_set(widget: *mut GtkWidget, set: gboolean);
    pub fn gtk_widget_set_mapped(widget: *mut GtkWidget, mapped: gboolean);
    pub fn gtk_widget_set_margin_bottom(widget: *mut GtkWidget, margin: c_int);
    #[cfg(gtk_3_12)]
    pub fn gtk_widget_set_margin_end(widget: *mut GtkWidget, margin: c_int);
    pub fn gtk_widget_set_margin_left(widget: *mut GtkWidget, margin: c_int);
    pub fn gtk_widget_set_margin_right(widget: *mut GtkWidget, margin: c_int);
    #[cfg(gtk_3_12)]
    pub fn gtk_widget_set_margin_start(widget: *mut GtkWidget, margin: c_int);
    pub fn gtk_widget_set_margin_top(widget: *mut GtkWidget, margin: c_int);
    pub fn gtk_widget_set_name(widget: *mut GtkWidget, name: *const c_char);
    pub fn gtk_widget_set_no_show_all(widget: *mut GtkWidget, no_show_all: gboolean);
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_set_opacity(widget: *mut GtkWidget, opacity: c_double);
    pub fn gtk_widget_set_parent(widget: *mut GtkWidget, parent: *mut GtkWidget);
    pub fn gtk_widget_set_parent_window(widget: *mut GtkWidget, parent_window: *mut gdk::GdkWindow);
    pub fn gtk_widget_set_realized(widget: *mut GtkWidget, realized: gboolean);
    pub fn gtk_widget_set_receives_default(widget: *mut GtkWidget, receives_default: gboolean);
    pub fn gtk_widget_set_redraw_on_allocate(widget: *mut GtkWidget, redraw_on_allocate: gboolean);
    pub fn gtk_widget_set_sensitive(widget: *mut GtkWidget, sensitive: gboolean);
    pub fn gtk_widget_set_size_request(widget: *mut GtkWidget, width: c_int, height: c_int);
    pub fn gtk_widget_set_state(widget: *mut GtkWidget, state: GtkStateType);
    pub fn gtk_widget_set_state_flags(widget: *mut GtkWidget, flags: GtkStateFlags, clear: gboolean);
    pub fn gtk_widget_set_style(widget: *mut GtkWidget, style: *mut GtkStyle);
    pub fn gtk_widget_set_support_multidevice(widget: *mut GtkWidget, support_multidevice: gboolean);
    pub fn gtk_widget_set_tooltip_markup(widget: *mut GtkWidget, markup: *const c_char);
    pub fn gtk_widget_set_tooltip_text(widget: *mut GtkWidget, text: *const c_char);
    pub fn gtk_widget_set_tooltip_window(widget: *mut GtkWidget, custom_window: *mut GtkWindow);
    pub fn gtk_widget_set_valign(widget: *mut GtkWidget, align: GtkAlign);
    pub fn gtk_widget_set_vexpand(widget: *mut GtkWidget, expand: gboolean);
    pub fn gtk_widget_set_vexpand_set(widget: *mut GtkWidget, set: gboolean);
    pub fn gtk_widget_set_visible(widget: *mut GtkWidget, visible: gboolean);
    pub fn gtk_widget_set_visual(widget: *mut GtkWidget, visual: *mut gdk::GdkVisual);
    pub fn gtk_widget_set_window(widget: *mut GtkWidget, window: *mut gdk::GdkWindow);
    pub fn gtk_widget_shape_combine_region(widget: *mut GtkWidget, region: *mut cairo::cairo_region_t);
    pub fn gtk_widget_show(widget: *mut GtkWidget);
    pub fn gtk_widget_show_all(widget: *mut GtkWidget);
    pub fn gtk_widget_show_now(widget: *mut GtkWidget);
    pub fn gtk_widget_size_allocate(widget: *mut GtkWidget, allocation: *mut GtkAllocation);
    #[cfg(gtk_3_10)]
    pub fn gtk_widget_size_allocate_with_baseline(widget: *mut GtkWidget, allocation: *mut GtkAllocation, baseline: c_int);
    pub fn gtk_widget_size_request(widget: *mut GtkWidget, requisition: *mut GtkRequisition);
    pub fn gtk_widget_style_attach(widget: *mut GtkWidget);
    pub fn gtk_widget_style_get(widget: *mut GtkWidget, first_property_name: *const c_char, ...);
    pub fn gtk_widget_style_get_property(widget: *mut GtkWidget, property_name: *const c_char, value: *mut gobject::GValue);
    //pub fn gtk_widget_style_get_valist(widget: *mut GtkWidget, first_property_name: *const c_char, var_args: [Unsupported type va_list]);
    pub fn gtk_widget_thaw_child_notify(widget: *mut GtkWidget);
    pub fn gtk_widget_translate_coordinates(src_widget: *mut GtkWidget, dest_widget: *mut GtkWidget, src_x: c_int, src_y: c_int, dest_x: *mut c_int, dest_y: *mut c_int) -> gboolean;
    pub fn gtk_widget_trigger_tooltip_query(widget: *mut GtkWidget);
    pub fn gtk_widget_unmap(widget: *mut GtkWidget);
    pub fn gtk_widget_unparent(widget: *mut GtkWidget);
    pub fn gtk_widget_unrealize(widget: *mut GtkWidget);
    #[cfg(gtk_3_8)]
    pub fn gtk_widget_unregister_window(widget: *mut GtkWidget, window: *mut gdk::GdkWindow);
    pub fn gtk_widget_unset_state_flags(widget: *mut GtkWidget, flags: GtkStateFlags);

    //=========================================================================
    // GtkWidgetAccessible
    //=========================================================================
    pub fn gtk_widget_accessible_get_type() -> GType;

    //=========================================================================
    // GtkWindow
    //=========================================================================
    pub fn gtk_window_get_type() -> GType;
    pub fn gtk_window_new(type_: GtkWindowType) -> *mut GtkWidget;
    pub fn gtk_window_get_default_icon_list() -> *mut glib::GList;
    pub fn gtk_window_get_default_icon_name() -> *const c_char;
    pub fn gtk_window_list_toplevels() -> *mut glib::GList;
    pub fn gtk_window_set_auto_startup_notification(setting: gboolean);
    pub fn gtk_window_set_default_icon(icon: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_window_set_default_icon_from_file(filename: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_window_set_default_icon_list(list: *mut glib::GList);
    pub fn gtk_window_set_default_icon_name(name: *const c_char);
    #[cfg(gtk_3_14)]
    pub fn gtk_window_set_interactive_debugging(enable: gboolean);
    pub fn gtk_window_activate_default(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_activate_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_activate_key(window: *mut GtkWindow, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_window_add_accel_group(window: *mut GtkWindow, accel_group: *mut GtkAccelGroup);
    pub fn gtk_window_add_mnemonic(window: *mut GtkWindow, keyval: c_uint, target: *mut GtkWidget);
    pub fn gtk_window_begin_move_drag(window: *mut GtkWindow, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    pub fn gtk_window_begin_resize_drag(window: *mut GtkWindow, edge: gdk::GdkWindowEdge, button: c_int, root_x: c_int, root_y: c_int, timestamp: u32);
    #[cfg(gtk_3_10)]
    pub fn gtk_window_close(window: *mut GtkWindow);
    pub fn gtk_window_deiconify(window: *mut GtkWindow);
    pub fn gtk_window_fullscreen(window: *mut GtkWindow);
    pub fn gtk_window_get_accept_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_application(window: *mut GtkWindow) -> *mut GtkApplication;
    #[cfg(gtk_3_4)]
    pub fn gtk_window_get_attached_to(window: *mut GtkWindow) -> *mut GtkWidget;
    pub fn gtk_window_get_decorated(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_default_size(window: *mut GtkWindow, width: *mut c_int, height: *mut c_int);
    pub fn gtk_window_get_default_widget(window: *mut GtkWindow) -> *mut GtkWidget;
    pub fn gtk_window_get_deletable(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_destroy_with_parent(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_focus(window: *mut GtkWindow) -> *mut GtkWidget;
    pub fn gtk_window_get_focus_on_map(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_focus_visible(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_gravity(window: *mut GtkWindow) -> gdk::GdkGravity;
    pub fn gtk_window_get_group(window: *mut GtkWindow) -> *mut GtkWindowGroup;
    pub fn gtk_window_get_has_resize_grip(window: *mut GtkWindow) -> gboolean;
    #[cfg(gtk_3_4)]
    pub fn gtk_window_get_hide_titlebar_when_maximized(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_icon(window: *mut GtkWindow) -> *mut gdk_pixbuf::GdkPixbuf;
    pub fn gtk_window_get_icon_list(window: *mut GtkWindow) -> *mut glib::GList;
    pub fn gtk_window_get_icon_name(window: *mut GtkWindow) -> *const c_char;
    pub fn gtk_window_get_mnemonic_modifier(window: *mut GtkWindow) -> gdk::GdkModifierType;
    pub fn gtk_window_get_mnemonics_visible(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_modal(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_opacity(window: *mut GtkWindow) -> c_double;
    pub fn gtk_window_get_position(window: *mut GtkWindow, root_x: *mut c_int, root_y: *mut c_int);
    pub fn gtk_window_get_resizable(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_resize_grip_area(window: *mut GtkWindow, rect: *mut gdk::GdkRectangle) -> gboolean;
    pub fn gtk_window_get_role(window: *mut GtkWindow) -> *const c_char;
    pub fn gtk_window_get_screen(window: *mut GtkWindow) -> *mut gdk::GdkScreen;
    pub fn gtk_window_get_size(window: *mut GtkWindow, width: *mut c_int, height: *mut c_int);
    pub fn gtk_window_get_skip_pager_hint(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_skip_taskbar_hint(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_title(window: *mut GtkWindow) -> *const c_char;
    #[cfg(gtk_3_16)]
    pub fn gtk_window_get_titlebar(window: *mut GtkWindow) -> *mut GtkWidget;
    pub fn gtk_window_get_transient_for(window: *mut GtkWindow) -> *mut GtkWindow;
    pub fn gtk_window_get_type_hint(window: *mut GtkWindow) -> gdk::GdkWindowTypeHint;
    pub fn gtk_window_get_urgency_hint(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_get_window_type(window: *mut GtkWindow) -> GtkWindowType;
    pub fn gtk_window_has_group(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_has_toplevel_focus(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_iconify(window: *mut GtkWindow);
    pub fn gtk_window_is_active(window: *mut GtkWindow) -> gboolean;
    #[cfg(gtk_3_12)]
    pub fn gtk_window_is_maximized(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_maximize(window: *mut GtkWindow);
    pub fn gtk_window_mnemonic_activate(window: *mut GtkWindow, keyval: c_uint, modifier: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_window_move(window: *mut GtkWindow, x: c_int, y: c_int);
    pub fn gtk_window_parse_geometry(window: *mut GtkWindow, geometry: *const c_char) -> gboolean;
    pub fn gtk_window_present(window: *mut GtkWindow);
    pub fn gtk_window_present_with_time(window: *mut GtkWindow, timestamp: u32);
    pub fn gtk_window_propagate_key_event(window: *mut GtkWindow, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_window_remove_accel_group(window: *mut GtkWindow, accel_group: *mut GtkAccelGroup);
    pub fn gtk_window_remove_mnemonic(window: *mut GtkWindow, keyval: c_uint, target: *mut GtkWidget);
    pub fn gtk_window_reshow_with_initial_size(window: *mut GtkWindow);
    pub fn gtk_window_resize(window: *mut GtkWindow, width: c_int, height: c_int);
    pub fn gtk_window_resize_grip_is_visible(window: *mut GtkWindow) -> gboolean;
    pub fn gtk_window_resize_to_geometry(window: *mut GtkWindow, width: c_int, height: c_int);
    pub fn gtk_window_set_accept_focus(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_application(window: *mut GtkWindow, application: *mut GtkApplication);
    #[cfg(gtk_3_4)]
    pub fn gtk_window_set_attached_to(window: *mut GtkWindow, attach_widget: *mut GtkWidget);
    pub fn gtk_window_set_decorated(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_default(window: *mut GtkWindow, default_widget: *mut GtkWidget);
    pub fn gtk_window_set_default_geometry(window: *mut GtkWindow, width: c_int, height: c_int);
    pub fn gtk_window_set_default_size(window: *mut GtkWindow, width: c_int, height: c_int);
    pub fn gtk_window_set_deletable(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_destroy_with_parent(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_focus(window: *mut GtkWindow, focus: *mut GtkWidget);
    pub fn gtk_window_set_focus_on_map(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_focus_visible(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_geometry_hints(window: *mut GtkWindow, geometry_widget: *mut GtkWidget, geometry: *mut gdk::GdkGeometry, geom_mask: gdk::GdkWindowHints);
    pub fn gtk_window_set_gravity(window: *mut GtkWindow, gravity: gdk::GdkGravity);
    pub fn gtk_window_set_has_resize_grip(window: *mut GtkWindow, value: gboolean);
    pub fn gtk_window_set_has_user_ref_count(window: *mut GtkWindow, setting: gboolean);
    #[cfg(gtk_3_4)]
    pub fn gtk_window_set_hide_titlebar_when_maximized(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_icon(window: *mut GtkWindow, icon: *mut gdk_pixbuf::GdkPixbuf);
    pub fn gtk_window_set_icon_from_file(window: *mut GtkWindow, filename: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_window_set_icon_list(window: *mut GtkWindow, list: *mut glib::GList);
    pub fn gtk_window_set_icon_name(window: *mut GtkWindow, name: *const c_char);
    pub fn gtk_window_set_keep_above(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_keep_below(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_mnemonic_modifier(window: *mut GtkWindow, modifier: gdk::GdkModifierType);
    pub fn gtk_window_set_mnemonics_visible(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_modal(window: *mut GtkWindow, modal: gboolean);
    pub fn gtk_window_set_opacity(window: *mut GtkWindow, opacity: c_double);
    pub fn gtk_window_set_position(window: *mut GtkWindow, position: GtkWindowPosition);
    pub fn gtk_window_set_resizable(window: *mut GtkWindow, resizable: gboolean);
    pub fn gtk_window_set_role(window: *mut GtkWindow, role: *const c_char);
    pub fn gtk_window_set_screen(window: *mut GtkWindow, screen: *mut gdk::GdkScreen);
    pub fn gtk_window_set_skip_pager_hint(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_skip_taskbar_hint(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_startup_id(window: *mut GtkWindow, startup_id: *const c_char);
    pub fn gtk_window_set_title(window: *mut GtkWindow, title: *const c_char);
    #[cfg(gtk_3_10)]
    pub fn gtk_window_set_titlebar(window: *mut GtkWindow, titlebar: *mut GtkWidget);
    pub fn gtk_window_set_transient_for(window: *mut GtkWindow, parent: *mut GtkWindow);
    pub fn gtk_window_set_type_hint(window: *mut GtkWindow, hint: gdk::GdkWindowTypeHint);
    pub fn gtk_window_set_urgency_hint(window: *mut GtkWindow, setting: gboolean);
    pub fn gtk_window_set_wmclass(window: *mut GtkWindow, wmclass_name: *const c_char, wmclass_class: *const c_char);
    pub fn gtk_window_stick(window: *mut GtkWindow);
    pub fn gtk_window_unfullscreen(window: *mut GtkWindow);
    pub fn gtk_window_unmaximize(window: *mut GtkWindow);
    pub fn gtk_window_unstick(window: *mut GtkWindow);

    //=========================================================================
    // GtkWindowAccessible
    //=========================================================================
    pub fn gtk_window_accessible_get_type() -> GType;

    //=========================================================================
    // GtkWindowGroup
    //=========================================================================
    pub fn gtk_window_group_get_type() -> GType;
    pub fn gtk_window_group_new() -> *mut GtkWindowGroup;
    pub fn gtk_window_group_add_window(window_group: *mut GtkWindowGroup, window: *mut GtkWindow);
    pub fn gtk_window_group_get_current_device_grab(window_group: *mut GtkWindowGroup, device: *mut gdk::GdkDevice) -> *mut GtkWidget;
    pub fn gtk_window_group_get_current_grab(window_group: *mut GtkWindowGroup) -> *mut GtkWidget;
    pub fn gtk_window_group_list_windows(window_group: *mut GtkWindowGroup) -> *mut glib::GList;
    pub fn gtk_window_group_remove_window(window_group: *mut GtkWindowGroup, window: *mut GtkWindow);

    //=========================================================================
    // GtkActionable
    //=========================================================================
    pub fn gtk_actionable_get_type() -> GType;
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_get_action_name(actionable: *mut GtkActionable) -> *const c_char;
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_get_action_target_value(actionable: *mut GtkActionable) -> *mut glib::GVariant;
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_set_action_name(actionable: *mut GtkActionable, action_name: *const c_char);
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_set_action_target(actionable: *mut GtkActionable, format_string: *const c_char, ...);
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_set_action_target_value(actionable: *mut GtkActionable, target_value: *mut glib::GVariant);
    #[cfg(gtk_3_4)]
    pub fn gtk_actionable_set_detailed_action_name(actionable: *mut GtkActionable, detailed_action_name: *const c_char);

    //=========================================================================
    // GtkActivatable
    //=========================================================================
    pub fn gtk_activatable_get_type() -> GType;
    pub fn gtk_activatable_do_set_related_action(activatable: *mut GtkActivatable, action: *mut GtkAction);
    pub fn gtk_activatable_get_related_action(activatable: *mut GtkActivatable) -> *mut GtkAction;
    pub fn gtk_activatable_get_use_action_appearance(activatable: *mut GtkActivatable) -> gboolean;
    pub fn gtk_activatable_set_related_action(activatable: *mut GtkActivatable, action: *mut GtkAction);
    pub fn gtk_activatable_set_use_action_appearance(activatable: *mut GtkActivatable, use_appearance: gboolean);
    pub fn gtk_activatable_sync_action_properties(activatable: *mut GtkActivatable, action: *mut GtkAction);

    //=========================================================================
    // GtkAppChooser
    //=========================================================================
    pub fn gtk_app_chooser_get_type() -> GType;
    pub fn gtk_app_chooser_get_app_info(self_: *mut GtkAppChooser) -> *mut gio::GAppInfo;
    pub fn gtk_app_chooser_get_content_type(self_: *mut GtkAppChooser) -> *mut c_char;
    pub fn gtk_app_chooser_refresh(self_: *mut GtkAppChooser);

    //=========================================================================
    // GtkBuildable
    //=========================================================================
    pub fn gtk_buildable_get_type() -> GType;
    pub fn gtk_buildable_add_child(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, child: *mut gobject::GObject, type_: *const c_char);
    pub fn gtk_buildable_construct_child(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, name: *const c_char) -> *mut gobject::GObject;
    pub fn gtk_buildable_custom_finished(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, child: *mut gobject::GObject, tagname: *const c_char, data: gpointer);
    pub fn gtk_buildable_custom_tag_end(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, child: *mut gobject::GObject, tagname: *const c_char, data: *mut gpointer);
    pub fn gtk_buildable_custom_tag_start(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, child: *mut gobject::GObject, tagname: *const c_char, parser: *mut glib::GMarkupParser, data: *mut gpointer) -> gboolean;
    pub fn gtk_buildable_get_internal_child(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, childname: *const c_char) -> *mut gobject::GObject;
    pub fn gtk_buildable_get_name(buildable: *mut GtkBuildable) -> *const c_char;
    pub fn gtk_buildable_parser_finished(buildable: *mut GtkBuildable, builder: *mut GtkBuilder);
    pub fn gtk_buildable_set_buildable_property(buildable: *mut GtkBuildable, builder: *mut GtkBuilder, name: *const c_char, value: *const gobject::GValue);
    pub fn gtk_buildable_set_name(buildable: *mut GtkBuildable, name: *const c_char);

    //=========================================================================
    // GtkCellAccessibleParent
    //=========================================================================
    pub fn gtk_cell_accessible_parent_get_type() -> GType;
    pub fn gtk_cell_accessible_parent_activate(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible);
    pub fn gtk_cell_accessible_parent_edit(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible);
    pub fn gtk_cell_accessible_parent_expand_collapse(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible);
    pub fn gtk_cell_accessible_parent_get_cell_area(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible, cell_rect: *mut gdk::GdkRectangle);
    pub fn gtk_cell_accessible_parent_get_cell_extents(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible, x: *mut c_int, y: *mut c_int, width: *mut c_int, height: *mut c_int, coord_type: atk::AtkCoordType);
    pub fn gtk_cell_accessible_parent_get_child_index(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible) -> c_int;
    pub fn gtk_cell_accessible_parent_get_renderer_state(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible) -> GtkCellRendererState;
    pub fn gtk_cell_accessible_parent_grab_focus(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible) -> gboolean;
    pub fn gtk_cell_accessible_parent_update_relationset(parent: *mut GtkCellAccessibleParent, cell: *mut GtkCellAccessible, relationset: *mut atk::AtkRelationSet);

    //=========================================================================
    // GtkCellEditable
    //=========================================================================
    pub fn gtk_cell_editable_get_type() -> GType;
    pub fn gtk_cell_editable_editing_done(cell_editable: *mut GtkCellEditable);
    pub fn gtk_cell_editable_remove_widget(cell_editable: *mut GtkCellEditable);
    pub fn gtk_cell_editable_start_editing(cell_editable: *mut GtkCellEditable, event: *mut gdk::GdkEvent);

    //=========================================================================
    // GtkCellLayout
    //=========================================================================
    pub fn gtk_cell_layout_get_type() -> GType;
    pub fn gtk_cell_layout_add_attribute(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, attribute: *const c_char, column: c_int);
    pub fn gtk_cell_layout_clear(cell_layout: *mut GtkCellLayout);
    pub fn gtk_cell_layout_clear_attributes(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer);
    pub fn gtk_cell_layout_get_area(cell_layout: *mut GtkCellLayout) -> *mut GtkCellArea;
    pub fn gtk_cell_layout_get_cells(cell_layout: *mut GtkCellLayout) -> *mut glib::GList;
    pub fn gtk_cell_layout_pack_end(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, expand: gboolean);
    pub fn gtk_cell_layout_pack_start(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, expand: gboolean);
    pub fn gtk_cell_layout_reorder(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, position: c_int);
    pub fn gtk_cell_layout_set_attributes(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, ...);
    pub fn gtk_cell_layout_set_cell_data_func(cell_layout: *mut GtkCellLayout, cell: *mut GtkCellRenderer, func: GtkCellLayoutDataFunc, func_data: gpointer, destroy: glib::GDestroyNotify);

    //=========================================================================
    // GtkColorChooser
    //=========================================================================
    pub fn gtk_color_chooser_get_type() -> GType;
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_add_palette(chooser: *mut GtkColorChooser, orientation: GtkOrientation, colors_per_line: c_int, n_colors: c_int, colors: *mut gdk::GdkRGBA);
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_get_rgba(chooser: *mut GtkColorChooser, color: *mut gdk::GdkRGBA);
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_get_use_alpha(chooser: *mut GtkColorChooser) -> gboolean;
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_set_rgba(chooser: *mut GtkColorChooser, color: *const gdk::GdkRGBA);
    #[cfg(gtk_3_4)]
    pub fn gtk_color_chooser_set_use_alpha(chooser: *mut GtkColorChooser, use_alpha: gboolean);

    //=========================================================================
    // GtkEditable
    //=========================================================================
    pub fn gtk_editable_get_type() -> GType;
    pub fn gtk_editable_copy_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_cut_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_delete_selection(editable: *mut GtkEditable);
    pub fn gtk_editable_delete_text(editable: *mut GtkEditable, start_pos: c_int, end_pos: c_int);
    pub fn gtk_editable_get_chars(editable: *mut GtkEditable, start_pos: c_int, end_pos: c_int) -> *mut c_char;
    pub fn gtk_editable_get_editable(editable: *mut GtkEditable) -> gboolean;
    pub fn gtk_editable_get_position(editable: *mut GtkEditable) -> c_int;
    pub fn gtk_editable_get_selection_bounds(editable: *mut GtkEditable, start_pos: *mut c_int, end_pos: *mut c_int) -> gboolean;
    pub fn gtk_editable_insert_text(editable: *mut GtkEditable, new_text: *const c_char, new_text_length: c_int, position: *mut c_int);
    pub fn gtk_editable_paste_clipboard(editable: *mut GtkEditable);
    pub fn gtk_editable_select_region(editable: *mut GtkEditable, start_pos: c_int, end_pos: c_int);
    pub fn gtk_editable_set_editable(editable: *mut GtkEditable, is_editable: gboolean);
    pub fn gtk_editable_set_position(editable: *mut GtkEditable, position: c_int);

    //=========================================================================
    // GtkFileChooser
    //=========================================================================
    pub fn gtk_file_chooser_get_type() -> GType;
    pub fn gtk_file_chooser_add_filter(chooser: *mut GtkFileChooser, filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_add_shortcut_folder(chooser: *mut GtkFileChooser, folder: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_add_shortcut_folder_uri(chooser: *mut GtkFileChooser, uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_get_action(chooser: *mut GtkFileChooser) -> GtkFileChooserAction;
    pub fn gtk_file_chooser_get_create_folders(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_current_folder(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_current_folder_file(chooser: *mut GtkFileChooser) -> *mut gio::GFile;
    pub fn gtk_file_chooser_get_current_folder_uri(chooser: *mut GtkFileChooser) -> *mut c_char;
    #[cfg(gtk_3_10)]
    pub fn gtk_file_chooser_get_current_name(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_do_overwrite_confirmation(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_extra_widget(chooser: *mut GtkFileChooser) -> *mut GtkWidget;
    pub fn gtk_file_chooser_get_file(chooser: *mut GtkFileChooser) -> *mut gio::GFile;
    pub fn gtk_file_chooser_get_filename(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_filenames(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_get_files(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_get_filter(chooser: *mut GtkFileChooser) -> *mut GtkFileFilter;
    pub fn gtk_file_chooser_get_local_only(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_preview_file(chooser: *mut GtkFileChooser) -> *mut gio::GFile;
    pub fn gtk_file_chooser_get_preview_filename(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_preview_uri(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_preview_widget(chooser: *mut GtkFileChooser) -> *mut GtkWidget;
    pub fn gtk_file_chooser_get_preview_widget_active(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_select_multiple(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_show_hidden(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_get_uri(chooser: *mut GtkFileChooser) -> *mut c_char;
    pub fn gtk_file_chooser_get_uris(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_get_use_preview_label(chooser: *mut GtkFileChooser) -> gboolean;
    pub fn gtk_file_chooser_list_filters(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_list_shortcut_folder_uris(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_list_shortcut_folders(chooser: *mut GtkFileChooser) -> *mut glib::GSList;
    pub fn gtk_file_chooser_remove_filter(chooser: *mut GtkFileChooser, filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_remove_shortcut_folder(chooser: *mut GtkFileChooser, folder: *mut c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_remove_shortcut_folder_uri(chooser: *mut GtkFileChooser, uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_select_all(chooser: *mut GtkFileChooser);
    pub fn gtk_file_chooser_select_file(chooser: *mut GtkFileChooser, file: *mut gio::GFile, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_select_filename(chooser: *mut GtkFileChooser, filename: *mut c_char) -> gboolean;
    pub fn gtk_file_chooser_select_uri(chooser: *mut GtkFileChooser, uri: *const c_char) -> gboolean;
    pub fn gtk_file_chooser_set_action(chooser: *mut GtkFileChooser, action: GtkFileChooserAction);
    pub fn gtk_file_chooser_set_create_folders(chooser: *mut GtkFileChooser, create_folders: gboolean);
    pub fn gtk_file_chooser_set_current_folder(chooser: *mut GtkFileChooser, filename: *mut c_char) -> gboolean;
    pub fn gtk_file_chooser_set_current_folder_file(chooser: *mut GtkFileChooser, file: *mut gio::GFile, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_set_current_folder_uri(chooser: *mut GtkFileChooser, uri: *const c_char) -> gboolean;
    pub fn gtk_file_chooser_set_current_name(chooser: *mut GtkFileChooser, name: *mut c_char);
    pub fn gtk_file_chooser_set_do_overwrite_confirmation(chooser: *mut GtkFileChooser, do_overwrite_confirmation: gboolean);
    pub fn gtk_file_chooser_set_extra_widget(chooser: *mut GtkFileChooser, extra_widget: *mut GtkWidget);
    pub fn gtk_file_chooser_set_file(chooser: *mut GtkFileChooser, file: *mut gio::GFile, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_file_chooser_set_filename(chooser: *mut GtkFileChooser, filename: *mut c_char) -> gboolean;
    pub fn gtk_file_chooser_set_filter(chooser: *mut GtkFileChooser, filter: *mut GtkFileFilter);
    pub fn gtk_file_chooser_set_local_only(chooser: *mut GtkFileChooser, local_only: gboolean);
    pub fn gtk_file_chooser_set_preview_widget(chooser: *mut GtkFileChooser, preview_widget: *mut GtkWidget);
    pub fn gtk_file_chooser_set_preview_widget_active(chooser: *mut GtkFileChooser, active: gboolean);
    pub fn gtk_file_chooser_set_select_multiple(chooser: *mut GtkFileChooser, select_multiple: gboolean);
    pub fn gtk_file_chooser_set_show_hidden(chooser: *mut GtkFileChooser, show_hidden: gboolean);
    pub fn gtk_file_chooser_set_uri(chooser: *mut GtkFileChooser, uri: *const c_char) -> gboolean;
    pub fn gtk_file_chooser_set_use_preview_label(chooser: *mut GtkFileChooser, use_label: gboolean);
    pub fn gtk_file_chooser_unselect_all(chooser: *mut GtkFileChooser);
    pub fn gtk_file_chooser_unselect_file(chooser: *mut GtkFileChooser, file: *mut gio::GFile);
    pub fn gtk_file_chooser_unselect_filename(chooser: *mut GtkFileChooser, filename: *mut c_char);
    pub fn gtk_file_chooser_unselect_uri(chooser: *mut GtkFileChooser, uri: *const c_char);

    //=========================================================================
    // GtkFontChooser
    //=========================================================================
    pub fn gtk_font_chooser_get_type() -> GType;
    pub fn gtk_font_chooser_get_font(fontchooser: *mut GtkFontChooser) -> *mut c_char;
    pub fn gtk_font_chooser_get_font_desc(fontchooser: *mut GtkFontChooser) -> *mut pango::PangoFontDescription;
    pub fn gtk_font_chooser_get_font_face(fontchooser: *mut GtkFontChooser) -> *mut pango::PangoFontFace;
    pub fn gtk_font_chooser_get_font_family(fontchooser: *mut GtkFontChooser) -> *mut pango::PangoFontFamily;
    pub fn gtk_font_chooser_get_font_size(fontchooser: *mut GtkFontChooser) -> c_int;
    pub fn gtk_font_chooser_get_preview_text(fontchooser: *mut GtkFontChooser) -> *mut c_char;
    pub fn gtk_font_chooser_get_show_preview_entry(fontchooser: *mut GtkFontChooser) -> gboolean;
    pub fn gtk_font_chooser_set_filter_func(fontchooser: *mut GtkFontChooser, filter: GtkFontFilterFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_font_chooser_set_font(fontchooser: *mut GtkFontChooser, fontname: *const c_char);
    pub fn gtk_font_chooser_set_font_desc(fontchooser: *mut GtkFontChooser, font_desc: *const pango::PangoFontDescription);
    pub fn gtk_font_chooser_set_preview_text(fontchooser: *mut GtkFontChooser, text: *const c_char);
    pub fn gtk_font_chooser_set_show_preview_entry(fontchooser: *mut GtkFontChooser, show_preview_entry: gboolean);

    //=========================================================================
    // GtkOrientable
    //=========================================================================
    pub fn gtk_orientable_get_type() -> GType;
    pub fn gtk_orientable_get_orientation(orientable: *mut GtkOrientable) -> GtkOrientation;
    pub fn gtk_orientable_set_orientation(orientable: *mut GtkOrientable, orientation: GtkOrientation);

    //=========================================================================
    // GtkPrintOperationPreview
    //=========================================================================
    pub fn gtk_print_operation_preview_get_type() -> GType;
    pub fn gtk_print_operation_preview_end_preview(preview: *mut GtkPrintOperationPreview);
    pub fn gtk_print_operation_preview_is_selected(preview: *mut GtkPrintOperationPreview, page_nr: c_int) -> gboolean;
    pub fn gtk_print_operation_preview_render_page(preview: *mut GtkPrintOperationPreview, page_nr: c_int);

    //=========================================================================
    // GtkRecentChooser
    //=========================================================================
    pub fn gtk_recent_chooser_get_type() -> GType;
    pub fn gtk_recent_chooser_add_filter(chooser: *mut GtkRecentChooser, filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_get_current_item(chooser: *mut GtkRecentChooser) -> *mut GtkRecentInfo;
    pub fn gtk_recent_chooser_get_current_uri(chooser: *mut GtkRecentChooser) -> *mut c_char;
    pub fn gtk_recent_chooser_get_filter(chooser: *mut GtkRecentChooser) -> *mut GtkRecentFilter;
    pub fn gtk_recent_chooser_get_items(chooser: *mut GtkRecentChooser) -> *mut glib::GList;
    pub fn gtk_recent_chooser_get_limit(chooser: *mut GtkRecentChooser) -> c_int;
    pub fn gtk_recent_chooser_get_local_only(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_select_multiple(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_show_icons(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_show_not_found(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_show_private(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_show_tips(chooser: *mut GtkRecentChooser) -> gboolean;
    pub fn gtk_recent_chooser_get_sort_type(chooser: *mut GtkRecentChooser) -> GtkRecentSortType;
    pub fn gtk_recent_chooser_get_uris(chooser: *mut GtkRecentChooser, length: *mut size_t) -> *mut *mut c_char;
    pub fn gtk_recent_chooser_list_filters(chooser: *mut GtkRecentChooser) -> *mut glib::GSList;
    pub fn gtk_recent_chooser_remove_filter(chooser: *mut GtkRecentChooser, filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_select_all(chooser: *mut GtkRecentChooser);
    pub fn gtk_recent_chooser_select_uri(chooser: *mut GtkRecentChooser, uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_recent_chooser_set_current_uri(chooser: *mut GtkRecentChooser, uri: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_recent_chooser_set_filter(chooser: *mut GtkRecentChooser, filter: *mut GtkRecentFilter);
    pub fn gtk_recent_chooser_set_limit(chooser: *mut GtkRecentChooser, limit: c_int);
    pub fn gtk_recent_chooser_set_local_only(chooser: *mut GtkRecentChooser, local_only: gboolean);
    pub fn gtk_recent_chooser_set_select_multiple(chooser: *mut GtkRecentChooser, select_multiple: gboolean);
    pub fn gtk_recent_chooser_set_show_icons(chooser: *mut GtkRecentChooser, show_icons: gboolean);
    pub fn gtk_recent_chooser_set_show_not_found(chooser: *mut GtkRecentChooser, show_not_found: gboolean);
    pub fn gtk_recent_chooser_set_show_private(chooser: *mut GtkRecentChooser, show_private: gboolean);
    pub fn gtk_recent_chooser_set_show_tips(chooser: *mut GtkRecentChooser, show_tips: gboolean);
    pub fn gtk_recent_chooser_set_sort_func(chooser: *mut GtkRecentChooser, sort_func: GtkRecentSortFunc, sort_data: gpointer, data_destroy: glib::GDestroyNotify);
    pub fn gtk_recent_chooser_set_sort_type(chooser: *mut GtkRecentChooser, sort_type: GtkRecentSortType);
    pub fn gtk_recent_chooser_unselect_all(chooser: *mut GtkRecentChooser);
    pub fn gtk_recent_chooser_unselect_uri(chooser: *mut GtkRecentChooser, uri: *const c_char);

    //=========================================================================
    // GtkScrollable
    //=========================================================================
    pub fn gtk_scrollable_get_type() -> GType;
    #[cfg(gtk_3_16)]
    pub fn gtk_scrollable_get_border(scrollable: *mut GtkScrollable, border: *mut GtkBorder) -> gboolean;
    pub fn gtk_scrollable_get_hadjustment(scrollable: *mut GtkScrollable) -> *mut GtkAdjustment;
    pub fn gtk_scrollable_get_hscroll_policy(scrollable: *mut GtkScrollable) -> GtkScrollablePolicy;
    pub fn gtk_scrollable_get_vadjustment(scrollable: *mut GtkScrollable) -> *mut GtkAdjustment;
    pub fn gtk_scrollable_get_vscroll_policy(scrollable: *mut GtkScrollable) -> GtkScrollablePolicy;
    pub fn gtk_scrollable_set_hadjustment(scrollable: *mut GtkScrollable, hadjustment: *mut GtkAdjustment);
    pub fn gtk_scrollable_set_hscroll_policy(scrollable: *mut GtkScrollable, policy: GtkScrollablePolicy);
    pub fn gtk_scrollable_set_vadjustment(scrollable: *mut GtkScrollable, vadjustment: *mut GtkAdjustment);
    pub fn gtk_scrollable_set_vscroll_policy(scrollable: *mut GtkScrollable, policy: GtkScrollablePolicy);

    //=========================================================================
    // GtkStyleProvider
    //=========================================================================
    pub fn gtk_style_provider_get_type() -> GType;
    pub fn gtk_style_provider_get_icon_factory(provider: *mut GtkStyleProvider, path: *mut GtkWidgetPath) -> *mut GtkIconFactory;
    pub fn gtk_style_provider_get_style(provider: *mut GtkStyleProvider, path: *mut GtkWidgetPath) -> *mut GtkStyleProperties;
    pub fn gtk_style_provider_get_style_property(provider: *mut GtkStyleProvider, path: *mut GtkWidgetPath, state: GtkStateFlags, pspec: *mut gobject::GParamSpec, value: *mut gobject::GValue) -> gboolean;

    //=========================================================================
    // GtkToolShell
    //=========================================================================
    pub fn gtk_tool_shell_get_type() -> GType;
    pub fn gtk_tool_shell_get_ellipsize_mode(shell: *mut GtkToolShell) -> pango::PangoEllipsizeMode;
    pub fn gtk_tool_shell_get_icon_size(shell: *mut GtkToolShell) -> c_int;
    pub fn gtk_tool_shell_get_orientation(shell: *mut GtkToolShell) -> GtkOrientation;
    pub fn gtk_tool_shell_get_relief_style(shell: *mut GtkToolShell) -> GtkReliefStyle;
    pub fn gtk_tool_shell_get_style(shell: *mut GtkToolShell) -> GtkToolbarStyle;
    pub fn gtk_tool_shell_get_text_alignment(shell: *mut GtkToolShell) -> c_float;
    pub fn gtk_tool_shell_get_text_orientation(shell: *mut GtkToolShell) -> GtkOrientation;
    pub fn gtk_tool_shell_get_text_size_group(shell: *mut GtkToolShell) -> *mut GtkSizeGroup;
    pub fn gtk_tool_shell_rebuild_menu(shell: *mut GtkToolShell);

    //=========================================================================
    // GtkTreeDragDest
    //=========================================================================
    pub fn gtk_tree_drag_dest_get_type() -> GType;
    pub fn gtk_tree_drag_dest_drag_data_received(drag_dest: *mut GtkTreeDragDest, dest: *mut GtkTreePath, selection_data: *mut GtkSelectionData) -> gboolean;
    pub fn gtk_tree_drag_dest_row_drop_possible(drag_dest: *mut GtkTreeDragDest, dest_path: *mut GtkTreePath, selection_data: *mut GtkSelectionData) -> gboolean;

    //=========================================================================
    // GtkTreeDragSource
    //=========================================================================
    pub fn gtk_tree_drag_source_get_type() -> GType;
    pub fn gtk_tree_drag_source_drag_data_delete(drag_source: *mut GtkTreeDragSource, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_drag_source_drag_data_get(drag_source: *mut GtkTreeDragSource, path: *mut GtkTreePath, selection_data: *mut GtkSelectionData) -> gboolean;
    pub fn gtk_tree_drag_source_row_draggable(drag_source: *mut GtkTreeDragSource, path: *mut GtkTreePath) -> gboolean;

    //=========================================================================
    // GtkTreeModel
    //=========================================================================
    pub fn gtk_tree_model_get_type() -> GType;
    pub fn gtk_tree_model_filter_new(child_model: *mut GtkTreeModel, root: *mut GtkTreePath) -> *mut GtkTreeModel;
    pub fn gtk_tree_model_foreach(model: *mut GtkTreeModel, func: GtkTreeModelForeachFunc, user_data: gpointer);
    pub fn gtk_tree_model_get(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, ...);
    pub fn gtk_tree_model_get_column_type(tree_model: *mut GtkTreeModel, index_: c_int) -> GType;
    pub fn gtk_tree_model_get_flags(tree_model: *mut GtkTreeModel) -> GtkTreeModelFlags;
    pub fn gtk_tree_model_get_iter(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_model_get_iter_first(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_get_iter_from_string(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, path_string: *const c_char) -> gboolean;
    pub fn gtk_tree_model_get_n_columns(tree_model: *mut GtkTreeModel) -> c_int;
    pub fn gtk_tree_model_get_path(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> *mut GtkTreePath;
    pub fn gtk_tree_model_get_string_from_iter(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> *mut c_char;
    //pub fn gtk_tree_model_get_valist(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, var_args: [Unsupported type va_list]);
    pub fn gtk_tree_model_get_value(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, column: c_int, value: *mut gobject::GValue);
    pub fn gtk_tree_model_iter_children(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_has_child(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_n_children(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> c_int;
    pub fn gtk_tree_model_iter_next(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_nth_child(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, parent: *mut GtkTreeIter, n: c_int) -> gboolean;
    pub fn gtk_tree_model_iter_parent(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter, child: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_iter_previous(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter) -> gboolean;
    pub fn gtk_tree_model_ref_node(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_changed(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath, iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_deleted(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath);
    pub fn gtk_tree_model_row_has_child_toggled(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath, iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_row_inserted(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath, iter: *mut GtkTreeIter);
    pub fn gtk_tree_model_rows_reordered(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath, iter: *mut GtkTreeIter, new_order: *mut c_int);
    #[cfg(gtk_3_10)]
    pub fn gtk_tree_model_rows_reordered_with_length(tree_model: *mut GtkTreeModel, path: *mut GtkTreePath, iter: *mut GtkTreeIter, new_order: *mut c_int, length: c_int);
    pub fn gtk_tree_model_sort_new_with_model(child_model: *mut GtkTreeModel) -> *mut GtkTreeModel;
    pub fn gtk_tree_model_unref_node(tree_model: *mut GtkTreeModel, iter: *mut GtkTreeIter);

    //=========================================================================
    // GtkTreeSortable
    //=========================================================================
    pub fn gtk_tree_sortable_get_type() -> GType;
    pub fn gtk_tree_sortable_get_sort_column_id(sortable: *mut GtkTreeSortable, sort_column_id: *mut c_int, order: *mut GtkSortType) -> gboolean;
    pub fn gtk_tree_sortable_has_default_sort_func(sortable: *mut GtkTreeSortable) -> gboolean;
    pub fn gtk_tree_sortable_set_default_sort_func(sortable: *mut GtkTreeSortable, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_sortable_set_sort_column_id(sortable: *mut GtkTreeSortable, sort_column_id: c_int, order: GtkSortType);
    pub fn gtk_tree_sortable_set_sort_func(sortable: *mut GtkTreeSortable, sort_column_id: c_int, sort_func: GtkTreeIterCompareFunc, user_data: gpointer, destroy: glib::GDestroyNotify);
    pub fn gtk_tree_sortable_sort_column_changed(sortable: *mut GtkTreeSortable);

    //=========================================================================
    // Other functions
    //=========================================================================
    pub fn gtk_accel_groups_activate(object: *mut gobject::GObject, accel_key: c_uint, accel_mods: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_accel_groups_from_object(object: *mut gobject::GObject) -> *mut glib::GSList;
    pub fn gtk_accelerator_get_default_mod_mask() -> gdk::GdkModifierType;
    pub fn gtk_accelerator_get_label(accelerator_key: c_uint, accelerator_mods: gdk::GdkModifierType) -> *mut c_char;
    #[cfg(gtk_3_4)]
    pub fn gtk_accelerator_get_label_with_keycode(display: *mut gdk::GdkDisplay, accelerator_key: c_uint, keycode: c_uint, accelerator_mods: gdk::GdkModifierType) -> *mut c_char;
    pub fn gtk_accelerator_name(accelerator_key: c_uint, accelerator_mods: gdk::GdkModifierType) -> *mut c_char;
    #[cfg(gtk_3_4)]
    pub fn gtk_accelerator_name_with_keycode(display: *mut gdk::GdkDisplay, accelerator_key: c_uint, keycode: c_uint, accelerator_mods: gdk::GdkModifierType) -> *mut c_char;
    pub fn gtk_accelerator_parse(accelerator: *const c_char, accelerator_key: *mut c_uint, accelerator_mods: *mut gdk::GdkModifierType);
    #[cfg(gtk_3_4)]
    pub fn gtk_accelerator_parse_with_keycode(accelerator: *const c_char, accelerator_key: *mut c_uint, accelerator_codes: *mut *mut c_uint, accelerator_mods: *mut gdk::GdkModifierType);
    pub fn gtk_accelerator_set_default_mod_mask(default_mod_mask: gdk::GdkModifierType);
    pub fn gtk_accelerator_valid(keyval: c_uint, modifiers: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_alternative_dialog_button_order(screen: *mut gdk::GdkScreen) -> gboolean;
    pub fn gtk_bindings_activate(object: *mut gobject::GObject, keyval: c_uint, modifiers: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_bindings_activate_event(object: *mut gobject::GObject, event: *mut gdk::GdkEventKey) -> gboolean;
    pub fn gtk_cairo_should_draw_window(cr: *mut cairo::cairo_t, window: *mut gdk::GdkWindow) -> gboolean;
    pub fn gtk_cairo_transform_to_window(cr: *mut cairo::cairo_t, widget: *mut GtkWidget, window: *mut gdk::GdkWindow);
    pub fn gtk_check_version(required_major: c_uint, required_minor: c_uint, required_micro: c_uint) -> *const c_char;
    pub fn gtk_device_grab_add(widget: *mut GtkWidget, device: *mut gdk::GdkDevice, block_others: gboolean);
    pub fn gtk_device_grab_remove(widget: *mut GtkWidget, device: *mut gdk::GdkDevice);
    pub fn gtk_disable_setlocale();
    pub fn gtk_distribute_natural_allocation(extra_space: c_int, n_requested_sizes: c_uint, sizes: *mut GtkRequestedSize) -> c_int;
    #[cfg(gtk_3_16)]
    pub fn gtk_drag_cancel(context: *mut gdk::GdkDragContext);
    pub fn gtk_drag_finish(context: *mut gdk::GdkDragContext, success: gboolean, del: gboolean, time_: u32);
    pub fn gtk_drag_get_source_widget(context: *mut gdk::GdkDragContext) -> *mut GtkWidget;
    pub fn gtk_drag_set_icon_default(context: *mut gdk::GdkDragContext);
    pub fn gtk_drag_set_icon_gicon(context: *mut gdk::GdkDragContext, icon: *mut gio::GIcon, hot_x: c_int, hot_y: c_int);
    pub fn gtk_drag_set_icon_name(context: *mut gdk::GdkDragContext, icon_name: *const c_char, hot_x: c_int, hot_y: c_int);
    pub fn gtk_drag_set_icon_pixbuf(context: *mut gdk::GdkDragContext, pixbuf: *mut gdk_pixbuf::GdkPixbuf, hot_x: c_int, hot_y: c_int);
    pub fn gtk_drag_set_icon_stock(context: *mut gdk::GdkDragContext, stock_id: *const c_char, hot_x: c_int, hot_y: c_int);
    pub fn gtk_drag_set_icon_surface(context: *mut gdk::GdkDragContext, surface: *mut cairo::cairo_surface_t);
    pub fn gtk_drag_set_icon_widget(context: *mut gdk::GdkDragContext, widget: *mut GtkWidget, hot_x: c_int, hot_y: c_int);
    pub fn gtk_draw_insertion_cursor(widget: *mut GtkWidget, cr: *mut cairo::cairo_t, location: *const gdk::GdkRectangle, is_primary: gboolean, direction: GtkTextDirection, draw_arrow: gboolean);
    pub fn gtk_events_pending() -> gboolean;
    pub fn gtk_false() -> gboolean;
    pub fn gtk_get_binary_age() -> c_uint;
    pub fn gtk_get_current_event() -> *mut gdk::GdkEvent;
    pub fn gtk_get_current_event_device() -> *mut gdk::GdkDevice;
    pub fn gtk_get_current_event_state(state: *mut gdk::GdkModifierType) -> gboolean;
    pub fn gtk_get_current_event_time() -> u32;
    pub fn gtk_get_debug_flags() -> c_uint;
    pub fn gtk_get_default_language() -> *mut pango::PangoLanguage;
    pub fn gtk_get_event_widget(event: *mut gdk::GdkEvent) -> *mut GtkWidget;
    pub fn gtk_get_interface_age() -> c_uint;
    #[cfg(gtk_3_12)]
    pub fn gtk_get_locale_direction() -> GtkTextDirection;
    pub fn gtk_get_major_version() -> c_uint;
    pub fn gtk_get_micro_version() -> c_uint;
    pub fn gtk_get_minor_version() -> c_uint;
    pub fn gtk_get_option_group(open_default_display: gboolean) -> *mut glib::GOptionGroup;
    pub fn gtk_grab_get_current() -> *mut GtkWidget;
    pub fn gtk_init(argc: *mut c_int, argv: *mut *mut *mut c_char);
    pub fn gtk_init_check(argc: *mut c_int, argv: *mut *mut *mut c_char) -> gboolean;
    pub fn gtk_init_with_args(argc: *mut c_int, argv: *mut *mut *mut c_char, parameter_string: *const c_char, entries: *mut glib::GOptionEntry, translation_domain: *const c_char, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_key_snooper_install(snooper: GtkKeySnoopFunc, func_data: gpointer) -> c_uint;
    pub fn gtk_key_snooper_remove(snooper_handler_id: c_uint);
    pub fn gtk_main();
    pub fn gtk_main_do_event(event: *mut gdk::GdkEvent);
    pub fn gtk_main_iteration() -> gboolean;
    pub fn gtk_main_iteration_do(blocking: gboolean) -> gboolean;
    pub fn gtk_main_level() -> c_uint;
    pub fn gtk_main_quit();
    pub fn gtk_paint_arrow(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, arrow_type: GtkArrowType, fill: gboolean, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_box(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_box_gap(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int, gap_side: GtkPositionType, gap_x: c_int, gap_width: c_int);
    pub fn gtk_paint_check(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_diamond(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_expander(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, expander_style: GtkExpanderStyle);
    pub fn gtk_paint_extension(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int, gap_side: GtkPositionType);
    pub fn gtk_paint_flat_box(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_focus(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_handle(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int, orientation: GtkOrientation);
    pub fn gtk_paint_hline(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, x1: c_int, x2: c_int, y: c_int);
    pub fn gtk_paint_layout(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, use_text: gboolean, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, layout: *mut pango::PangoLayout);
    pub fn gtk_paint_option(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_resize_grip(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, edge: gdk::GdkWindowEdge, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_shadow(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_shadow_gap(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int, gap_side: GtkPositionType, gap_x: c_int, gap_width: c_int);
    pub fn gtk_paint_slider(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int, orientation: GtkOrientation);
    pub fn gtk_paint_spinner(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, step: c_uint, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_tab(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, shadow_type: GtkShadowType, widget: *mut GtkWidget, detail: *const c_char, x: c_int, y: c_int, width: c_int, height: c_int);
    pub fn gtk_paint_vline(style: *mut GtkStyle, cr: *mut cairo::cairo_t, state_type: GtkStateType, widget: *mut GtkWidget, detail: *const c_char, y1_: c_int, y2_: c_int, x: c_int);
    pub fn gtk_parse_args(argc: *mut c_int, argv: *mut *mut *mut c_char) -> gboolean;
    pub fn gtk_print_run_page_setup_dialog(parent: *mut GtkWindow, page_setup: *mut GtkPageSetup, settings: *mut GtkPrintSettings) -> *mut GtkPageSetup;
    pub fn gtk_print_run_page_setup_dialog_async(parent: *mut GtkWindow, page_setup: *mut GtkPageSetup, settings: *mut GtkPrintSettings, done_cb: GtkPageSetupDoneFunc, data: gpointer);
    pub fn gtk_propagate_event(widget: *mut GtkWidget, event: *mut gdk::GdkEvent);
    pub fn gtk_rc_add_default_file(filename: *mut c_char);
    pub fn gtk_rc_find_module_in_path(module_file: *const c_char) -> *mut c_char;
    pub fn gtk_rc_find_pixmap_in_path(settings: *mut GtkSettings, scanner: *mut glib::GScanner, pixmap_file: *const c_char) -> *mut c_char;
    pub fn gtk_rc_get_default_files() -> *mut *mut c_char;
    pub fn gtk_rc_get_im_module_file() -> *mut c_char;
    pub fn gtk_rc_get_im_module_path() -> *mut c_char;
    pub fn gtk_rc_get_module_dir() -> *mut c_char;
    pub fn gtk_rc_get_style(widget: *mut GtkWidget) -> *mut GtkStyle;
    pub fn gtk_rc_get_style_by_paths(settings: *mut GtkSettings, widget_path: *const c_char, class_path: *const c_char, type_: GType) -> *mut GtkStyle;
    pub fn gtk_rc_get_theme_dir() -> *mut c_char;
    pub fn gtk_rc_parse(filename: *const c_char);
    pub fn gtk_rc_parse_color(scanner: *mut glib::GScanner, color: *mut gdk::GdkColor) -> c_uint;
    pub fn gtk_rc_parse_color_full(scanner: *mut glib::GScanner, style: *mut GtkRcStyle, color: *mut gdk::GdkColor) -> c_uint;
    pub fn gtk_rc_parse_priority(scanner: *mut glib::GScanner, priority: *mut GtkPathPriorityType) -> c_uint;
    pub fn gtk_rc_parse_state(scanner: *mut glib::GScanner, state: *mut GtkStateType) -> c_uint;
    pub fn gtk_rc_parse_string(rc_string: *const c_char);
    pub fn gtk_rc_reparse_all() -> gboolean;
    pub fn gtk_rc_reparse_all_for_settings(settings: *mut GtkSettings, force_load: gboolean) -> gboolean;
    pub fn gtk_rc_reset_styles(settings: *mut GtkSettings);
    pub fn gtk_rc_scanner_new() -> *mut glib::GScanner;
    pub fn gtk_rc_set_default_files(filenames: *mut *mut c_char);
    pub fn gtk_render_activity(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_arrow(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, angle: c_double, x: c_double, y: c_double, size: c_double);
    pub fn gtk_render_background(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_check(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_expander(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_extension(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double, gap_side: GtkPositionType);
    pub fn gtk_render_focus(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_frame(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_frame_gap(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double, gap_side: GtkPositionType, xy0_gap: c_double, xy1_gap: c_double);
    pub fn gtk_render_handle(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_icon(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, pixbuf: *mut gdk_pixbuf::GdkPixbuf, x: c_double, y: c_double);
    pub fn gtk_render_icon_pixbuf(context: *mut GtkStyleContext, source: *const GtkIconSource, size: c_int) -> *mut gdk_pixbuf::GdkPixbuf;
    #[cfg(gtk_3_10)]
    pub fn gtk_render_icon_surface(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, surface: *mut cairo::cairo_surface_t, x: c_double, y: c_double);
    #[cfg(gtk_3_4)]
    pub fn gtk_render_insertion_cursor(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, layout: *mut pango::PangoLayout, index: c_int, direction: pango::PangoDirection);
    pub fn gtk_render_layout(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, layout: *mut pango::PangoLayout);
    pub fn gtk_render_line(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x0: c_double, y0: c_double, x1: c_double, y1: c_double);
    pub fn gtk_render_option(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double);
    pub fn gtk_render_slider(context: *mut GtkStyleContext, cr: *mut cairo::cairo_t, x: c_double, y: c_double, width: c_double, height: c_double, orientation: GtkOrientation);
    pub fn gtk_rgb_to_hsv(r: c_double, g: c_double, b: c_double, h: *mut c_double, s: *mut c_double, v: *mut c_double);
    pub fn gtk_selection_add_target(widget: *mut GtkWidget, selection: gdk::GdkAtom, target: gdk::GdkAtom, info: c_uint);
    pub fn gtk_selection_add_targets(widget: *mut GtkWidget, selection: gdk::GdkAtom, targets: *mut GtkTargetEntry, ntargets: c_uint);
    pub fn gtk_selection_clear_targets(widget: *mut GtkWidget, selection: gdk::GdkAtom);
    pub fn gtk_selection_convert(widget: *mut GtkWidget, selection: gdk::GdkAtom, target: gdk::GdkAtom, time_: u32) -> gboolean;
    pub fn gtk_selection_owner_set(widget: *mut GtkWidget, selection: gdk::GdkAtom, time_: u32) -> gboolean;
    pub fn gtk_selection_owner_set_for_display(display: *mut gdk::GdkDisplay, widget: *mut GtkWidget, selection: gdk::GdkAtom, time_: u32) -> gboolean;
    pub fn gtk_selection_remove_all(widget: *mut GtkWidget);
    pub fn gtk_set_debug_flags(flags: c_uint);
    pub fn gtk_show_about_dialog(parent: *mut GtkWindow, first_property_name: *const c_char, ...);
    pub fn gtk_show_uri(screen: *mut gdk::GdkScreen, uri: *const c_char, timestamp: u32, error: *mut *mut glib::GError) -> gboolean;
    pub fn gtk_stock_add(items: *mut GtkStockItem, n_items: c_uint);
    pub fn gtk_stock_add_static(items: *mut GtkStockItem, n_items: c_uint);
    pub fn gtk_stock_list_ids() -> *mut glib::GSList;
    pub fn gtk_stock_lookup(stock_id: *const c_char, item: *mut GtkStockItem) -> gboolean;
    pub fn gtk_stock_set_translate_func(domain: *const c_char, func: GtkTranslateFunc, data: gpointer, notify: glib::GDestroyNotify);
    pub fn gtk_target_table_free(targets: *mut GtkTargetEntry, n_targets: c_int);
    pub fn gtk_target_table_new_from_list(list: *mut GtkTargetList, n_targets: *mut c_int) -> *mut GtkTargetEntry;
    pub fn gtk_targets_include_image(targets: *mut gdk::GdkAtom, n_targets: c_int, writable: gboolean) -> gboolean;
    pub fn gtk_targets_include_rich_text(targets: *mut gdk::GdkAtom, n_targets: c_int, buffer: *mut GtkTextBuffer) -> gboolean;
    pub fn gtk_targets_include_text(targets: *mut gdk::GdkAtom, n_targets: c_int) -> gboolean;
    pub fn gtk_targets_include_uri(targets: *mut gdk::GdkAtom, n_targets: c_int) -> gboolean;
    pub fn gtk_test_create_simple_window(window_title: *const c_char, dialog_text: *const c_char) -> *mut GtkWidget;
    pub fn gtk_test_create_widget(widget_type: GType, first_property_name: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_test_display_button_window(window_title: *const c_char, dialog_text: *const c_char, ...) -> *mut GtkWidget;
    pub fn gtk_test_find_label(widget: *mut GtkWidget, label_pattern: *const c_char) -> *mut GtkWidget;
    pub fn gtk_test_find_sibling(base_widget: *mut GtkWidget, widget_type: GType) -> *mut GtkWidget;
    pub fn gtk_test_find_widget(widget: *mut GtkWidget, label_pattern: *const c_char, widget_type: GType) -> *mut GtkWidget;
    pub fn gtk_test_init(argcp: *mut c_int, argvp: *mut *mut *mut c_char, ...);
    pub fn gtk_test_list_all_types(n_types: *mut c_uint) -> *mut GType;
    pub fn gtk_test_register_all_types();
    pub fn gtk_test_slider_get_value(widget: *mut GtkWidget) -> c_double;
    pub fn gtk_test_slider_set_perc(widget: *mut GtkWidget, percentage: c_double);
    pub fn gtk_test_spin_button_click(spinner: *mut GtkSpinButton, button: c_uint, upwards: gboolean) -> gboolean;
    pub fn gtk_test_text_get(widget: *mut GtkWidget) -> *mut c_char;
    pub fn gtk_test_text_set(widget: *mut GtkWidget, string: *const c_char);
    pub fn gtk_test_widget_click(widget: *mut GtkWidget, button: c_uint, modifiers: gdk::GdkModifierType) -> gboolean;
    pub fn gtk_test_widget_send_key(widget: *mut GtkWidget, keyval: c_uint, modifiers: gdk::GdkModifierType) -> gboolean;
    #[cfg(gtk_3_10)]
    pub fn gtk_test_widget_wait_for_draw(widget: *mut GtkWidget);
    pub fn gtk_tree_get_row_drag_data(selection_data: *mut GtkSelectionData, tree_model: *mut *mut GtkTreeModel, path: *mut *mut GtkTreePath) -> gboolean;
    pub fn gtk_tree_set_row_drag_data(selection_data: *mut GtkSelectionData, tree_model: *mut GtkTreeModel, path: *mut GtkTreePath) -> gboolean;
    pub fn gtk_true() -> gboolean;

}

extern "C" {
    //=========================================================================
    // GTK Casts functions
    //=========================================================================
    pub fn cast_GtkObject(widget: *mut GtkWidget) -> *mut gobject::GObject;
    pub fn cast_GtkObjectFromListStore(widget: *mut GtkListStore) -> *mut gobject::GObject;
    pub fn cast_GtkObjectFromTreeStore(widget: *mut GtkTreeStore) -> *mut gobject::GObject;
    pub fn cast_GtkObjectFromTreeViewColumn(widget: *mut GtkTreeViewColumn) -> *mut gobject::GObject;
    pub fn cast_GtkObjectFromTreeSelection(widget: *mut GtkTreeSelection) -> *mut gobject::GObject;
    pub fn cast_GtkWidget(widget: *mut gobject::GObject) -> *mut GtkWidget;
    pub fn cast_GtkWindow(widget: *mut GtkWidget) -> *mut GtkWindow;
    pub fn cast_GtkBin(widget: *mut GtkWidget) -> *mut GtkBin;
    pub fn cast_GtkButton(widget: *mut GtkWidget) -> *mut GtkButton;
    pub fn cast_GtkContainer(widget: *mut GtkWidget) -> *mut GtkContainer;
    pub fn cast_GtkFrame(widget: *mut GtkWidget) -> *mut GtkFrame;
    pub fn cast_GtkLabel(widget: *mut GtkWidget) -> *mut GtkLabel;
    pub fn cast_GtkMisc(widget: *mut GtkWidget) -> *mut GtkMisc;
    pub fn cast_GtkOrientable(widget: *mut GtkWidget) -> *mut GtkOrientable;
    pub fn cast_GtkRange(widget: *mut GtkWidget) -> *mut GtkRange;
    pub fn cast_GtkBox(widget: *mut GtkWidget) -> *mut GtkBox;
    pub fn cast_GtkFixed(widget: *mut GtkWidget) -> *mut GtkFixed;
    pub fn cast_GtkButtonBox(widget: *mut GtkWidget) -> *mut GtkButtonBox;
    pub fn cast_GtkAspectFrame(widget: *mut GtkWidget) -> *mut GtkAspectFrame;
    pub fn cast_GtkFontButton(widget: *mut GtkWidget) -> *mut GtkFontButton;
    pub fn cast_GtkToggleButton(widget: *mut GtkWidget) -> *mut GtkToggleButton;
    pub fn cast_GtkCheckButton(widget: *mut GtkWidget) -> *mut GtkCheckButton;
    pub fn cast_GtkMenuButton(widget: *mut GtkWidget) -> *mut GtkMenuButton;
    pub fn cast_GtkColorButton(widget: *mut GtkWidget) -> *mut GtkColorButton;
    pub fn cast_GtkLinkButton(widget: *mut GtkWidget) -> *mut GtkLinkButton;
    pub fn cast_GtkScaleButton(widget: *mut GtkWidget) -> *mut GtkScaleButton;
    pub fn cast_GtkGrid(widget: *mut GtkWidget) -> *mut GtkGrid;
    pub fn cast_GtkEntry(widget: *mut GtkWidget) -> *mut GtkEntry;
    pub fn cast_GtkSwitch(widget: *mut GtkWidget) -> *mut GtkSwitch;
    pub fn cast_GtkScale(widget: *mut GtkWidget) -> *mut GtkScale;
    pub fn cast_GtkLevelBar(widget: *mut GtkWidget) -> *mut GtkLevelBar;
    pub fn cast_GtkSearchBar(widget: *mut GtkWidget) -> *mut GtkSearchBar;
    pub fn cast_GtkSpinButton(widget: *mut GtkWidget) -> *mut GtkSpinButton;
    pub fn cast_GtkSpinner(widget: *mut GtkWidget) -> *mut GtkSpinner;
    pub fn cast_GtkProgressBar(widget: *mut GtkWidget) -> *mut GtkProgressBar;
    pub fn cast_GtkArrow(widget: *mut GtkWidget) -> *mut GtkArrow;
    pub fn cast_GtkCalendar(widget: *mut GtkWidget) -> *mut GtkCalendar;
    pub fn cast_GtkAlignment(widget: *mut GtkWidget) -> *mut GtkAlignment;
    pub fn cast_GtkExpander(widget: *mut GtkWidget) -> *mut GtkExpander;
    pub fn cast_GtkPaned(widget: *mut GtkWidget) -> *mut GtkPaned;
    pub fn cast_GtkInfoBar(widget: *mut GtkWidget) -> *mut GtkInfoBar;
    pub fn cast_GtkToolShell(widget: *mut GtkWidget) -> *mut GtkToolShell;
    pub fn cast_GtkToolbar(widget: *mut GtkWidget) -> *mut GtkToolbar;
    pub fn cast_GtkToolItem(widget: *mut GtkWidget) -> *mut GtkToolItem;
    pub fn cast_GtkToolButton(widget: *mut GtkWidget) -> *mut GtkToolButton;
    pub fn cast_GtkSeparatorToolItem(widget: *mut GtkWidget) -> *mut GtkSeparatorToolItem;
    pub fn cast_GtkMenuToolButton(widget: *mut GtkWidget) -> *mut GtkMenuToolButton;
    pub fn cast_GtkToggleToolButton(widget: *mut GtkWidget) -> *mut GtkToggleToolButton;
    pub fn cast_GtkRadioToolButton(widget: *mut GtkWidget) -> *mut GtkRadioToolButton;
    pub fn cast_GtkDialog(widget: *mut GtkWidget) -> *mut GtkDialog;
    pub fn cast_GtkAboutDialog(widget: *mut GtkWidget) -> *mut GtkAboutDialog;
    pub fn cast_GtkMessageDialog(widget: *mut GtkWidget) -> *mut GtkMessageDialog;
    pub fn cast_GtkColorChooserDialog(widget: *mut GtkWidget) -> *mut GtkColorChooserDialog;
    pub fn cast_GtkColorChooser(widget: *mut GtkWidget) -> *mut GtkColorChooser;
    pub fn cast_GtkAdjustment(widget: *mut gobject::GObject) -> *mut GtkAdjustment;
    pub fn cast_GtkNotebook(widget: *mut GtkWidget) -> *mut GtkNotebook;
    pub fn cast_GtkStack(widget: *mut GtkWidget) -> *mut GtkStack;
    pub fn cast_GtkStackSwitcher(widget: *mut GtkWidget) -> *mut GtkStackSwitcher;
    pub fn cast_GtkStackSidebar(widget: *mut GtkWidget) -> *mut GtkStackSidebar;
    pub fn cast_GtkRevealer(widget: *mut GtkWidget) -> *mut GtkRevealer;
    pub fn cast_GtkOverlay(widget: *mut GtkWidget) -> *mut GtkOverlay;
    pub fn cast_GtkScrollable(widget: *mut GtkWidget) -> *mut GtkScrollable;
    pub fn cast_GtkLayout(widget: *mut GtkWidget) -> *mut GtkLayout;
    pub fn cast_GtkHeaderBar(widget: *mut GtkWidget) -> *mut GtkHeaderBar;
    pub fn cast_GtkFlowBox(widget: *mut GtkWidget) -> *mut GtkFlowBox;
    pub fn cast_GtkFlowBoxChild(widget: *mut GtkWidget) -> *mut GtkFlowBoxChild;
    pub fn cast_GtkListBox(widget: *mut GtkWidget) -> *mut GtkListBox;
    pub fn cast_GtkListBoxRow(widget: *mut GtkWidget) -> *mut GtkListBoxRow;
    pub fn cast_GtkActionBar(widget: *mut GtkWidget) -> *mut GtkActionBar;
    pub fn cast_GtkFileFilter(widget: *mut gobject::GObject) -> *mut GtkFileFilter;
    pub fn cast_GtkFileChooser(widget: *mut GtkWidget) -> *mut GtkFileChooser;
    pub fn cast_GtkAppChooser(widget: *mut GtkWidget) -> *mut GtkAppChooser;
    pub fn cast_GtkAppChooserDialog(widget: *mut GtkWidget) -> *mut GtkAppChooserDialog;
    pub fn cast_GtkAppInfo(widget: *mut GtkWidget) -> *mut gio::GAppInfo;
    pub fn cast_GtkAppLaunchContext(widget: *mut GtkWidget) -> *mut gio::GAppLaunchContext;
    pub fn cast_GtkFontChooserDialog(widget: *mut GtkWidget) -> *mut GtkFontChooserDialog;
    pub fn cast_GtkFontChooser(widget: *mut GtkWidget) -> *mut GtkFontChooser;
    pub fn cast_GtkPaperSize(widget: *mut GtkWidget) -> *mut GtkPaperSize;
    pub fn cast_GtkPageSetup(widget: *mut gobject::GObject) -> *mut GtkPageSetup;
    // pub fn cast_PageSetupUnixDialog(widget: *mut GtkWidget) -> *mut GtkPageSetupUnixDialog;
    pub fn cast_GtkPrintSettings(widget: *mut GtkWidget) -> *mut GtkPrintSettings;
    pub fn cast_GtkRecentChooserDialog(widget: *mut GtkWidget) -> *mut GtkRecentChooserDialog;
    pub fn cast_GtkRecentManager(widget: *mut GtkWidget) -> *mut GtkRecentManager;
    pub fn cast_GtkRecentChooser(widget: *mut GtkWidget) -> *mut GtkRecentChooser;
    pub fn cast_GtkRecentFilter(widget: *mut GtkWidget) -> *mut GtkRecentFilter;
    pub fn cast_GtkRecentInfo(widget: *mut GtkWidget) -> *mut GtkRecentInfo;
    pub fn cast_GtkEditable(widget: *mut GtkWidget) -> *mut GtkEditable;
    pub fn cast_GtkTextView(widget: *mut GtkWidget) -> *mut GtkTextView;
    pub fn cast_GtkTextBuffer(widget: *mut GtkWidget) -> *mut GtkTextBuffer;
    pub fn cast_GtkTextTagTable(widget: *mut gobject::GObject) -> *mut GtkTextTagTable;
    pub fn cast_GtkScrolledWindow(widget: *mut GtkWidget) -> *mut GtkScrolledWindow;
    pub fn cast_GtkRadioButton(widget: *mut GtkWidget) -> *mut GtkRadioButton;
    pub fn cast_GtkTreeView(widget: *mut GtkWidget) -> *mut GtkTreeView;
    pub fn cast_GtkCellRenderer(widget: *mut GtkWidget) -> *mut GtkCellRenderer;
    pub fn cast_GtkMenu(widget: *mut GtkWidget) -> *mut GtkMenu;
    pub fn cast_GtkMenuBar(widget: *mut GtkWidget) -> *mut GtkMenuBar;
    pub fn cast_GtkMenuShell(widget: *mut GtkWidget) -> *mut GtkMenuShell;
    pub fn cast_GtkMenuItem(widget: *mut GtkWidget) -> *mut GtkMenuItem;
    pub fn cast_GtkCheckMenuItem(widget: *mut GtkWidget) -> *mut GtkCheckMenuItem;
    pub fn cast_GtkViewport(widget: *mut GtkWidget) -> *mut GtkViewport;
    pub fn cast_GtkStatusbar(widget: *mut GtkWidget) -> *mut GtkStatusbar;
    pub fn cast_GtkCellEditable(widget: *mut GtkWidget) -> *mut GtkCellEditable;
    pub fn cast_GtkCellRendererText(widget: *mut GtkWidget) -> *mut GtkCellRendererText;
    pub fn cast_GtkLockButton(widget: *mut GtkWidget) -> *mut GtkLockButton;
    pub fn cast_GtkActionable(widget: *mut GtkWidget) -> *mut GtkActionable;
    pub fn cast_GtkCellLayout(widget: *mut GtkWidget) -> *mut GtkCellLayout;
    pub fn cast_GtkEntryCompletion(widget: *mut GtkWidget) -> *mut GtkEntryCompletion;
    pub fn cast_GtkEntryBuffer(obj: *mut gobject::GObject) -> *mut GtkEntryBuffer;
    pub fn cast_GtkIconView(widget: *mut GtkWidget) -> *mut GtkIconView;
    pub fn cast_GtkTreeSelection(widget: *mut gobject::GObject) -> *mut GtkTreeSelection;
    pub fn cast_GtkImage(widget: *mut GtkWidget) -> *mut GtkImage;
    pub fn cast_GtkRecentChooserWidget(widget: *mut GtkWidget) -> *mut GtkRecentChooserWidget;
    pub fn cast_GtkTreeModelFromListStore(store: *mut GtkListStore) -> *mut GtkTreeModel;
    pub fn cast_GtkListStoreFromTreeModel(store: *mut GtkTreeModel) -> *mut GtkListStore;
    pub fn cast_GtkListStore(store: *mut gobject::GObject) -> *mut GtkListStore;
    pub fn cast_GtkTreeModelFromTreeStore(store: *mut GtkTreeStore) -> *mut GtkTreeModel;
    pub fn cast_GtkTreeStoreFromTreeModel(store: *mut GtkTreeModel) -> *mut GtkTreeStore;
    pub fn cast_GtkComboBox(widget: *mut GtkWidget) -> *mut GtkComboBox;
    pub fn cast_GtkPopover(widget: *mut GtkWidget) -> *mut GtkPopover;
    pub fn cast_GtkPopoverMenu(widget: *mut GtkWidget) -> *mut GtkPopoverMenu;
    pub fn cast_GtkComboBoxText(widget: *mut GtkWidget) -> *mut GtkComboBoxText;
    pub fn cast_GtkTreeStore(obj: *mut gobject::GObject) -> *mut GtkTreeStore;
    pub fn cast_GtkTreeModel(obj: *mut gobject::GObject) -> *mut GtkTreeModel;
    pub fn cast_GtkTextMark(widget: *mut gobject::GObject) -> *mut GtkTextMark;
    pub fn cast_GtkPlacesSidebar(widget: *mut GtkWidget) -> *mut GtkPlacesSidebar;
    pub fn cast_GtkToolPalette(widget: *mut GtkWidget) -> *mut GtkToolPalette;
    pub fn cast_GtkToolItemGroup(widget: *mut GtkWidget) -> *mut GtkToolItemGroup;
    pub fn cast_GtkAppChooserWidget(widget: *mut GtkWidget) -> *mut GtkAppChooserWidget;
    pub fn cast_GtkFileChooserWidget(widget: *mut GtkWidget) -> *mut GtkFileChooserWidget;
    pub fn cast_GtkColorChooserWidget(widget: *mut GtkWidget) -> *mut GtkColorChooserWidget;
    pub fn cast_GtkFontChooserWidget(widget: *mut GtkWidget) -> *mut GtkFontChooserWidget;
    pub fn cast_GtkSocket(widget: *mut GtkWidget) -> *mut GtkSocket;
    pub fn cast_GtkEventBox(widget: *mut GtkWidget) -> *mut GtkEventBox;
    pub fn cast_GtkStyleProvider(widget: *mut gobject::GObject) -> *mut GtkStyleProvider;
    #[cfg(gtk_3_16)]
    pub fn cast_GtkGLArea(widget: *mut GtkWidget) -> *mut GtkGLArea;
}
