// This file was generated by gir (5232053) from gir-files (71d73f0)
// DO NOT EDIT

use Bin;
use Container;
use Widget;
use Window;
use ffi;
use glib::Value;
use glib::object::IsA;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct ShortcutsWindow(Object<ffi::GtkShortcutsWindow>): Window, Bin, Container, Widget;

    match fn {
        get_type => || ffi::gtk_shortcuts_window_get_type(),
    }
}

impl ShortcutsWindow {
    pub fn get_property_section_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "section-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_section_name(&self, section_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "section-name".to_glib_none().0, Value::from(section_name).to_glib_none().0);
        }
    }

    pub fn get_property_view_name(&self) -> Option<String> {
        let mut value = Value::from(None::<&str>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "view-name".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_view_name(&self, view_name: Option<&str>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "view-name".to_glib_none().0, Value::from(view_name).to_glib_none().0);
        }
    }

    pub fn connect_close<F: Fn(&ShortcutsWindow) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&ShortcutsWindow) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "close",
                transmute(close_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }

    pub fn connect_search<F: Fn(&ShortcutsWindow) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&ShortcutsWindow) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "search",
                transmute(search_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn close_trampoline(this: *mut ffi::GtkShortcutsWindow, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&ShortcutsWindow) + 'static> = transmute(f);
    f(&from_glib_none(this))
}

unsafe extern "C" fn search_trampoline(this: *mut ffi::GtkShortcutsWindow, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&ShortcutsWindow) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
