// This file was generated by gir (add4ad6) from gir-files (0bcaef9)
// DO NOT EDIT

use EventController;
use Gesture;
use GestureDrag;
use GestureSingle;
#[cfg(feature = "v3_14")]
use Orientation;
#[cfg(feature = "v3_14")]
use PanDirection;
#[cfg(feature = "v3_14")]
use Widget;
use ffi;
use glib;
use glib::object::Downcast;
use glib::object::IsA;
#[cfg(feature = "v3_14")]
use glib::signal::connect;
use glib::translate::*;
#[cfg(feature = "v3_14")]
use glib_ffi;
#[cfg(feature = "v3_14")]
use libc;
#[cfg(feature = "v3_14")]
use std::boxed::Box as Box_;
#[cfg(feature = "v3_14")]
use std::mem::transmute;

glib_wrapper! {
    pub struct GesturePan(Object<ffi::GtkGesturePan>): GestureDrag, GestureSingle, Gesture, EventController;

    match fn {
        get_type => || ffi::gtk_gesture_pan_get_type(),
    }
}

impl GesturePan {
    #[cfg(feature = "v3_14")]
    pub fn new<P: IsA<Widget>>(widget: &P, orientation: Orientation) -> GesturePan {
        skip_assert_initialized!();
        unsafe {
            Gesture::from_glib_full(ffi::gtk_gesture_pan_new(widget.to_glib_none().0, orientation)).downcast_unchecked()
        }
    }
}

pub trait GesturePanExt {
    #[cfg(feature = "v3_14")]
    fn get_orientation(&self) -> Orientation;

    #[cfg(feature = "v3_14")]
    fn set_orientation(&self, orientation: Orientation);

    #[cfg(feature = "v3_14")]
    fn connect_pan<F: Fn(&Self, PanDirection, f64) + 'static>(&self, f: F) -> u64;
}

impl<O: IsA<GesturePan> + IsA<glib::object::Object>> GesturePanExt for O {
    #[cfg(feature = "v3_14")]
    fn get_orientation(&self) -> Orientation {
        unsafe {
            ffi::gtk_gesture_pan_get_orientation(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_14")]
    fn set_orientation(&self, orientation: Orientation) {
        unsafe {
            ffi::gtk_gesture_pan_set_orientation(self.to_glib_none().0, orientation);
        }
    }

    #[cfg(feature = "v3_14")]
    fn connect_pan<F: Fn(&Self, PanDirection, f64) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Self, PanDirection, f64) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "pan",
                transmute(pan_trampoline::<Self> as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

#[cfg(feature = "v3_14")]
unsafe extern "C" fn pan_trampoline<P>(this: *mut ffi::GtkGesturePan, direction: ffi::GtkPanDirection, offset: libc::c_double, f: glib_ffi::gpointer)
where P: IsA<GesturePan> {
    callback_guard!();
    let f: &Box_<Fn(&P, PanDirection, f64) + 'static> = transmute(f);
    f(&GesturePan::from_glib_none(this).downcast_unchecked(), direction, offset)
}
